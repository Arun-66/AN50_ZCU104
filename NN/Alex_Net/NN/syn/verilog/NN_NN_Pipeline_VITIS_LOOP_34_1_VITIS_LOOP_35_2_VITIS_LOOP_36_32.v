// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module NN_NN_Pipeline_VITIS_LOOP_34_1_VITIS_LOOP_35_2_VITIS_LOOP_36_32 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Pad4_out_img_address0,
        Pad4_out_img_ce0,
        Pad4_out_img_we0,
        Pad4_out_img_d0,
        Conv4_out_img_address0,
        Conv4_out_img_ce0,
        Conv4_out_img_q0,
        Conv4_out_img_1_address0,
        Conv4_out_img_1_ce0,
        Conv4_out_img_1_q0,
        Conv4_out_img_2_address0,
        Conv4_out_img_2_ce0,
        Conv4_out_img_2_q0,
        Conv4_out_img_3_address0,
        Conv4_out_img_3_ce0,
        Conv4_out_img_3_q0,
        Conv4_out_img_4_address0,
        Conv4_out_img_4_ce0,
        Conv4_out_img_4_q0,
        Conv4_out_img_5_address0,
        Conv4_out_img_5_ce0,
        Conv4_out_img_5_q0,
        Conv4_out_img_6_address0,
        Conv4_out_img_6_ce0,
        Conv4_out_img_6_q0,
        Conv4_out_img_7_address0,
        Conv4_out_img_7_ce0,
        Conv4_out_img_7_q0,
        Conv4_out_img_8_address0,
        Conv4_out_img_8_ce0,
        Conv4_out_img_8_q0,
        Conv4_out_img_9_address0,
        Conv4_out_img_9_ce0,
        Conv4_out_img_9_q0,
        Conv4_out_img_10_address0,
        Conv4_out_img_10_ce0,
        Conv4_out_img_10_q0,
        Conv4_out_img_11_address0,
        Conv4_out_img_11_ce0,
        Conv4_out_img_11_q0,
        Conv4_out_img_12_address0,
        Conv4_out_img_12_ce0,
        Conv4_out_img_12_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [16:0] Pad4_out_img_address0;
output   Pad4_out_img_ce0;
output   Pad4_out_img_we0;
output  [31:0] Pad4_out_img_d0;
output  [12:0] Conv4_out_img_address0;
output   Conv4_out_img_ce0;
input  [31:0] Conv4_out_img_q0;
output  [12:0] Conv4_out_img_1_address0;
output   Conv4_out_img_1_ce0;
input  [31:0] Conv4_out_img_1_q0;
output  [12:0] Conv4_out_img_2_address0;
output   Conv4_out_img_2_ce0;
input  [31:0] Conv4_out_img_2_q0;
output  [12:0] Conv4_out_img_3_address0;
output   Conv4_out_img_3_ce0;
input  [31:0] Conv4_out_img_3_q0;
output  [12:0] Conv4_out_img_4_address0;
output   Conv4_out_img_4_ce0;
input  [31:0] Conv4_out_img_4_q0;
output  [12:0] Conv4_out_img_5_address0;
output   Conv4_out_img_5_ce0;
input  [31:0] Conv4_out_img_5_q0;
output  [12:0] Conv4_out_img_6_address0;
output   Conv4_out_img_6_ce0;
input  [31:0] Conv4_out_img_6_q0;
output  [12:0] Conv4_out_img_7_address0;
output   Conv4_out_img_7_ce0;
input  [31:0] Conv4_out_img_7_q0;
output  [12:0] Conv4_out_img_8_address0;
output   Conv4_out_img_8_ce0;
input  [31:0] Conv4_out_img_8_q0;
output  [12:0] Conv4_out_img_9_address0;
output   Conv4_out_img_9_ce0;
input  [31:0] Conv4_out_img_9_q0;
output  [12:0] Conv4_out_img_10_address0;
output   Conv4_out_img_10_ce0;
input  [31:0] Conv4_out_img_10_q0;
output  [12:0] Conv4_out_img_11_address0;
output   Conv4_out_img_11_ce0;
input  [31:0] Conv4_out_img_11_q0;
output  [12:0] Conv4_out_img_12_address0;
output   Conv4_out_img_12_ce0;
input  [31:0] Conv4_out_img_12_q0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln34_fu_355_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln35_fu_376_p2;
reg   [0:0] icmp_ln35_reg_783;
reg   [0:0] icmp_ln35_reg_783_pp0_iter2_reg;
wire   [3:0] j_3_mid2_fu_420_p3;
reg   [3:0] j_3_mid2_reg_788;
reg   [3:0] j_3_mid2_reg_788_pp0_iter2_reg;
reg   [3:0] j_3_mid2_reg_788_pp0_iter3_reg;
reg   [3:0] j_3_mid2_reg_788_pp0_iter4_reg;
reg   [3:0] j_3_mid2_reg_788_pp0_iter5_reg;
wire   [7:0] zext_ln35_fu_436_p1;
wire   [0:0] cmp9_i39_fu_440_p2;
reg   [0:0] cmp9_i39_reg_804;
reg   [0:0] cmp9_i39_reg_804_pp0_iter2_reg;
reg   [0:0] cmp9_i39_reg_804_pp0_iter3_reg;
reg   [0:0] cmp9_i39_reg_804_pp0_iter4_reg;
reg   [0:0] cmp9_i39_reg_804_pp0_iter5_reg;
wire   [7:0] empty_1354_fu_454_p2;
reg   [7:0] empty_1354_reg_809;
reg   [7:0] empty_1354_reg_809_pp0_iter2_reg;
reg   [7:0] empty_1354_reg_809_pp0_iter3_reg;
reg   [7:0] empty_1354_reg_809_pp0_iter4_reg;
reg   [7:0] empty_1354_reg_809_pp0_iter5_reg;
wire   [0:0] cmp10_i40_fu_460_p2;
reg   [0:0] cmp10_i40_reg_814;
reg   [0:0] cmp10_i40_reg_814_pp0_iter2_reg;
reg   [0:0] cmp10_i40_reg_814_pp0_iter3_reg;
reg   [0:0] cmp10_i40_reg_814_pp0_iter4_reg;
reg   [0:0] cmp10_i40_reg_814_pp0_iter5_reg;
wire   [15:0] mul_ln35_fu_530_p2;
wire   [16:0] add_ln45_2_fu_557_p2;
reg   [16:0] add_ln45_2_reg_829;
wire   [63:0] zext_ln45_2_fu_584_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln41_fu_635_p1;
reg   [3:0] j_3_fu_120;
wire   [3:0] add_ln36_fu_466_p2;
wire    ap_loop_init;
reg   [3:0] i_fu_124;
wire   [3:0] select_ln35_fu_428_p3;
reg   [7:0] indvar_flatten59_fu_128;
wire   [7:0] select_ln35_1_fu_478_p3;
reg   [8:0] c_6_fu_132;
wire   [8:0] select_ln34_1_fu_515_p3;
reg   [16:0] indvar_flatten72_fu_136;
wire   [16:0] add_ln34_fu_361_p2;
reg    Conv4_out_img_ce0_local;
reg    Conv4_out_img_1_ce0_local;
reg    Conv4_out_img_2_ce0_local;
reg    Conv4_out_img_3_ce0_local;
reg    Conv4_out_img_4_ce0_local;
reg    Conv4_out_img_5_ce0_local;
reg    Conv4_out_img_6_ce0_local;
reg    Conv4_out_img_7_ce0_local;
reg    Conv4_out_img_8_ce0_local;
reg    Conv4_out_img_9_ce0_local;
reg    Conv4_out_img_10_ce0_local;
reg    Conv4_out_img_11_ce0_local;
reg    Conv4_out_img_12_ce0_local;
reg    Pad4_out_img_we0_local;
wire   [31:0] storemerge73_fu_717_p3;
reg    Pad4_out_img_ce0_local;
wire   [63:0] mul_ln45_fu_322_p0;
wire   [65:0] mul_ln45_fu_322_p1;
wire   [0:0] icmp_ln36_fu_396_p2;
wire   [0:0] xor_ln34_fu_390_p2;
wire   [3:0] select_ln34_fu_382_p3;
wire   [0:0] and_ln34_fu_402_p2;
wire   [0:0] empty_fu_414_p2;
wire   [3:0] add_ln35_fu_408_p2;
wire   [7:0] p_shl_fu_446_p3;
wire   [7:0] add_ln35_1_fu_472_p2;
wire   [8:0] add_ln34_1_fu_509_p2;
wire   [8:0] mul_ln35_fu_530_p0;
wire   [8:0] mul_ln35_fu_530_p1;
wire   [15:0] grp_fu_726_p3;
wire   [4:0] zext_ln36_2_fu_541_p1;
wire   [4:0] add_ln45_1_fu_547_p2;
wire  signed [16:0] sext_ln45_fu_553_p1;
wire   [16:0] zext_ln45_fu_544_p1;
wire  signed [63:0] sext_ln45_1_fu_566_p1;
wire   [128:0] mul_ln45_fu_322_p2;
wire   [60:0] tmp_fu_574_p4;
wire   [0:0] icmp_ln39_fu_604_p2;
wire   [0:0] icmp_ln39_1_fu_609_p2;
wire   [0:0] or_ln39_1_fu_618_p2;
wire   [0:0] or_ln39_fu_614_p2;
wire   [16:0] grp_fu_735_p3;
wire   [16:0] p_cast38_fu_601_p1;
(* use_dsp48 = "no" *) wire   [16:0] add_ln41_1_fu_630_p2;
wire   [0:0] icmp_ln45_fu_640_p2;
wire   [3:0] add_ln45_3_fu_645_p2;
wire   [31:0] tmp_s_fu_657_p27;
wire   [3:0] tmp_s_fu_657_p28;
wire   [0:0] or_ln39_2_fu_624_p2;
wire   [31:0] tmp_s_fu_657_p29;
wire   [3:0] grp_fu_726_p0;
wire   [3:0] grp_fu_726_p1;
wire   [8:0] grp_fu_735_p0;
wire   [7:0] grp_fu_735_p1;
wire   [3:0] grp_fu_735_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [16:0] grp_fu_735_p00;
wire   [16:0] grp_fu_735_p20;
wire   [15:0] mul_ln35_fu_530_p00;
wire   [128:0] mul_ln45_fu_322_p00;
wire   [3:0] tmp_s_fu_657_p1;
wire   [3:0] tmp_s_fu_657_p3;
wire   [3:0] tmp_s_fu_657_p5;
wire   [3:0] tmp_s_fu_657_p7;
wire   [3:0] tmp_s_fu_657_p9;
wire   [3:0] tmp_s_fu_657_p11;
wire   [3:0] tmp_s_fu_657_p13;
wire  signed [3:0] tmp_s_fu_657_p15;
wire  signed [3:0] tmp_s_fu_657_p17;
wire  signed [3:0] tmp_s_fu_657_p19;
wire  signed [3:0] tmp_s_fu_657_p21;
wire  signed [3:0] tmp_s_fu_657_p23;
wire   [3:0] tmp_s_fu_657_p25;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 j_3_fu_120 = 4'd0;
#0 i_fu_124 = 4'd0;
#0 indvar_flatten59_fu_128 = 8'd0;
#0 c_6_fu_132 = 9'd0;
#0 indvar_flatten72_fu_136 = 17'd0;
#0 ap_done_reg = 1'b0;
end

NN_mul_64ns_66ns_129_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 66 ),
    .dout_WIDTH( 129 ))
mul_64ns_66ns_129_1_1_U20144(
    .din0(mul_ln45_fu_322_p0),
    .din1(mul_ln45_fu_322_p1),
    .dout(mul_ln45_fu_322_p2)
);

NN_mul_9ns_9ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 16 ))
mul_9ns_9ns_16_1_1_U20145(
    .din0(mul_ln35_fu_530_p0),
    .din1(mul_ln35_fu_530_p1),
    .dout(mul_ln35_fu_530_p2)
);

(* dissolve_hierarchy = "yes" *) NN_sparsemux_27_4_32_1_1_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h1 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h2 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h3 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h4 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h5 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h6 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h7 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h8 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h9 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'hA ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hB ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hC ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'h0 ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_x_U20146(
    .din0(Conv4_out_img_q0),
    .din1(Conv4_out_img_1_q0),
    .din2(Conv4_out_img_2_q0),
    .din3(Conv4_out_img_3_q0),
    .din4(Conv4_out_img_4_q0),
    .din5(Conv4_out_img_5_q0),
    .din6(Conv4_out_img_6_q0),
    .din7(Conv4_out_img_7_q0),
    .din8(Conv4_out_img_8_q0),
    .din9(Conv4_out_img_9_q0),
    .din10(Conv4_out_img_10_q0),
    .din11(Conv4_out_img_11_q0),
    .din12(Conv4_out_img_12_q0),
    .def(tmp_s_fu_657_p27),
    .sel(tmp_s_fu_657_p28),
    .dout(tmp_s_fu_657_p29)
);

NN_mac_muladd_4ns_4ns_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_4ns_4ns_16ns_16_4_1_U20147(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_726_p0),
    .din1(grp_fu_726_p1),
    .din2(mul_ln35_fu_530_p2),
    .ce(1'b1),
    .dout(grp_fu_726_p3)
);

NN_mac_muladd_9ns_8ns_4ns_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 17 ))
mac_muladd_9ns_8ns_4ns_17_4_1_U20148(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_735_p0),
    .din1(grp_fu_735_p1),
    .din2(grp_fu_735_p2),
    .ce(1'b1),
    .dout(grp_fu_735_p3)
);

NN_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            c_6_fu_132 <= 9'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            c_6_fu_132 <= select_ln34_1_fu_515_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_124 <= 4'd0;
        end else if (((icmp_ln34_fu_355_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_124 <= select_ln35_fu_428_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten59_fu_128 <= 8'd0;
        end else if (((icmp_ln34_fu_355_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten59_fu_128 <= select_ln35_1_fu_478_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten72_fu_136 <= 17'd0;
        end else if (((icmp_ln34_fu_355_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten72_fu_136 <= add_ln34_fu_361_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_3_fu_120 <= 4'd0;
        end else if (((icmp_ln34_fu_355_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_3_fu_120 <= add_ln36_fu_466_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln45_2_reg_829 <= add_ln45_2_fu_557_p2;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        cmp10_i40_reg_814_pp0_iter2_reg <= cmp10_i40_reg_814;
        cmp10_i40_reg_814_pp0_iter3_reg <= cmp10_i40_reg_814_pp0_iter2_reg;
        cmp10_i40_reg_814_pp0_iter4_reg <= cmp10_i40_reg_814_pp0_iter3_reg;
        cmp10_i40_reg_814_pp0_iter5_reg <= cmp10_i40_reg_814_pp0_iter4_reg;
        cmp9_i39_reg_804_pp0_iter2_reg <= cmp9_i39_reg_804;
        cmp9_i39_reg_804_pp0_iter3_reg <= cmp9_i39_reg_804_pp0_iter2_reg;
        cmp9_i39_reg_804_pp0_iter4_reg <= cmp9_i39_reg_804_pp0_iter3_reg;
        cmp9_i39_reg_804_pp0_iter5_reg <= cmp9_i39_reg_804_pp0_iter4_reg;
        empty_1354_reg_809_pp0_iter2_reg <= empty_1354_reg_809;
        empty_1354_reg_809_pp0_iter3_reg <= empty_1354_reg_809_pp0_iter2_reg;
        empty_1354_reg_809_pp0_iter4_reg <= empty_1354_reg_809_pp0_iter3_reg;
        empty_1354_reg_809_pp0_iter5_reg <= empty_1354_reg_809_pp0_iter4_reg;
        icmp_ln35_reg_783_pp0_iter2_reg <= icmp_ln35_reg_783;
        j_3_mid2_reg_788_pp0_iter2_reg <= j_3_mid2_reg_788;
        j_3_mid2_reg_788_pp0_iter3_reg <= j_3_mid2_reg_788_pp0_iter2_reg;
        j_3_mid2_reg_788_pp0_iter4_reg <= j_3_mid2_reg_788_pp0_iter3_reg;
        j_3_mid2_reg_788_pp0_iter5_reg <= j_3_mid2_reg_788_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        cmp10_i40_reg_814 <= cmp10_i40_fu_460_p2;
        cmp9_i39_reg_804 <= cmp9_i39_fu_440_p2;
        empty_1354_reg_809 <= empty_1354_fu_454_p2;
        icmp_ln35_reg_783 <= icmp_ln35_fu_376_p2;
        j_3_mid2_reg_788 <= j_3_mid2_fu_420_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        Conv4_out_img_10_ce0_local = 1'b1;
    end else begin
        Conv4_out_img_10_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        Conv4_out_img_11_ce0_local = 1'b1;
    end else begin
        Conv4_out_img_11_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        Conv4_out_img_12_ce0_local = 1'b1;
    end else begin
        Conv4_out_img_12_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        Conv4_out_img_1_ce0_local = 1'b1;
    end else begin
        Conv4_out_img_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        Conv4_out_img_2_ce0_local = 1'b1;
    end else begin
        Conv4_out_img_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        Conv4_out_img_3_ce0_local = 1'b1;
    end else begin
        Conv4_out_img_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        Conv4_out_img_4_ce0_local = 1'b1;
    end else begin
        Conv4_out_img_4_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        Conv4_out_img_5_ce0_local = 1'b1;
    end else begin
        Conv4_out_img_5_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        Conv4_out_img_6_ce0_local = 1'b1;
    end else begin
        Conv4_out_img_6_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        Conv4_out_img_7_ce0_local = 1'b1;
    end else begin
        Conv4_out_img_7_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        Conv4_out_img_8_ce0_local = 1'b1;
    end else begin
        Conv4_out_img_8_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        Conv4_out_img_9_ce0_local = 1'b1;
    end else begin
        Conv4_out_img_9_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        Conv4_out_img_ce0_local = 1'b1;
    end else begin
        Conv4_out_img_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        Pad4_out_img_ce0_local = 1'b1;
    end else begin
        Pad4_out_img_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        Pad4_out_img_we0_local = 1'b1;
    end else begin
        Pad4_out_img_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_fu_355_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Conv4_out_img_10_address0 = zext_ln45_2_fu_584_p1;

assign Conv4_out_img_10_ce0 = Conv4_out_img_10_ce0_local;

assign Conv4_out_img_11_address0 = zext_ln45_2_fu_584_p1;

assign Conv4_out_img_11_ce0 = Conv4_out_img_11_ce0_local;

assign Conv4_out_img_12_address0 = zext_ln45_2_fu_584_p1;

assign Conv4_out_img_12_ce0 = Conv4_out_img_12_ce0_local;

assign Conv4_out_img_1_address0 = zext_ln45_2_fu_584_p1;

assign Conv4_out_img_1_ce0 = Conv4_out_img_1_ce0_local;

assign Conv4_out_img_2_address0 = zext_ln45_2_fu_584_p1;

assign Conv4_out_img_2_ce0 = Conv4_out_img_2_ce0_local;

assign Conv4_out_img_3_address0 = zext_ln45_2_fu_584_p1;

assign Conv4_out_img_3_ce0 = Conv4_out_img_3_ce0_local;

assign Conv4_out_img_4_address0 = zext_ln45_2_fu_584_p1;

assign Conv4_out_img_4_ce0 = Conv4_out_img_4_ce0_local;

assign Conv4_out_img_5_address0 = zext_ln45_2_fu_584_p1;

assign Conv4_out_img_5_ce0 = Conv4_out_img_5_ce0_local;

assign Conv4_out_img_6_address0 = zext_ln45_2_fu_584_p1;

assign Conv4_out_img_6_ce0 = Conv4_out_img_6_ce0_local;

assign Conv4_out_img_7_address0 = zext_ln45_2_fu_584_p1;

assign Conv4_out_img_7_ce0 = Conv4_out_img_7_ce0_local;

assign Conv4_out_img_8_address0 = zext_ln45_2_fu_584_p1;

assign Conv4_out_img_8_ce0 = Conv4_out_img_8_ce0_local;

assign Conv4_out_img_9_address0 = zext_ln45_2_fu_584_p1;

assign Conv4_out_img_9_ce0 = Conv4_out_img_9_ce0_local;

assign Conv4_out_img_address0 = zext_ln45_2_fu_584_p1;

assign Conv4_out_img_ce0 = Conv4_out_img_ce0_local;

assign Pad4_out_img_address0 = zext_ln41_fu_635_p1;

assign Pad4_out_img_ce0 = Pad4_out_img_ce0_local;

assign Pad4_out_img_d0 = storemerge73_fu_717_p3;

assign Pad4_out_img_we0 = Pad4_out_img_we0_local;

assign add_ln34_1_fu_509_p2 = (c_6_fu_132 + 9'd1);

assign add_ln34_fu_361_p2 = (indvar_flatten72_fu_136 + 17'd1);

assign add_ln35_1_fu_472_p2 = (indvar_flatten59_fu_128 + 8'd1);

assign add_ln35_fu_408_p2 = (select_ln34_fu_382_p3 + 4'd1);

assign add_ln36_fu_466_p2 = (j_3_mid2_fu_420_p3 + 4'd1);

assign add_ln41_1_fu_630_p2 = (grp_fu_735_p3 + p_cast38_fu_601_p1);

assign add_ln45_1_fu_547_p2 = ($signed(zext_ln36_2_fu_541_p1) + $signed(5'd18));

assign add_ln45_2_fu_557_p2 = ($signed(sext_ln45_fu_553_p1) + $signed(zext_ln45_fu_544_p1));

assign add_ln45_3_fu_645_p2 = (j_3_mid2_reg_788_pp0_iter5_reg + 4'd3);

assign and_ln34_fu_402_p2 = (xor_ln34_fu_390_p2 & icmp_ln36_fu_396_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_ready = ap_ready_sig;

assign cmp10_i40_fu_460_p2 = ((select_ln35_fu_428_p3 > 4'd13) ? 1'b1 : 1'b0);

assign cmp9_i39_fu_440_p2 = ((select_ln35_fu_428_p3 == 4'd0) ? 1'b1 : 1'b0);

assign empty_1354_fu_454_p2 = (p_shl_fu_446_p3 - zext_ln35_fu_436_p1);

assign empty_fu_414_p2 = (icmp_ln35_fu_376_p2 | and_ln34_fu_402_p2);

assign grp_fu_726_p0 = zext_ln35_fu_436_p1;

assign grp_fu_726_p1 = 8'd13;

assign grp_fu_735_p0 = grp_fu_735_p00;

assign grp_fu_735_p00 = select_ln34_1_fu_515_p3;

assign grp_fu_735_p1 = 17'd225;

assign grp_fu_735_p2 = grp_fu_735_p20;

assign grp_fu_735_p20 = j_3_mid2_reg_788_pp0_iter4_reg;

assign icmp_ln34_fu_355_p2 = ((indvar_flatten72_fu_136 == 17'd86400) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_376_p2 = ((indvar_flatten59_fu_128 == 8'd225) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_396_p2 = ((j_3_fu_120 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln39_1_fu_609_p2 = ((j_3_mid2_reg_788_pp0_iter5_reg > 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_604_p2 = ((j_3_mid2_reg_788_pp0_iter5_reg == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_640_p2 = ((j_3_mid2_reg_788_pp0_iter5_reg < 4'd13) ? 1'b1 : 1'b0);

assign j_3_mid2_fu_420_p3 = ((empty_fu_414_p2[0:0] == 1'b1) ? 4'd0 : j_3_fu_120);

assign mul_ln35_fu_530_p0 = mul_ln35_fu_530_p00;

assign mul_ln35_fu_530_p00 = select_ln34_1_fu_515_p3;

assign mul_ln35_fu_530_p1 = 16'd169;

assign mul_ln45_fu_322_p0 = mul_ln45_fu_322_p00;

assign mul_ln45_fu_322_p00 = $unsigned(sext_ln45_1_fu_566_p1);

assign mul_ln45_fu_322_p1 = 129'd22703685013796371220;

assign or_ln39_1_fu_618_p2 = (icmp_ln39_fu_604_p2 | icmp_ln39_1_fu_609_p2);

assign or_ln39_2_fu_624_p2 = (or_ln39_fu_614_p2 | or_ln39_1_fu_618_p2);

assign or_ln39_fu_614_p2 = (cmp9_i39_reg_804_pp0_iter5_reg | cmp10_i40_reg_814_pp0_iter5_reg);

assign p_cast38_fu_601_p1 = empty_1354_reg_809_pp0_iter5_reg;

assign p_shl_fu_446_p3 = {{select_ln35_fu_428_p3}, {4'd0}};

assign select_ln34_1_fu_515_p3 = ((icmp_ln35_reg_783_pp0_iter2_reg[0:0] == 1'b1) ? add_ln34_1_fu_509_p2 : c_6_fu_132);

assign select_ln34_fu_382_p3 = ((icmp_ln35_fu_376_p2[0:0] == 1'b1) ? 4'd0 : i_fu_124);

assign select_ln35_1_fu_478_p3 = ((icmp_ln35_fu_376_p2[0:0] == 1'b1) ? 8'd1 : add_ln35_1_fu_472_p2);

assign select_ln35_fu_428_p3 = ((and_ln34_fu_402_p2[0:0] == 1'b1) ? add_ln35_fu_408_p2 : select_ln34_fu_382_p3);

assign sext_ln45_1_fu_566_p1 = $signed(add_ln45_2_reg_829);

assign sext_ln45_fu_553_p1 = $signed(add_ln45_1_fu_547_p2);

assign storemerge73_fu_717_p3 = ((or_ln39_2_fu_624_p2[0:0] == 1'b1) ? 32'd0 : tmp_s_fu_657_p29);

assign tmp_fu_574_p4 = {{mul_ln45_fu_322_p2[128:68]}};

assign tmp_s_fu_657_p27 = 'bx;

assign tmp_s_fu_657_p28 = ((icmp_ln45_fu_640_p2[0:0] == 1'b1) ? j_3_mid2_reg_788_pp0_iter5_reg : add_ln45_3_fu_645_p2);

assign xor_ln34_fu_390_p2 = (icmp_ln35_fu_376_p2 ^ 1'd1);

assign zext_ln35_fu_436_p1 = select_ln35_fu_428_p3;

assign zext_ln36_2_fu_541_p1 = j_3_mid2_reg_788_pp0_iter3_reg;

assign zext_ln41_fu_635_p1 = add_ln41_1_fu_630_p2;

assign zext_ln45_2_fu_584_p1 = tmp_fu_574_p4;

assign zext_ln45_fu_544_p1 = grp_fu_726_p3;

endmodule //NN_NN_Pipeline_VITIS_LOOP_34_1_VITIS_LOOP_35_2_VITIS_LOOP_36_32
