// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module NN_NN_Pipeline_VITIS_LOOP_23_1_VITIS_LOOP_24_2_VITIS_LOOP_25_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Pad2_out_img_address0,
        Pad2_out_img_ce0,
        Pad2_out_img_we0,
        Pad2_out_img_d0,
        Norm2_out_img_address0,
        Norm2_out_img_ce0,
        Norm2_out_img_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] Pad2_out_img_address0;
output   Pad2_out_img_ce0;
output   Pad2_out_img_we0;
output  [31:0] Pad2_out_img_d0;
output  [15:0] Norm2_out_img_address0;
output   Norm2_out_img_ce0;
input  [31:0] Norm2_out_img_q0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln23_fu_136_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln24_fu_157_p2;
reg   [0:0] icmp_ln24_reg_451;
wire   [3:0] j_1_mid2_fu_201_p3;
reg   [3:0] j_1_mid2_reg_456;
reg   [3:0] j_1_mid2_reg_456_pp0_iter1_reg;
reg   [3:0] j_1_mid2_reg_456_pp0_iter2_reg;
wire   [7:0] zext_ln24_fu_217_p1;
wire   [7:0] empty_1363_fu_229_p2;
reg   [7:0] empty_1363_reg_467;
reg   [7:0] empty_1363_reg_467_pp0_iter1_reg;
reg   [7:0] empty_1363_reg_467_pp0_iter2_reg;
reg   [7:0] empty_1363_reg_467_pp0_iter3_reg;
wire   [0:0] or_ln33_1_fu_271_p2;
reg   [0:0] or_ln33_1_reg_472;
reg   [0:0] or_ln33_1_reg_472_pp0_iter1_reg;
reg   [0:0] or_ln33_1_reg_472_pp0_iter2_reg;
reg   [0:0] or_ln33_1_reg_472_pp0_iter3_reg;
wire   [15:0] select_ln23_1_cast_fu_333_p1;
reg   [15:0] select_ln23_1_cast_reg_477;
wire   [15:0] mul_ln24_fu_342_p2;
wire   [63:0] zext_ln34_fu_368_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln30_fu_381_p1;
reg   [3:0] j_1_fu_62;
wire   [3:0] add_ln25_fu_277_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_1_load;
reg   [3:0] i_fu_66;
wire   [3:0] select_ln24_fu_209_p3;
reg   [3:0] ap_sig_allocacmp_i_load;
reg   [7:0] indvar_flatten19_fu_70;
wire   [7:0] select_ln24_1_fu_289_p3;
reg   [7:0] ap_sig_allocacmp_indvar_flatten19_load;
reg   [8:0] c_4_fu_74;
wire   [8:0] select_ln23_1_fu_326_p3;
reg   [15:0] indvar_flatten32_fu_78;
wire   [15:0] add_ln23_1_fu_142_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten32_load;
reg    Norm2_out_img_ce0_local;
reg    Pad2_out_img_we0_local;
wire   [31:0] storemerge67_fu_386_p3;
reg    Pad2_out_img_ce0_local;
wire   [0:0] icmp_ln2588_fu_177_p2;
wire   [0:0] xor_ln23_fu_171_p2;
wire   [3:0] select_ln23_fu_163_p3;
wire   [0:0] and_ln23_fu_183_p2;
wire   [0:0] empty_fu_195_p2;
wire   [3:0] add_ln24_fu_189_p2;
wire   [7:0] p_shl_fu_221_p3;
wire   [0:0] cmp18_i_fu_235_p2;
wire   [0:0] cmp19_i_fu_241_p2;
wire   [0:0] icmp_ln34_fu_247_p2;
wire   [0:0] icmp_ln34_1_fu_253_p2;
wire   [0:0] or_ln33_2_fu_265_p2;
wire   [0:0] or_ln33_fu_259_p2;
wire   [7:0] add_ln24_1_fu_283_p2;
wire   [8:0] add_ln23_fu_320_p2;
wire   [8:0] mul_ln24_fu_342_p0;
wire   [8:0] mul_ln24_fu_342_p1;
wire   [4:0] zext_ln25_fu_347_p1;
wire   [4:0] add_ln30_2_fu_353_p2;
wire  signed [15:0] sext_ln30_fu_359_p1;
wire   [15:0] grp_fu_394_p3;
(* use_dsp48 = "no" *) wire   [15:0] add_ln30_fu_363_p2;
wire   [15:0] grp_fu_403_p3;
wire   [15:0] p_cast28_fu_373_p1;
(* use_dsp48 = "no" *) wire   [15:0] add_ln29_fu_376_p2;
wire   [3:0] grp_fu_394_p0;
wire   [3:0] grp_fu_394_p1;
wire   [8:0] grp_fu_403_p0;
wire   [7:0] grp_fu_403_p1;
wire   [3:0] grp_fu_403_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [15:0] grp_fu_403_p00;
wire   [15:0] grp_fu_403_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 j_1_fu_62 = 4'd0;
#0 i_fu_66 = 4'd0;
#0 indvar_flatten19_fu_70 = 8'd0;
#0 c_4_fu_74 = 9'd0;
#0 indvar_flatten32_fu_78 = 16'd0;
#0 ap_done_reg = 1'b0;
end

NN_mul_9ns_9ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 16 ))
mul_9ns_9ns_16_1_1_U11783(
    .din0(mul_ln24_fu_342_p0),
    .din1(mul_ln24_fu_342_p1),
    .dout(mul_ln24_fu_342_p2)
);

NN_mac_muladd_4ns_4ns_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_4ns_4ns_16ns_16_4_1_U11784(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_394_p0),
    .din1(grp_fu_394_p1),
    .din2(mul_ln24_fu_342_p2),
    .ce(1'b1),
    .dout(grp_fu_394_p3)
);

NN_mac_muladd_9ns_8ns_4ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mac_muladd_9ns_8ns_4ns_16_4_1_U11785(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_403_p0),
    .din1(grp_fu_403_p1),
    .din2(grp_fu_403_p2),
    .ce(1'b1),
    .dout(grp_fu_403_p3)
);

NN_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            c_4_fu_74 <= 9'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            c_4_fu_74 <= select_ln23_1_fu_326_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln23_fu_136_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_66 <= select_ln24_fu_209_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_66 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln23_fu_136_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten19_fu_70 <= select_ln24_1_fu_289_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten19_fu_70 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln23_fu_136_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten32_fu_78 <= add_ln23_1_fu_142_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten32_fu_78 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln23_fu_136_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_1_fu_62 <= add_ln25_fu_277_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_1_fu_62 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        empty_1363_reg_467 <= empty_1363_fu_229_p2;
        empty_1363_reg_467_pp0_iter1_reg <= empty_1363_reg_467;
        icmp_ln24_reg_451 <= icmp_ln24_fu_157_p2;
        j_1_mid2_reg_456 <= j_1_mid2_fu_201_p3;
        j_1_mid2_reg_456_pp0_iter1_reg <= j_1_mid2_reg_456;
        or_ln33_1_reg_472 <= or_ln33_1_fu_271_p2;
        or_ln33_1_reg_472_pp0_iter1_reg <= or_ln33_1_reg_472;
        select_ln23_1_cast_reg_477[8 : 0] <= select_ln23_1_cast_fu_333_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        empty_1363_reg_467_pp0_iter2_reg <= empty_1363_reg_467_pp0_iter1_reg;
        empty_1363_reg_467_pp0_iter3_reg <= empty_1363_reg_467_pp0_iter2_reg;
        j_1_mid2_reg_456_pp0_iter2_reg <= j_1_mid2_reg_456_pp0_iter1_reg;
        or_ln33_1_reg_472_pp0_iter2_reg <= or_ln33_1_reg_472_pp0_iter1_reg;
        or_ln33_1_reg_472_pp0_iter3_reg <= or_ln33_1_reg_472_pp0_iter2_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        Norm2_out_img_ce0_local = 1'b1;
    end else begin
        Norm2_out_img_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        Pad2_out_img_ce0_local = 1'b1;
    end else begin
        Pad2_out_img_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        Pad2_out_img_we0_local = 1'b1;
    end else begin
        Pad2_out_img_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln23_fu_136_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten19_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten19_load = indvar_flatten19_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten32_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten32_load = indvar_flatten32_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_1_load = 4'd0;
    end else begin
        ap_sig_allocacmp_j_1_load = j_1_fu_62;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Norm2_out_img_address0 = zext_ln34_fu_368_p1;

assign Norm2_out_img_ce0 = Norm2_out_img_ce0_local;

assign Pad2_out_img_address0 = zext_ln30_fu_381_p1;

assign Pad2_out_img_ce0 = Pad2_out_img_ce0_local;

assign Pad2_out_img_d0 = storemerge67_fu_386_p3;

assign Pad2_out_img_we0 = Pad2_out_img_we0_local;

assign add_ln23_1_fu_142_p2 = (ap_sig_allocacmp_indvar_flatten32_load + 16'd1);

assign add_ln23_fu_320_p2 = (c_4_fu_74 + 9'd1);

assign add_ln24_1_fu_283_p2 = (ap_sig_allocacmp_indvar_flatten19_load + 8'd1);

assign add_ln24_fu_189_p2 = (select_ln23_fu_163_p3 + 4'd1);

assign add_ln25_fu_277_p2 = (j_1_mid2_fu_201_p3 + 4'd1);

assign add_ln29_fu_376_p2 = (grp_fu_403_p3 + p_cast28_fu_373_p1);

assign add_ln30_2_fu_353_p2 = ($signed(zext_ln25_fu_347_p1) + $signed(5'd18));

assign add_ln30_fu_363_p2 = ($signed(sext_ln30_fu_359_p1) + $signed(grp_fu_394_p3));

assign and_ln23_fu_183_p2 = (xor_ln23_fu_171_p2 & icmp_ln2588_fu_177_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign cmp18_i_fu_235_p2 = ((select_ln24_fu_209_p3 == 4'd0) ? 1'b1 : 1'b0);

assign cmp19_i_fu_241_p2 = ((select_ln24_fu_209_p3 > 4'd13) ? 1'b1 : 1'b0);

assign empty_1363_fu_229_p2 = (p_shl_fu_221_p3 - zext_ln24_fu_217_p1);

assign empty_fu_195_p2 = (icmp_ln24_fu_157_p2 | and_ln23_fu_183_p2);

assign grp_fu_394_p0 = zext_ln24_fu_217_p1;

assign grp_fu_394_p1 = 8'd13;

assign grp_fu_403_p0 = grp_fu_403_p00;

assign grp_fu_403_p00 = select_ln23_1_fu_326_p3;

assign grp_fu_403_p1 = 16'd225;

assign grp_fu_403_p2 = grp_fu_403_p20;

assign grp_fu_403_p20 = j_1_mid2_reg_456_pp0_iter2_reg;

assign icmp_ln23_fu_136_p2 = ((ap_sig_allocacmp_indvar_flatten32_load == 16'd57600) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_157_p2 = ((ap_sig_allocacmp_indvar_flatten19_load == 8'd225) ? 1'b1 : 1'b0);

assign icmp_ln2588_fu_177_p2 = ((ap_sig_allocacmp_j_1_load == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln34_1_fu_253_p2 = ((j_1_mid2_fu_201_p3 > 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_247_p2 = ((j_1_mid2_fu_201_p3 == 4'd0) ? 1'b1 : 1'b0);

assign j_1_mid2_fu_201_p3 = ((empty_fu_195_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_j_1_load);

assign mul_ln24_fu_342_p0 = select_ln23_1_cast_reg_477;

assign mul_ln24_fu_342_p1 = 16'd169;

assign or_ln33_1_fu_271_p2 = (or_ln33_fu_259_p2 | or_ln33_2_fu_265_p2);

assign or_ln33_2_fu_265_p2 = (icmp_ln34_fu_247_p2 | icmp_ln34_1_fu_253_p2);

assign or_ln33_fu_259_p2 = (cmp19_i_fu_241_p2 | cmp18_i_fu_235_p2);

assign p_cast28_fu_373_p1 = empty_1363_reg_467_pp0_iter3_reg;

assign p_shl_fu_221_p3 = {{select_ln24_fu_209_p3}, {4'd0}};

assign select_ln23_1_cast_fu_333_p1 = select_ln23_1_fu_326_p3;

assign select_ln23_1_fu_326_p3 = ((icmp_ln24_reg_451[0:0] == 1'b1) ? add_ln23_fu_320_p2 : c_4_fu_74);

assign select_ln23_fu_163_p3 = ((icmp_ln24_fu_157_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_i_load);

assign select_ln24_1_fu_289_p3 = ((icmp_ln24_fu_157_p2[0:0] == 1'b1) ? 8'd1 : add_ln24_1_fu_283_p2);

assign select_ln24_fu_209_p3 = ((and_ln23_fu_183_p2[0:0] == 1'b1) ? add_ln24_fu_189_p2 : select_ln23_fu_163_p3);

assign sext_ln30_fu_359_p1 = $signed(add_ln30_2_fu_353_p2);

assign storemerge67_fu_386_p3 = ((or_ln33_1_reg_472_pp0_iter3_reg[0:0] == 1'b1) ? 32'd0 : Norm2_out_img_q0);

assign xor_ln23_fu_171_p2 = (icmp_ln24_fu_157_p2 ^ 1'd1);

assign zext_ln24_fu_217_p1 = select_ln24_fu_209_p3;

assign zext_ln25_fu_347_p1 = j_1_mid2_reg_456_pp0_iter2_reg;

assign zext_ln30_fu_381_p1 = add_ln29_fu_376_p2;

assign zext_ln34_fu_368_p1 = add_ln30_fu_363_p2;

always @ (posedge ap_clk) begin
    select_ln23_1_cast_reg_477[15:9] <= 7'b0000000;
end

endmodule //NN_NN_Pipeline_VITIS_LOOP_23_1_VITIS_LOOP_24_2_VITIS_LOOP_25_3
