// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module NN_conv1_Pipeline_L2_L3_L4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        line_buffer_3D_address0,
        line_buffer_3D_ce0,
        line_buffer_3D_we0,
        line_buffer_3D_d0,
        line_buffer_3D_1_address0,
        line_buffer_3D_1_ce0,
        line_buffer_3D_1_we0,
        line_buffer_3D_1_d0,
        line_buffer_3D_2_address0,
        line_buffer_3D_2_ce0,
        line_buffer_3D_2_we0,
        line_buffer_3D_2_d0,
        line_buffer_3D_3_address0,
        line_buffer_3D_3_ce0,
        line_buffer_3D_3_we0,
        line_buffer_3D_3_d0,
        line_buffer_3D_4_address0,
        line_buffer_3D_4_ce0,
        line_buffer_3D_4_we0,
        line_buffer_3D_4_d0,
        line_buffer_3D_5_address0,
        line_buffer_3D_5_ce0,
        line_buffer_3D_5_we0,
        line_buffer_3D_5_d0,
        line_buffer_3D_6_address0,
        line_buffer_3D_6_ce0,
        line_buffer_3D_6_we0,
        line_buffer_3D_6_d0,
        inp_img_address0,
        inp_img_ce0,
        inp_img_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] line_buffer_3D_address0;
output   line_buffer_3D_ce0;
output   line_buffer_3D_we0;
output  [31:0] line_buffer_3D_d0;
output  [9:0] line_buffer_3D_1_address0;
output   line_buffer_3D_1_ce0;
output   line_buffer_3D_1_we0;
output  [31:0] line_buffer_3D_1_d0;
output  [9:0] line_buffer_3D_2_address0;
output   line_buffer_3D_2_ce0;
output   line_buffer_3D_2_we0;
output  [31:0] line_buffer_3D_2_d0;
output  [9:0] line_buffer_3D_3_address0;
output   line_buffer_3D_3_ce0;
output   line_buffer_3D_3_we0;
output  [31:0] line_buffer_3D_3_d0;
output  [9:0] line_buffer_3D_4_address0;
output   line_buffer_3D_4_ce0;
output   line_buffer_3D_4_we0;
output  [31:0] line_buffer_3D_4_d0;
output  [9:0] line_buffer_3D_5_address0;
output   line_buffer_3D_5_ce0;
output   line_buffer_3D_5_we0;
output  [31:0] line_buffer_3D_5_d0;
output  [9:0] line_buffer_3D_6_address0;
output   line_buffer_3D_6_ce0;
output   line_buffer_3D_6_we0;
output  [31:0] line_buffer_3D_6_d0;
output  [17:0] inp_img_address0;
output   inp_img_ce0;
input  [31:0] inp_img_q0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln80_fu_241_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln82_fu_259_p2;
reg   [0:0] icmp_ln82_reg_501;
wire   [7:0] j_mid2_fu_303_p3;
reg   [7:0] j_mid2_reg_506;
reg   [7:0] j_mid2_reg_506_pp0_iter2_reg;
reg   [7:0] j_mid2_reg_506_pp0_iter3_reg;
wire   [3:0] select_ln82_fu_311_p3;
reg   [3:0] select_ln82_reg_512;
reg   [3:0] select_ln82_reg_512_pp0_iter2_reg;
reg   [3:0] select_ln82_reg_512_pp0_iter3_reg;
reg   [3:0] select_ln82_reg_512_pp0_iter4_reg;
wire   [1:0] select_ln80_1_fu_372_p3;
reg   [1:0] select_ln80_1_reg_521;
wire   [16:0] mul_ln82_fu_391_p2;
wire   [63:0] zext_ln87_fu_418_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln87_3_fu_423_p1;
reg   [7:0] j_fu_86;
wire   [7:0] add_ln84_fu_323_p2;
wire    ap_loop_init;
reg   [3:0] i_fu_90;
reg   [10:0] indvar_flatten_fu_94;
wire   [10:0] select_ln82_1_fu_335_p3;
reg   [1:0] c_fu_98;
reg   [12:0] indvar_flatten12_fu_102;
wire   [12:0] add_ln80_1_fu_247_p2;
reg    inp_img_ce0_local;
reg    line_buffer_3D_5_we0_local;
wire   [31:0] bitcast_ln87_fu_433_p1;
reg    line_buffer_3D_5_ce0_local;
reg    line_buffer_3D_4_we0_local;
reg    line_buffer_3D_4_ce0_local;
reg    line_buffer_3D_3_we0_local;
reg    line_buffer_3D_3_ce0_local;
reg    line_buffer_3D_2_we0_local;
reg    line_buffer_3D_2_ce0_local;
reg    line_buffer_3D_1_we0_local;
reg    line_buffer_3D_1_ce0_local;
reg    line_buffer_3D_we0_local;
reg    line_buffer_3D_ce0_local;
reg    line_buffer_3D_6_we0_local;
reg    line_buffer_3D_6_ce0_local;
wire   [0:0] icmp_ln84_fu_279_p2;
wire   [0:0] xor_ln80_fu_273_p2;
wire   [3:0] select_ln80_fu_265_p3;
wire   [0:0] and_ln80_fu_285_p2;
wire   [0:0] empty_fu_297_p2;
wire   [3:0] add_ln82_fu_291_p2;
wire   [10:0] add_ln82_1_fu_329_p2;
wire   [1:0] add_ln80_fu_366_p2;
wire   [1:0] mul_ln82_fu_391_p0;
wire   [10:0] zext_ln84_fu_400_p1;
wire   [10:0] add_ln87_2_fu_403_p2;
wire  signed [16:0] sext_ln87_fu_409_p1;
wire   [16:0] grp_fu_444_p3;
(* use_dsp48 = "no" *) wire   [16:0] add_ln87_fu_413_p2;
wire   [9:0] grp_fu_453_p3;
wire   [7:0] grp_fu_444_p0;
wire   [3:0] grp_fu_444_p1;
wire   [7:0] grp_fu_453_p0;
wire   [1:0] grp_fu_453_p1;
wire   [7:0] grp_fu_453_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [11:0] grp_fu_444_p10;
wire   [9:0] grp_fu_453_p10;
wire   [9:0] grp_fu_453_p20;
wire   [16:0] mul_ln82_fu_391_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 j_fu_86 = 8'd0;
#0 i_fu_90 = 4'd0;
#0 indvar_flatten_fu_94 = 11'd0;
#0 c_fu_98 = 2'd0;
#0 indvar_flatten12_fu_102 = 13'd0;
#0 ap_done_reg = 1'b0;
end

NN_mul_2ns_17ns_17_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 2 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mul_2ns_17ns_17_1_1_U1(
    .din0(mul_ln82_fu_391_p0),
    .din1(17'd51529),
    .dout(mul_ln82_fu_391_p2)
);

NN_mac_muladd_8ns_4ns_17ns_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mac_muladd_8ns_4ns_17ns_17_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_444_p0),
    .din1(grp_fu_444_p1),
    .din2(mul_ln82_fu_391_p2),
    .ce(1'b1),
    .dout(grp_fu_444_p3)
);

NN_mac_muladd_8ns_2ns_8ns_10_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 2 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 10 ))
mac_muladd_8ns_2ns_8ns_10_4_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_453_p0),
    .din1(grp_fu_453_p1),
    .din2(grp_fu_453_p2),
    .ce(1'b1),
    .dout(grp_fu_453_p3)
);

NN_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            c_fu_98 <= 2'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            c_fu_98 <= select_ln80_1_fu_372_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_90 <= 4'd4;
        end else if (((icmp_ln80_fu_241_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_90 <= select_ln82_fu_311_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten12_fu_102 <= 13'd0;
        end else if (((icmp_ln80_fu_241_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten12_fu_102 <= add_ln80_1_fu_247_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_94 <= 11'd0;
        end else if (((icmp_ln80_fu_241_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_94 <= select_ln82_1_fu_335_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_86 <= 8'd0;
        end else if (((icmp_ln80_fu_241_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_fu_86 <= add_ln84_fu_323_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln82_reg_501 <= icmp_ln82_fu_259_p2;
        j_mid2_reg_506 <= j_mid2_fu_303_p3;
        select_ln82_reg_512 <= select_ln82_fu_311_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        j_mid2_reg_506_pp0_iter2_reg <= j_mid2_reg_506;
        j_mid2_reg_506_pp0_iter3_reg <= j_mid2_reg_506_pp0_iter2_reg;
        select_ln80_1_reg_521 <= select_ln80_1_fu_372_p3;
        select_ln82_reg_512_pp0_iter2_reg <= select_ln82_reg_512;
        select_ln82_reg_512_pp0_iter3_reg <= select_ln82_reg_512_pp0_iter2_reg;
        select_ln82_reg_512_pp0_iter4_reg <= select_ln82_reg_512_pp0_iter3_reg;
    end
end

always @ (*) begin
    if (((icmp_ln80_fu_241_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        inp_img_ce0_local = 1'b1;
    end else begin
        inp_img_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        line_buffer_3D_1_ce0_local = 1'b1;
    end else begin
        line_buffer_3D_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (select_ln82_reg_512_pp0_iter4_reg == 4'd5))) begin
        line_buffer_3D_1_we0_local = 1'b1;
    end else begin
        line_buffer_3D_1_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        line_buffer_3D_2_ce0_local = 1'b1;
    end else begin
        line_buffer_3D_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (select_ln82_reg_512_pp0_iter4_reg == 4'd6))) begin
        line_buffer_3D_2_we0_local = 1'b1;
    end else begin
        line_buffer_3D_2_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        line_buffer_3D_3_ce0_local = 1'b1;
    end else begin
        line_buffer_3D_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (select_ln82_reg_512_pp0_iter4_reg == 4'd7))) begin
        line_buffer_3D_3_we0_local = 1'b1;
    end else begin
        line_buffer_3D_3_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        line_buffer_3D_4_ce0_local = 1'b1;
    end else begin
        line_buffer_3D_4_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (select_ln82_reg_512_pp0_iter4_reg == 4'd8))) begin
        line_buffer_3D_4_we0_local = 1'b1;
    end else begin
        line_buffer_3D_4_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        line_buffer_3D_5_ce0_local = 1'b1;
    end else begin
        line_buffer_3D_5_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (select_ln82_reg_512_pp0_iter4_reg == 4'd9))) begin
        line_buffer_3D_5_we0_local = 1'b1;
    end else begin
        line_buffer_3D_5_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        line_buffer_3D_6_ce0_local = 1'b1;
    end else begin
        line_buffer_3D_6_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~(select_ln82_reg_512_pp0_iter4_reg == 4'd4) & ~(select_ln82_reg_512_pp0_iter4_reg == 4'd5) & ~(select_ln82_reg_512_pp0_iter4_reg == 4'd6) & ~(select_ln82_reg_512_pp0_iter4_reg == 4'd7) & ~(select_ln82_reg_512_pp0_iter4_reg == 4'd8) & ~(select_ln82_reg_512_pp0_iter4_reg == 4'd9) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        line_buffer_3D_6_we0_local = 1'b1;
    end else begin
        line_buffer_3D_6_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        line_buffer_3D_ce0_local = 1'b1;
    end else begin
        line_buffer_3D_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (select_ln82_reg_512_pp0_iter4_reg == 4'd4))) begin
        line_buffer_3D_we0_local = 1'b1;
    end else begin
        line_buffer_3D_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln80_1_fu_247_p2 = (indvar_flatten12_fu_102 + 13'd1);

assign add_ln80_fu_366_p2 = (c_fu_98 + 2'd1);

assign add_ln82_1_fu_329_p2 = (indvar_flatten_fu_94 + 11'd1);

assign add_ln82_fu_291_p2 = (select_ln80_fu_265_p3 + 4'd1);

assign add_ln84_fu_323_p2 = (j_mid2_fu_303_p3 + 8'd1);

assign add_ln87_2_fu_403_p2 = ($signed(zext_ln84_fu_400_p1) + $signed(11'd1140));

assign add_ln87_fu_413_p2 = ($signed(sext_ln87_fu_409_p1) + $signed(grp_fu_444_p3));

assign and_ln80_fu_285_p2 = (xor_ln80_fu_273_p2 & icmp_ln84_fu_279_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_ready = ap_ready_sig;

assign bitcast_ln87_fu_433_p1 = inp_img_q0;

assign empty_fu_297_p2 = (icmp_ln82_fu_259_p2 | and_ln80_fu_285_p2);

assign grp_fu_444_p0 = 12'd227;

assign grp_fu_444_p1 = grp_fu_444_p10;

assign grp_fu_444_p10 = select_ln82_fu_311_p3;

assign grp_fu_453_p0 = 10'd227;

assign grp_fu_453_p1 = grp_fu_453_p10;

assign grp_fu_453_p10 = select_ln80_1_fu_372_p3;

assign grp_fu_453_p2 = grp_fu_453_p20;

assign grp_fu_453_p20 = j_mid2_reg_506_pp0_iter3_reg;

assign icmp_ln80_fu_241_p2 = ((indvar_flatten12_fu_102 == 13'd4767) ? 1'b1 : 1'b0);

assign icmp_ln82_fu_259_p2 = ((indvar_flatten_fu_94 == 11'd1589) ? 1'b1 : 1'b0);

assign icmp_ln84_fu_279_p2 = ((j_fu_86 == 8'd227) ? 1'b1 : 1'b0);

assign inp_img_address0 = zext_ln87_fu_418_p1;

assign inp_img_ce0 = inp_img_ce0_local;

assign j_mid2_fu_303_p3 = ((empty_fu_297_p2[0:0] == 1'b1) ? 8'd0 : j_fu_86);

assign line_buffer_3D_1_address0 = zext_ln87_3_fu_423_p1;

assign line_buffer_3D_1_ce0 = line_buffer_3D_1_ce0_local;

assign line_buffer_3D_1_d0 = bitcast_ln87_fu_433_p1;

assign line_buffer_3D_1_we0 = line_buffer_3D_1_we0_local;

assign line_buffer_3D_2_address0 = zext_ln87_3_fu_423_p1;

assign line_buffer_3D_2_ce0 = line_buffer_3D_2_ce0_local;

assign line_buffer_3D_2_d0 = bitcast_ln87_fu_433_p1;

assign line_buffer_3D_2_we0 = line_buffer_3D_2_we0_local;

assign line_buffer_3D_3_address0 = zext_ln87_3_fu_423_p1;

assign line_buffer_3D_3_ce0 = line_buffer_3D_3_ce0_local;

assign line_buffer_3D_3_d0 = bitcast_ln87_fu_433_p1;

assign line_buffer_3D_3_we0 = line_buffer_3D_3_we0_local;

assign line_buffer_3D_4_address0 = zext_ln87_3_fu_423_p1;

assign line_buffer_3D_4_ce0 = line_buffer_3D_4_ce0_local;

assign line_buffer_3D_4_d0 = bitcast_ln87_fu_433_p1;

assign line_buffer_3D_4_we0 = line_buffer_3D_4_we0_local;

assign line_buffer_3D_5_address0 = zext_ln87_3_fu_423_p1;

assign line_buffer_3D_5_ce0 = line_buffer_3D_5_ce0_local;

assign line_buffer_3D_5_d0 = bitcast_ln87_fu_433_p1;

assign line_buffer_3D_5_we0 = line_buffer_3D_5_we0_local;

assign line_buffer_3D_6_address0 = zext_ln87_3_fu_423_p1;

assign line_buffer_3D_6_ce0 = line_buffer_3D_6_ce0_local;

assign line_buffer_3D_6_d0 = bitcast_ln87_fu_433_p1;

assign line_buffer_3D_6_we0 = line_buffer_3D_6_we0_local;

assign line_buffer_3D_address0 = zext_ln87_3_fu_423_p1;

assign line_buffer_3D_ce0 = line_buffer_3D_ce0_local;

assign line_buffer_3D_d0 = bitcast_ln87_fu_433_p1;

assign line_buffer_3D_we0 = line_buffer_3D_we0_local;

assign mul_ln82_fu_391_p0 = mul_ln82_fu_391_p00;

assign mul_ln82_fu_391_p00 = select_ln80_1_reg_521;

assign select_ln80_1_fu_372_p3 = ((icmp_ln82_reg_501[0:0] == 1'b1) ? add_ln80_fu_366_p2 : c_fu_98);

assign select_ln80_fu_265_p3 = ((icmp_ln82_fu_259_p2[0:0] == 1'b1) ? 4'd4 : i_fu_90);

assign select_ln82_1_fu_335_p3 = ((icmp_ln82_fu_259_p2[0:0] == 1'b1) ? 11'd1 : add_ln82_1_fu_329_p2);

assign select_ln82_fu_311_p3 = ((and_ln80_fu_285_p2[0:0] == 1'b1) ? add_ln82_fu_291_p2 : select_ln80_fu_265_p3);

assign sext_ln87_fu_409_p1 = $signed(add_ln87_2_fu_403_p2);

assign xor_ln80_fu_273_p2 = (icmp_ln82_fu_259_p2 ^ 1'd1);

assign zext_ln84_fu_400_p1 = j_mid2_reg_506_pp0_iter3_reg;

assign zext_ln87_3_fu_423_p1 = grp_fu_453_p3;

assign zext_ln87_fu_418_p1 = add_ln87_fu_413_p2;

endmodule //NN_conv1_Pipeline_L2_L3_L4
