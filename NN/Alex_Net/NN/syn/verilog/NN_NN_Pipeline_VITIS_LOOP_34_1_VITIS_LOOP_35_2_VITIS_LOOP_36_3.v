// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module NN_NN_Pipeline_VITIS_LOOP_34_1_VITIS_LOOP_35_2_VITIS_LOOP_36_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Pad1_out_img_address0,
        Pad1_out_img_ce0,
        Pad1_out_img_we0,
        Pad1_out_img_d0,
        Norm1_out_img_address0,
        Norm1_out_img_ce0,
        Norm1_out_img_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [16:0] Pad1_out_img_address0;
output   Pad1_out_img_ce0;
output   Pad1_out_img_we0;
output  [31:0] Pad1_out_img_d0;
output  [16:0] Norm1_out_img_address0;
output   Norm1_out_img_ce0;
input  [31:0] Norm1_out_img_q0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln34_fu_142_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln35_fu_163_p2;
reg   [0:0] icmp_ln35_reg_477;
wire   [4:0] j_mid2_fu_207_p3;
reg   [4:0] j_mid2_reg_482;
reg   [4:0] j_mid2_reg_482_pp0_iter2_reg;
reg   [4:0] j_mid2_reg_482_pp0_iter3_reg;
wire   [9:0] zext_ln35_fu_223_p1;
wire   [9:0] empty_1361_fu_251_p2;
reg   [9:0] empty_1361_reg_493;
reg   [9:0] empty_1361_reg_493_pp0_iter2_reg;
reg   [9:0] empty_1361_reg_493_pp0_iter3_reg;
reg   [9:0] empty_1361_reg_493_pp0_iter4_reg;
wire   [0:0] or_ln39_1_fu_297_p2;
reg   [0:0] or_ln39_1_reg_498;
reg   [0:0] or_ln39_1_reg_498_pp0_iter2_reg;
reg   [0:0] or_ln39_1_reg_498_pp0_iter3_reg;
reg   [0:0] or_ln39_1_reg_498_pp0_iter4_reg;
wire   [16:0] zext_ln34_fu_359_p1;
reg   [16:0] zext_ln34_reg_503;
wire   [16:0] empty_1360_fu_368_p2;
wire   [63:0] zext_ln45_fu_394_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln41_fu_407_p1;
reg   [4:0] j_fu_68;
wire   [4:0] add_ln36_fu_303_p2;
wire    ap_loop_init;
reg   [4:0] i_fu_72;
wire   [4:0] select_ln35_fu_215_p3;
reg   [9:0] indvar_flatten_fu_76;
wire   [9:0] select_ln35_1_fu_315_p3;
reg   [6:0] c_fu_80;
wire   [6:0] select_ln34_1_fu_352_p3;
reg   [16:0] indvar_flatten12_fu_84;
wire   [16:0] add_ln34_2_fu_148_p2;
reg    Norm1_out_img_ce0_local;
reg    Pad1_out_img_we0_local;
wire   [31:0] storemerge_fu_412_p3;
reg    Pad1_out_img_ce0_local;
wire   [0:0] icmp_ln36_fu_183_p2;
wire   [0:0] xor_ln34_fu_177_p2;
wire   [4:0] select_ln34_fu_169_p3;
wire   [0:0] and_ln34_fu_189_p2;
wire   [0:0] empty_fu_201_p2;
wire   [4:0] add_ln35_fu_195_p2;
wire   [3:0] tmp_fu_227_p4;
wire   [9:0] p_shl_fu_243_p3;
wire   [3:0] tmp_177_fu_263_p4;
wire   [0:0] icmp_fu_237_p2;
wire   [0:0] cmp10_i_fu_257_p2;
wire   [0:0] icmp_ln39_fu_273_p2;
wire   [0:0] icmp_ln39_1_fu_279_p2;
wire   [0:0] or_ln39_2_fu_291_p2;
wire   [0:0] or_ln39_fu_285_p2;
wire   [9:0] add_ln35_2_fu_309_p2;
wire   [6:0] add_ln34_fu_346_p2;
wire   [6:0] empty_1360_fu_368_p0;
wire   [10:0] empty_1360_fu_368_p1;
wire   [6:0] zext_ln36_1_fu_373_p1;
wire   [6:0] add_ln45_4_fu_379_p2;
wire  signed [16:0] sext_ln45_fu_385_p1;
wire   [16:0] grp_fu_420_p3;
(* use_dsp48 = "no" *) wire   [16:0] add_ln45_fu_389_p2;
wire   [16:0] grp_fu_429_p3;
wire   [16:0] p_cast_fu_399_p1;
(* use_dsp48 = "no" *) wire   [16:0] add_ln41_fu_402_p2;
wire   [4:0] grp_fu_420_p0;
wire   [4:0] grp_fu_420_p1;
wire   [9:0] grp_fu_429_p0;
wire   [6:0] grp_fu_429_p1;
wire   [4:0] grp_fu_429_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [16:0] grp_fu_429_p10;
wire   [16:0] grp_fu_429_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 j_fu_68 = 5'd0;
#0 i_fu_72 = 5'd0;
#0 indvar_flatten_fu_76 = 10'd0;
#0 c_fu_80 = 7'd0;
#0 indvar_flatten12_fu_84 = 17'd0;
#0 ap_done_reg = 1'b0;
end

NN_mul_7ns_11ns_17_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 17 ))
mul_7ns_11ns_17_1_1_U3308(
    .din0(empty_1360_fu_368_p0),
    .din1(empty_1360_fu_368_p1),
    .dout(empty_1360_fu_368_p2)
);

NN_mac_muladd_5ns_5ns_17ns_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mac_muladd_5ns_5ns_17ns_17_4_1_U3309(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_420_p0),
    .din1(grp_fu_420_p1),
    .din2(empty_1360_fu_368_p2),
    .ce(1'b1),
    .dout(grp_fu_420_p3)
);

NN_mac_muladd_10ns_7ns_5ns_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 17 ))
mac_muladd_10ns_7ns_5ns_17_4_1_U3310(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_429_p0),
    .din1(grp_fu_429_p1),
    .din2(grp_fu_429_p2),
    .ce(1'b1),
    .dout(grp_fu_429_p3)
);

NN_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            c_fu_80 <= 7'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            c_fu_80 <= select_ln34_1_fu_352_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_72 <= 5'd0;
        end else if (((icmp_ln34_fu_142_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_72 <= select_ln35_fu_215_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten12_fu_84 <= 17'd0;
        end else if (((icmp_ln34_fu_142_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten12_fu_84 <= add_ln34_2_fu_148_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_76 <= 10'd0;
        end else if (((icmp_ln34_fu_142_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_76 <= select_ln35_1_fu_315_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_68 <= 5'd0;
        end else if (((icmp_ln34_fu_142_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_fu_68 <= add_ln36_fu_303_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        empty_1361_reg_493 <= empty_1361_fu_251_p2;
        icmp_ln35_reg_477 <= icmp_ln35_fu_163_p2;
        j_mid2_reg_482 <= j_mid2_fu_207_p3;
        or_ln39_1_reg_498 <= or_ln39_1_fu_297_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        empty_1361_reg_493_pp0_iter2_reg <= empty_1361_reg_493;
        empty_1361_reg_493_pp0_iter3_reg <= empty_1361_reg_493_pp0_iter2_reg;
        empty_1361_reg_493_pp0_iter4_reg <= empty_1361_reg_493_pp0_iter3_reg;
        j_mid2_reg_482_pp0_iter2_reg <= j_mid2_reg_482;
        j_mid2_reg_482_pp0_iter3_reg <= j_mid2_reg_482_pp0_iter2_reg;
        or_ln39_1_reg_498_pp0_iter2_reg <= or_ln39_1_reg_498;
        or_ln39_1_reg_498_pp0_iter3_reg <= or_ln39_1_reg_498_pp0_iter2_reg;
        or_ln39_1_reg_498_pp0_iter4_reg <= or_ln39_1_reg_498_pp0_iter3_reg;
        zext_ln34_reg_503[6 : 0] <= zext_ln34_fu_359_p1[6 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        Norm1_out_img_ce0_local = 1'b1;
    end else begin
        Norm1_out_img_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        Pad1_out_img_ce0_local = 1'b1;
    end else begin
        Pad1_out_img_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        Pad1_out_img_we0_local = 1'b1;
    end else begin
        Pad1_out_img_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_fu_142_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Norm1_out_img_address0 = zext_ln45_fu_394_p1;

assign Norm1_out_img_ce0 = Norm1_out_img_ce0_local;

assign Pad1_out_img_address0 = zext_ln41_fu_407_p1;

assign Pad1_out_img_ce0 = Pad1_out_img_ce0_local;

assign Pad1_out_img_d0 = storemerge_fu_412_p3;

assign Pad1_out_img_we0 = Pad1_out_img_we0_local;

assign add_ln34_2_fu_148_p2 = (indvar_flatten12_fu_84 + 17'd1);

assign add_ln34_fu_346_p2 = (c_fu_80 + 7'd1);

assign add_ln35_2_fu_309_p2 = (indvar_flatten_fu_76 + 10'd1);

assign add_ln35_fu_195_p2 = (select_ln34_fu_169_p3 + 5'd1);

assign add_ln36_fu_303_p2 = (j_mid2_fu_207_p3 + 5'd1);

assign add_ln41_fu_402_p2 = (grp_fu_429_p3 + p_cast_fu_399_p1);

assign add_ln45_4_fu_379_p2 = ($signed(zext_ln36_1_fu_373_p1) + $signed(7'd72));

assign add_ln45_fu_389_p2 = ($signed(sext_ln45_fu_385_p1) + $signed(grp_fu_420_p3));

assign and_ln34_fu_189_p2 = (xor_ln34_fu_177_p2 & icmp_ln36_fu_183_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_ready = ap_ready_sig;

assign cmp10_i_fu_257_p2 = ((select_ln35_fu_215_p3 > 5'd28) ? 1'b1 : 1'b0);

assign empty_1360_fu_368_p0 = zext_ln34_reg_503;

assign empty_1360_fu_368_p1 = 17'd729;

assign empty_1361_fu_251_p2 = (p_shl_fu_243_p3 - zext_ln35_fu_223_p1);

assign empty_fu_201_p2 = (icmp_ln35_fu_163_p2 | and_ln34_fu_189_p2);

assign grp_fu_420_p0 = zext_ln35_fu_223_p1;

assign grp_fu_420_p1 = 10'd27;

assign grp_fu_429_p0 = 17'd961;

assign grp_fu_429_p1 = grp_fu_429_p10;

assign grp_fu_429_p10 = select_ln34_1_fu_352_p3;

assign grp_fu_429_p2 = grp_fu_429_p20;

assign grp_fu_429_p20 = j_mid2_reg_482_pp0_iter3_reg;

assign icmp_fu_237_p2 = ((tmp_fu_227_p4 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_142_p2 = ((indvar_flatten12_fu_84 == 17'd92256) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_163_p2 = ((indvar_flatten_fu_76 == 10'd961) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_183_p2 = ((j_fu_68 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln39_1_fu_279_p2 = ((j_mid2_fu_207_p3 > 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_273_p2 = ((tmp_177_fu_263_p4 == 4'd0) ? 1'b1 : 1'b0);

assign j_mid2_fu_207_p3 = ((empty_fu_201_p2[0:0] == 1'b1) ? 5'd0 : j_fu_68);

assign or_ln39_1_fu_297_p2 = (or_ln39_fu_285_p2 | or_ln39_2_fu_291_p2);

assign or_ln39_2_fu_291_p2 = (icmp_ln39_fu_273_p2 | icmp_ln39_1_fu_279_p2);

assign or_ln39_fu_285_p2 = (icmp_fu_237_p2 | cmp10_i_fu_257_p2);

assign p_cast_fu_399_p1 = empty_1361_reg_493_pp0_iter4_reg;

assign p_shl_fu_243_p3 = {{select_ln35_fu_215_p3}, {5'd0}};

assign select_ln34_1_fu_352_p3 = ((icmp_ln35_reg_477[0:0] == 1'b1) ? add_ln34_fu_346_p2 : c_fu_80);

assign select_ln34_fu_169_p3 = ((icmp_ln35_fu_163_p2[0:0] == 1'b1) ? 5'd0 : i_fu_72);

assign select_ln35_1_fu_315_p3 = ((icmp_ln35_fu_163_p2[0:0] == 1'b1) ? 10'd1 : add_ln35_2_fu_309_p2);

assign select_ln35_fu_215_p3 = ((and_ln34_fu_189_p2[0:0] == 1'b1) ? add_ln35_fu_195_p2 : select_ln34_fu_169_p3);

assign sext_ln45_fu_385_p1 = $signed(add_ln45_4_fu_379_p2);

assign storemerge_fu_412_p3 = ((or_ln39_1_reg_498_pp0_iter4_reg[0:0] == 1'b1) ? 32'd0 : Norm1_out_img_q0);

assign tmp_177_fu_263_p4 = {{j_mid2_fu_207_p3[4:1]}};

assign tmp_fu_227_p4 = {{select_ln35_fu_215_p3[4:1]}};

assign xor_ln34_fu_177_p2 = (icmp_ln35_fu_163_p2 ^ 1'd1);

assign zext_ln34_fu_359_p1 = select_ln34_1_fu_352_p3;

assign zext_ln35_fu_223_p1 = select_ln35_fu_215_p3;

assign zext_ln36_1_fu_373_p1 = j_mid2_reg_482_pp0_iter3_reg;

assign zext_ln41_fu_407_p1 = add_ln41_fu_402_p2;

assign zext_ln45_fu_394_p1 = add_ln45_fu_389_p2;

always @ (posedge ap_clk) begin
    zext_ln34_reg_503[16:7] <= 10'b0000000000;
end

endmodule //NN_NN_Pipeline_VITIS_LOOP_34_1_VITIS_LOOP_35_2_VITIS_LOOP_36_3
