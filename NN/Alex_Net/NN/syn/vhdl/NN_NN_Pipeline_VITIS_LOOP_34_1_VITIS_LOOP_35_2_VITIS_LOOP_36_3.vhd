-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity NN_NN_Pipeline_VITIS_LOOP_34_1_VITIS_LOOP_35_2_VITIS_LOOP_36_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Pad1_out_img_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    Pad1_out_img_ce0 : OUT STD_LOGIC;
    Pad1_out_img_we0 : OUT STD_LOGIC;
    Pad1_out_img_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Norm1_out_img_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    Norm1_out_img_ce0 : OUT STD_LOGIC;
    Norm1_out_img_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of NN_NN_Pipeline_VITIS_LOOP_34_1_VITIS_LOOP_35_2_VITIS_LOOP_36_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv17_16860 : STD_LOGIC_VECTOR (16 downto 0) := "10110100001100000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv10_3C1 : STD_LOGIC_VECTOR (9 downto 0) := "1111000001";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv17_2D9 : STD_LOGIC_VECTOR (16 downto 0) := "00000001011011001";
    constant ap_const_lv7_48 : STD_LOGIC_VECTOR (6 downto 0) := "1001000";
    constant ap_const_lv10_1B : STD_LOGIC_VECTOR (9 downto 0) := "0000011011";
    constant ap_const_lv17_3C1 : STD_LOGIC_VECTOR (16 downto 0) := "00000001111000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln34_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln35_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_reg_477 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_mid2_fu_207_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_mid2_reg_482 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_mid2_reg_482_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal j_mid2_reg_482_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln35_fu_223_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_1361_fu_251_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_1361_reg_493 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_1361_reg_493_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_1361_reg_493_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_1361_reg_493_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln39_1_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_1_reg_498 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_1_reg_498_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_1_reg_498_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_1_reg_498_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln34_fu_359_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln34_reg_503 : STD_LOGIC_VECTOR (16 downto 0);
    signal empty_1360_fu_368_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln45_fu_394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln41_fu_407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_68 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln36_fu_303_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_72 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal select_ln35_fu_215_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_fu_76 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal select_ln35_1_fu_315_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_fu_80 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal select_ln34_1_fu_352_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten12_fu_84 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal add_ln34_2_fu_148_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal Norm1_out_img_ce0_local : STD_LOGIC;
    signal Pad1_out_img_we0_local : STD_LOGIC;
    signal storemerge_fu_412_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Pad1_out_img_ce0_local : STD_LOGIC;
    signal icmp_ln36_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln34_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_fu_169_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln34_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln35_fu_195_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_227_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_fu_243_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_177_fu_263_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp10_i_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_1_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_2_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln35_2_fu_309_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln34_fu_346_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_1360_fu_368_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_1360_fu_368_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln36_1_fu_373_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln45_4_fu_379_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln45_fu_385_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_420_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln45_fu_389_p2 : STD_LOGIC_VECTOR (16 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln45_fu_389_p2 : signal is "no";
    signal grp_fu_429_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_cast_fu_399_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln41_fu_402_p2 : STD_LOGIC_VECTOR (16 downto 0);
    attribute use_dsp48 of add_ln41_fu_402_p2 : signal is "no";
    signal grp_fu_420_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_420_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_429_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_429_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_429_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal grp_fu_429_p10 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_429_p20 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component NN_mul_7ns_11ns_17_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component NN_mac_muladd_5ns_5ns_17ns_17_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component NN_mac_muladd_10ns_7ns_5ns_17_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component NN_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_7ns_11ns_17_1_1_U3308 : component NN_mul_7ns_11ns_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 11,
        dout_WIDTH => 17)
    port map (
        din0 => empty_1360_fu_368_p0,
        din1 => empty_1360_fu_368_p1,
        dout => empty_1360_fu_368_p2);

    mac_muladd_5ns_5ns_17ns_17_4_1_U3309 : component NN_mac_muladd_5ns_5ns_17ns_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        din2_WIDTH => 17,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_420_p0,
        din1 => grp_fu_420_p1,
        din2 => empty_1360_fu_368_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_420_p3);

    mac_muladd_10ns_7ns_5ns_17_4_1_U3310 : component NN_mac_muladd_10ns_7ns_5ns_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 7,
        din2_WIDTH => 5,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_429_p0,
        din1 => grp_fu_429_p1,
        din2 => grp_fu_429_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_429_p3);

    flow_control_loop_pipe_sequential_init_U : component NN_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    c_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    c_fu_80 <= ap_const_lv7_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    c_fu_80 <= select_ln34_1_fu_352_p3;
                end if;
            end if; 
        end if;
    end process;

    i_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_72 <= ap_const_lv5_0;
                elsif (((icmp_ln34_fu_142_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_72 <= select_ln35_fu_215_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten12_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten12_fu_84 <= ap_const_lv17_0;
                elsif (((icmp_ln34_fu_142_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten12_fu_84 <= add_ln34_2_fu_148_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_76 <= ap_const_lv10_0;
                elsif (((icmp_ln34_fu_142_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten_fu_76 <= select_ln35_1_fu_315_p3;
                end if;
            end if; 
        end if;
    end process;

    j_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_68 <= ap_const_lv5_0;
                elsif (((icmp_ln34_fu_142_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    j_fu_68 <= add_ln36_fu_303_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                empty_1361_reg_493 <= empty_1361_fu_251_p2;
                icmp_ln35_reg_477 <= icmp_ln35_fu_163_p2;
                j_mid2_reg_482 <= j_mid2_fu_207_p3;
                or_ln39_1_reg_498 <= or_ln39_1_fu_297_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                empty_1361_reg_493_pp0_iter2_reg <= empty_1361_reg_493;
                empty_1361_reg_493_pp0_iter3_reg <= empty_1361_reg_493_pp0_iter2_reg;
                empty_1361_reg_493_pp0_iter4_reg <= empty_1361_reg_493_pp0_iter3_reg;
                j_mid2_reg_482_pp0_iter2_reg <= j_mid2_reg_482;
                j_mid2_reg_482_pp0_iter3_reg <= j_mid2_reg_482_pp0_iter2_reg;
                or_ln39_1_reg_498_pp0_iter2_reg <= or_ln39_1_reg_498;
                or_ln39_1_reg_498_pp0_iter3_reg <= or_ln39_1_reg_498_pp0_iter2_reg;
                or_ln39_1_reg_498_pp0_iter4_reg <= or_ln39_1_reg_498_pp0_iter3_reg;
                    zext_ln34_reg_503(6 downto 0) <= zext_ln34_fu_359_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln34_reg_503(16 downto 7) <= "0000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Norm1_out_img_address0 <= zext_ln45_fu_394_p1(17 - 1 downto 0);
    Norm1_out_img_ce0 <= Norm1_out_img_ce0_local;

    Norm1_out_img_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            Norm1_out_img_ce0_local <= ap_const_logic_1;
        else 
            Norm1_out_img_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    Pad1_out_img_address0 <= zext_ln41_fu_407_p1(17 - 1 downto 0);
    Pad1_out_img_ce0 <= Pad1_out_img_ce0_local;

    Pad1_out_img_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            Pad1_out_img_ce0_local <= ap_const_logic_1;
        else 
            Pad1_out_img_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    Pad1_out_img_d0 <= storemerge_fu_412_p3;
    Pad1_out_img_we0 <= Pad1_out_img_we0_local;

    Pad1_out_img_we0_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            Pad1_out_img_we0_local <= ap_const_logic_1;
        else 
            Pad1_out_img_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln34_2_fu_148_p2 <= std_logic_vector(unsigned(indvar_flatten12_fu_84) + unsigned(ap_const_lv17_1));
    add_ln34_fu_346_p2 <= std_logic_vector(unsigned(c_fu_80) + unsigned(ap_const_lv7_1));
    add_ln35_2_fu_309_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_76) + unsigned(ap_const_lv10_1));
    add_ln35_fu_195_p2 <= std_logic_vector(unsigned(select_ln34_fu_169_p3) + unsigned(ap_const_lv5_1));
    add_ln36_fu_303_p2 <= std_logic_vector(unsigned(j_mid2_fu_207_p3) + unsigned(ap_const_lv5_1));
    add_ln41_fu_402_p2 <= std_logic_vector(unsigned(grp_fu_429_p3) + unsigned(p_cast_fu_399_p1));
    add_ln45_4_fu_379_p2 <= std_logic_vector(unsigned(zext_ln36_1_fu_373_p1) + unsigned(ap_const_lv7_48));
    add_ln45_fu_389_p2 <= std_logic_vector(signed(sext_ln45_fu_385_p1) + signed(grp_fu_420_p3));
    and_ln34_fu_189_p2 <= (xor_ln34_fu_177_p2 and icmp_ln36_fu_183_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln34_fu_142_p2)
    begin
        if (((icmp_ln34_fu_142_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    cmp10_i_fu_257_p2 <= "1" when (unsigned(select_ln35_fu_215_p3) > unsigned(ap_const_lv5_1C)) else "0";
    empty_1360_fu_368_p0 <= zext_ln34_reg_503(7 - 1 downto 0);
    empty_1360_fu_368_p1 <= ap_const_lv17_2D9(11 - 1 downto 0);
    empty_1361_fu_251_p2 <= std_logic_vector(unsigned(p_shl_fu_243_p3) - unsigned(zext_ln35_fu_223_p1));
    empty_fu_201_p2 <= (icmp_ln35_fu_163_p2 or and_ln34_fu_189_p2);
    grp_fu_420_p0 <= zext_ln35_fu_223_p1(5 - 1 downto 0);
    grp_fu_420_p1 <= ap_const_lv10_1B(5 - 1 downto 0);
    grp_fu_429_p0 <= ap_const_lv17_3C1(10 - 1 downto 0);
    grp_fu_429_p1 <= grp_fu_429_p10(7 - 1 downto 0);
    grp_fu_429_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_1_fu_352_p3),17));
    grp_fu_429_p2 <= grp_fu_429_p20(5 - 1 downto 0);
    grp_fu_429_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_reg_482_pp0_iter3_reg),17));
    icmp_fu_237_p2 <= "1" when (tmp_fu_227_p4 = ap_const_lv4_0) else "0";
    icmp_ln34_fu_142_p2 <= "1" when (indvar_flatten12_fu_84 = ap_const_lv17_16860) else "0";
    icmp_ln35_fu_163_p2 <= "1" when (indvar_flatten_fu_76 = ap_const_lv10_3C1) else "0";
    icmp_ln36_fu_183_p2 <= "1" when (j_fu_68 = ap_const_lv5_1F) else "0";
    icmp_ln39_1_fu_279_p2 <= "1" when (unsigned(j_mid2_fu_207_p3) > unsigned(ap_const_lv5_1C)) else "0";
    icmp_ln39_fu_273_p2 <= "1" when (tmp_177_fu_263_p4 = ap_const_lv4_0) else "0";
    j_mid2_fu_207_p3 <= 
        ap_const_lv5_0 when (empty_fu_201_p2(0) = '1') else 
        j_fu_68;
    or_ln39_1_fu_297_p2 <= (or_ln39_fu_285_p2 or or_ln39_2_fu_291_p2);
    or_ln39_2_fu_291_p2 <= (icmp_ln39_fu_273_p2 or icmp_ln39_1_fu_279_p2);
    or_ln39_fu_285_p2 <= (icmp_fu_237_p2 or cmp10_i_fu_257_p2);
    p_cast_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_1361_reg_493_pp0_iter4_reg),17));
    p_shl_fu_243_p3 <= (select_ln35_fu_215_p3 & ap_const_lv5_0);
    select_ln34_1_fu_352_p3 <= 
        add_ln34_fu_346_p2 when (icmp_ln35_reg_477(0) = '1') else 
        c_fu_80;
    select_ln34_fu_169_p3 <= 
        ap_const_lv5_0 when (icmp_ln35_fu_163_p2(0) = '1') else 
        i_fu_72;
    select_ln35_1_fu_315_p3 <= 
        ap_const_lv10_1 when (icmp_ln35_fu_163_p2(0) = '1') else 
        add_ln35_2_fu_309_p2;
    select_ln35_fu_215_p3 <= 
        add_ln35_fu_195_p2 when (and_ln34_fu_189_p2(0) = '1') else 
        select_ln34_fu_169_p3;
        sext_ln45_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln45_4_fu_379_p2),17));

    storemerge_fu_412_p3 <= 
        ap_const_lv32_0 when (or_ln39_1_reg_498_pp0_iter4_reg(0) = '1') else 
        Norm1_out_img_q0;
    tmp_177_fu_263_p4 <= j_mid2_fu_207_p3(4 downto 1);
    tmp_fu_227_p4 <= select_ln35_fu_215_p3(4 downto 1);
    xor_ln34_fu_177_p2 <= (icmp_ln35_fu_163_p2 xor ap_const_lv1_1);
    zext_ln34_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_1_fu_352_p3),17));
    zext_ln35_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_fu_215_p3),10));
    zext_ln36_1_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_reg_482_pp0_iter3_reg),7));
    zext_ln41_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_fu_402_p2),64));
    zext_ln45_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln45_fu_389_p2),64));
end behav;
