-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity NN_conv1_Pipeline_L2_L3_L4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    line_buffer_3D_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    line_buffer_3D_ce0 : OUT STD_LOGIC;
    line_buffer_3D_we0 : OUT STD_LOGIC;
    line_buffer_3D_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    line_buffer_3D_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    line_buffer_3D_1_ce0 : OUT STD_LOGIC;
    line_buffer_3D_1_we0 : OUT STD_LOGIC;
    line_buffer_3D_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    line_buffer_3D_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    line_buffer_3D_2_ce0 : OUT STD_LOGIC;
    line_buffer_3D_2_we0 : OUT STD_LOGIC;
    line_buffer_3D_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    line_buffer_3D_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    line_buffer_3D_3_ce0 : OUT STD_LOGIC;
    line_buffer_3D_3_we0 : OUT STD_LOGIC;
    line_buffer_3D_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    line_buffer_3D_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    line_buffer_3D_4_ce0 : OUT STD_LOGIC;
    line_buffer_3D_4_we0 : OUT STD_LOGIC;
    line_buffer_3D_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    line_buffer_3D_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    line_buffer_3D_5_ce0 : OUT STD_LOGIC;
    line_buffer_3D_5_we0 : OUT STD_LOGIC;
    line_buffer_3D_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    line_buffer_3D_6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    line_buffer_3D_6_ce0 : OUT STD_LOGIC;
    line_buffer_3D_6_we0 : OUT STD_LOGIC;
    line_buffer_3D_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    inp_img_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    inp_img_ce0 : OUT STD_LOGIC;
    inp_img_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of NN_conv1_Pipeline_L2_L3_L4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv13_129F : STD_LOGIC_VECTOR (12 downto 0) := "1001010011111";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv11_635 : STD_LOGIC_VECTOR (10 downto 0) := "11000110101";
    constant ap_const_lv8_E3 : STD_LOGIC_VECTOR (7 downto 0) := "11100011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv17_C949 : STD_LOGIC_VECTOR (16 downto 0) := "01100100101001001";
    constant ap_const_lv11_474 : STD_LOGIC_VECTOR (10 downto 0) := "10001110100";
    constant ap_const_lv12_E3 : STD_LOGIC_VECTOR (11 downto 0) := "000011100011";
    constant ap_const_lv10_E3 : STD_LOGIC_VECTOR (9 downto 0) := "0011100011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln80_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln82_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_reg_501 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_mid2_fu_303_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_mid2_reg_506 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_mid2_reg_506_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal j_mid2_reg_506_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln82_fu_311_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln82_reg_512 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln82_reg_512_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln82_reg_512_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln82_reg_512_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln80_1_fu_372_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln80_1_reg_521 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln82_fu_391_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln87_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln87_3_fu_423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_86 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal add_ln84_fu_323_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_90 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal indvar_flatten_fu_94 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal select_ln82_1_fu_335_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal c_fu_98 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal indvar_flatten12_fu_102 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal add_ln80_1_fu_247_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal inp_img_ce0_local : STD_LOGIC;
    signal line_buffer_3D_5_we0_local : STD_LOGIC;
    signal bitcast_ln87_fu_433_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_3D_5_ce0_local : STD_LOGIC;
    signal line_buffer_3D_4_we0_local : STD_LOGIC;
    signal line_buffer_3D_4_ce0_local : STD_LOGIC;
    signal line_buffer_3D_3_we0_local : STD_LOGIC;
    signal line_buffer_3D_3_ce0_local : STD_LOGIC;
    signal line_buffer_3D_2_we0_local : STD_LOGIC;
    signal line_buffer_3D_2_ce0_local : STD_LOGIC;
    signal line_buffer_3D_1_we0_local : STD_LOGIC;
    signal line_buffer_3D_1_ce0_local : STD_LOGIC;
    signal line_buffer_3D_we0_local : STD_LOGIC;
    signal line_buffer_3D_ce0_local : STD_LOGIC;
    signal line_buffer_3D_6_we0_local : STD_LOGIC;
    signal line_buffer_3D_6_ce0_local : STD_LOGIC;
    signal icmp_ln84_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln80_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln80_fu_265_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln80_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln82_fu_291_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln82_1_fu_329_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln80_fu_366_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln82_fu_391_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln84_fu_400_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln87_2_fu_403_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln87_fu_409_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_444_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln87_fu_413_p2 : STD_LOGIC_VECTOR (16 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln87_fu_413_p2 : signal is "no";
    signal grp_fu_453_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_444_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_444_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_453_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_453_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_453_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal grp_fu_444_p10 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_453_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_453_p20 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln82_fu_391_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component NN_mul_2ns_17ns_17_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component NN_mac_muladd_8ns_4ns_17ns_17_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component NN_mac_muladd_8ns_2ns_8ns_10_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component NN_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_2ns_17ns_17_1_1_U1 : component NN_mul_2ns_17ns_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 17,
        dout_WIDTH => 17)
    port map (
        din0 => mul_ln82_fu_391_p0,
        din1 => ap_const_lv17_C949,
        dout => mul_ln82_fu_391_p2);

    mac_muladd_8ns_4ns_17ns_17_4_1_U2 : component NN_mac_muladd_8ns_4ns_17ns_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 4,
        din2_WIDTH => 17,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_444_p0,
        din1 => grp_fu_444_p1,
        din2 => mul_ln82_fu_391_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_444_p3);

    mac_muladd_8ns_2ns_8ns_10_4_1_U3 : component NN_mac_muladd_8ns_2ns_8ns_10_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 8,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_453_p0,
        din1 => grp_fu_453_p1,
        din2 => grp_fu_453_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_453_p3);

    flow_control_loop_pipe_sequential_init_U : component NN_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    c_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    c_fu_98 <= ap_const_lv2_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    c_fu_98 <= select_ln80_1_fu_372_p3;
                end if;
            end if; 
        end if;
    end process;

    i_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_90 <= ap_const_lv4_4;
                elsif (((icmp_ln80_fu_241_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_90 <= select_ln82_fu_311_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten12_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten12_fu_102 <= ap_const_lv13_0;
                elsif (((icmp_ln80_fu_241_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten12_fu_102 <= add_ln80_1_fu_247_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_94 <= ap_const_lv11_0;
                elsif (((icmp_ln80_fu_241_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten_fu_94 <= select_ln82_1_fu_335_p3;
                end if;
            end if; 
        end if;
    end process;

    j_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_86 <= ap_const_lv8_0;
                elsif (((icmp_ln80_fu_241_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    j_fu_86 <= add_ln84_fu_323_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln82_reg_501 <= icmp_ln82_fu_259_p2;
                j_mid2_reg_506 <= j_mid2_fu_303_p3;
                select_ln82_reg_512 <= select_ln82_fu_311_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                j_mid2_reg_506_pp0_iter2_reg <= j_mid2_reg_506;
                j_mid2_reg_506_pp0_iter3_reg <= j_mid2_reg_506_pp0_iter2_reg;
                select_ln80_1_reg_521 <= select_ln80_1_fu_372_p3;
                select_ln82_reg_512_pp0_iter2_reg <= select_ln82_reg_512;
                select_ln82_reg_512_pp0_iter3_reg <= select_ln82_reg_512_pp0_iter2_reg;
                select_ln82_reg_512_pp0_iter4_reg <= select_ln82_reg_512_pp0_iter3_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln80_1_fu_247_p2 <= std_logic_vector(unsigned(indvar_flatten12_fu_102) + unsigned(ap_const_lv13_1));
    add_ln80_fu_366_p2 <= std_logic_vector(unsigned(c_fu_98) + unsigned(ap_const_lv2_1));
    add_ln82_1_fu_329_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_94) + unsigned(ap_const_lv11_1));
    add_ln82_fu_291_p2 <= std_logic_vector(unsigned(select_ln80_fu_265_p3) + unsigned(ap_const_lv4_1));
    add_ln84_fu_323_p2 <= std_logic_vector(unsigned(j_mid2_fu_303_p3) + unsigned(ap_const_lv8_1));
    add_ln87_2_fu_403_p2 <= std_logic_vector(unsigned(zext_ln84_fu_400_p1) + unsigned(ap_const_lv11_474));
    add_ln87_fu_413_p2 <= std_logic_vector(signed(sext_ln87_fu_409_p1) + signed(grp_fu_444_p3));
    and_ln80_fu_285_p2 <= (xor_ln80_fu_273_p2 and icmp_ln84_fu_279_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln80_fu_241_p2)
    begin
        if (((icmp_ln80_fu_241_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln87_fu_433_p1 <= inp_img_q0;
    empty_fu_297_p2 <= (icmp_ln82_fu_259_p2 or and_ln80_fu_285_p2);
    grp_fu_444_p0 <= ap_const_lv12_E3(8 - 1 downto 0);
    grp_fu_444_p1 <= grp_fu_444_p10(4 - 1 downto 0);
    grp_fu_444_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln82_fu_311_p3),12));
    grp_fu_453_p0 <= ap_const_lv10_E3(8 - 1 downto 0);
    grp_fu_453_p1 <= grp_fu_453_p10(2 - 1 downto 0);
    grp_fu_453_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln80_1_fu_372_p3),10));
    grp_fu_453_p2 <= grp_fu_453_p20(8 - 1 downto 0);
    grp_fu_453_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_reg_506_pp0_iter3_reg),10));
    icmp_ln80_fu_241_p2 <= "1" when (indvar_flatten12_fu_102 = ap_const_lv13_129F) else "0";
    icmp_ln82_fu_259_p2 <= "1" when (indvar_flatten_fu_94 = ap_const_lv11_635) else "0";
    icmp_ln84_fu_279_p2 <= "1" when (j_fu_86 = ap_const_lv8_E3) else "0";
    inp_img_address0 <= zext_ln87_fu_418_p1(18 - 1 downto 0);
    inp_img_ce0 <= inp_img_ce0_local;

    inp_img_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            inp_img_ce0_local <= ap_const_logic_1;
        else 
            inp_img_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    j_mid2_fu_303_p3 <= 
        ap_const_lv8_0 when (empty_fu_297_p2(0) = '1') else 
        j_fu_86;
    line_buffer_3D_1_address0 <= zext_ln87_3_fu_423_p1(10 - 1 downto 0);
    line_buffer_3D_1_ce0 <= line_buffer_3D_1_ce0_local;

    line_buffer_3D_1_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            line_buffer_3D_1_ce0_local <= ap_const_logic_1;
        else 
            line_buffer_3D_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_3D_1_d0 <= bitcast_ln87_fu_433_p1;
    line_buffer_3D_1_we0 <= line_buffer_3D_1_we0_local;

    line_buffer_3D_1_we0_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001, select_ln82_reg_512_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (select_ln82_reg_512_pp0_iter4_reg = ap_const_lv4_5))) then 
            line_buffer_3D_1_we0_local <= ap_const_logic_1;
        else 
            line_buffer_3D_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_3D_2_address0 <= zext_ln87_3_fu_423_p1(10 - 1 downto 0);
    line_buffer_3D_2_ce0 <= line_buffer_3D_2_ce0_local;

    line_buffer_3D_2_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            line_buffer_3D_2_ce0_local <= ap_const_logic_1;
        else 
            line_buffer_3D_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_3D_2_d0 <= bitcast_ln87_fu_433_p1;
    line_buffer_3D_2_we0 <= line_buffer_3D_2_we0_local;

    line_buffer_3D_2_we0_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001, select_ln82_reg_512_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (select_ln82_reg_512_pp0_iter4_reg = ap_const_lv4_6))) then 
            line_buffer_3D_2_we0_local <= ap_const_logic_1;
        else 
            line_buffer_3D_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_3D_3_address0 <= zext_ln87_3_fu_423_p1(10 - 1 downto 0);
    line_buffer_3D_3_ce0 <= line_buffer_3D_3_ce0_local;

    line_buffer_3D_3_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            line_buffer_3D_3_ce0_local <= ap_const_logic_1;
        else 
            line_buffer_3D_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_3D_3_d0 <= bitcast_ln87_fu_433_p1;
    line_buffer_3D_3_we0 <= line_buffer_3D_3_we0_local;

    line_buffer_3D_3_we0_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001, select_ln82_reg_512_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (select_ln82_reg_512_pp0_iter4_reg = ap_const_lv4_7))) then 
            line_buffer_3D_3_we0_local <= ap_const_logic_1;
        else 
            line_buffer_3D_3_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_3D_4_address0 <= zext_ln87_3_fu_423_p1(10 - 1 downto 0);
    line_buffer_3D_4_ce0 <= line_buffer_3D_4_ce0_local;

    line_buffer_3D_4_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            line_buffer_3D_4_ce0_local <= ap_const_logic_1;
        else 
            line_buffer_3D_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_3D_4_d0 <= bitcast_ln87_fu_433_p1;
    line_buffer_3D_4_we0 <= line_buffer_3D_4_we0_local;

    line_buffer_3D_4_we0_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001, select_ln82_reg_512_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (select_ln82_reg_512_pp0_iter4_reg = ap_const_lv4_8))) then 
            line_buffer_3D_4_we0_local <= ap_const_logic_1;
        else 
            line_buffer_3D_4_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_3D_5_address0 <= zext_ln87_3_fu_423_p1(10 - 1 downto 0);
    line_buffer_3D_5_ce0 <= line_buffer_3D_5_ce0_local;

    line_buffer_3D_5_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            line_buffer_3D_5_ce0_local <= ap_const_logic_1;
        else 
            line_buffer_3D_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_3D_5_d0 <= bitcast_ln87_fu_433_p1;
    line_buffer_3D_5_we0 <= line_buffer_3D_5_we0_local;

    line_buffer_3D_5_we0_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001, select_ln82_reg_512_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (select_ln82_reg_512_pp0_iter4_reg = ap_const_lv4_9))) then 
            line_buffer_3D_5_we0_local <= ap_const_logic_1;
        else 
            line_buffer_3D_5_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_3D_6_address0 <= zext_ln87_3_fu_423_p1(10 - 1 downto 0);
    line_buffer_3D_6_ce0 <= line_buffer_3D_6_ce0_local;

    line_buffer_3D_6_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            line_buffer_3D_6_ce0_local <= ap_const_logic_1;
        else 
            line_buffer_3D_6_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_3D_6_d0 <= bitcast_ln87_fu_433_p1;
    line_buffer_3D_6_we0 <= line_buffer_3D_6_we0_local;

    line_buffer_3D_6_we0_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001, select_ln82_reg_512_pp0_iter4_reg)
    begin
        if ((not((select_ln82_reg_512_pp0_iter4_reg = ap_const_lv4_4)) and not((select_ln82_reg_512_pp0_iter4_reg = ap_const_lv4_5)) and not((select_ln82_reg_512_pp0_iter4_reg = ap_const_lv4_6)) and not((select_ln82_reg_512_pp0_iter4_reg = ap_const_lv4_7)) and not((select_ln82_reg_512_pp0_iter4_reg = ap_const_lv4_8)) and not((select_ln82_reg_512_pp0_iter4_reg = ap_const_lv4_9)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            line_buffer_3D_6_we0_local <= ap_const_logic_1;
        else 
            line_buffer_3D_6_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_3D_address0 <= zext_ln87_3_fu_423_p1(10 - 1 downto 0);
    line_buffer_3D_ce0 <= line_buffer_3D_ce0_local;

    line_buffer_3D_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            line_buffer_3D_ce0_local <= ap_const_logic_1;
        else 
            line_buffer_3D_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_3D_d0 <= bitcast_ln87_fu_433_p1;
    line_buffer_3D_we0 <= line_buffer_3D_we0_local;

    line_buffer_3D_we0_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001, select_ln82_reg_512_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (select_ln82_reg_512_pp0_iter4_reg = ap_const_lv4_4))) then 
            line_buffer_3D_we0_local <= ap_const_logic_1;
        else 
            line_buffer_3D_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln82_fu_391_p0 <= mul_ln82_fu_391_p00(2 - 1 downto 0);
    mul_ln82_fu_391_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln80_1_reg_521),17));
    select_ln80_1_fu_372_p3 <= 
        add_ln80_fu_366_p2 when (icmp_ln82_reg_501(0) = '1') else 
        c_fu_98;
    select_ln80_fu_265_p3 <= 
        ap_const_lv4_4 when (icmp_ln82_fu_259_p2(0) = '1') else 
        i_fu_90;
    select_ln82_1_fu_335_p3 <= 
        ap_const_lv11_1 when (icmp_ln82_fu_259_p2(0) = '1') else 
        add_ln82_1_fu_329_p2;
    select_ln82_fu_311_p3 <= 
        add_ln82_fu_291_p2 when (and_ln80_fu_285_p2(0) = '1') else 
        select_ln80_fu_265_p3;
        sext_ln87_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln87_2_fu_403_p2),17));

    xor_ln80_fu_273_p2 <= (icmp_ln82_fu_259_p2 xor ap_const_lv1_1);
    zext_ln84_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_reg_506_pp0_iter3_reg),11));
    zext_ln87_3_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_453_p3),64));
    zext_ln87_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln87_fu_413_p2),64));
end behav;
