-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity NN_norm1_Pipeline_L2_L3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inp_image_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    inp_image_ce0 : OUT STD_LOGIC;
    inp_image_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    inp_image_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    inp_image_1_ce0 : OUT STD_LOGIC;
    inp_image_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    inp_image_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    inp_image_2_ce0 : OUT STD_LOGIC;
    inp_image_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_img_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    out_img_ce0 : OUT STD_LOGIC;
    out_img_we0 : OUT STD_LOGIC;
    out_img_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_824_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_824_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_824_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_824_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_824_p_ce : OUT STD_LOGIC;
    grp_fu_828_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_828_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_828_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_828_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_828_p_ce : OUT STD_LOGIC;
    grp_fu_832_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_832_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_832_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_832_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_832_p_ce : OUT STD_LOGIC;
    grp_fu_836_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_836_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_836_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_836_p_ce : OUT STD_LOGIC;
    grp_fu_840_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_840_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_840_p_ce : OUT STD_LOGIC;
    grp_fu_843_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_843_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_843_p_ce : OUT STD_LOGIC;
    grp_fu_846_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_846_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_846_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_846_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_846_p_ce : OUT STD_LOGIC;
    grp_fu_850_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_850_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_850_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_850_p_ce : OUT STD_LOGIC;
    grp_pow_generic_float_s_fu_854_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_pow_generic_float_s_fu_854_p_din2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_pow_generic_float_s_fu_854_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_pow_generic_float_s_fu_866_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_pow_generic_float_s_fu_866_p_din2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_pow_generic_float_s_fu_866_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_pow_generic_float_s_fu_878_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_pow_generic_float_s_fu_878_p_din2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_pow_generic_float_s_fu_878_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_pow_generic_float_s_fu_890_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_pow_generic_float_s_fu_890_p_din2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_pow_generic_float_s_fu_890_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of NN_norm1_Pipeline_L2_L3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_3F400000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111010000000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3EF4F8B588E368F1 : STD_LOGIC_VECTOR (63 downto 0) := "0011111011110100111110001011010110001000111000110110100011110001";
    constant ap_const_lv10_2D9 : STD_LOGIC_VECTOR (9 downto 0) := "1011011001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_1B : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv10_1B : STD_LOGIC_VECTOR (9 downto 0) := "0000011011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter45 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter46 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter47 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter48 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter49 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter50 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter51 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter52 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter53 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter54 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter55 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter56 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter57 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter58 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter59 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter60 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter61 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter62 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter63 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter64 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln60_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln60_fu_301_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln60_reg_383 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln60_reg_383_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln68_2_fu_345_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter24_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter25_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter26_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter27_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter28_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter29_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter30_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter31_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter32_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter33_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter34_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter35_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter36_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter37_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter38_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter39_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter40_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter41_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter42_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter43_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter44_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter45_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter46_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter47_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter48_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter49_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter50_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter51_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter52_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter53_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter54_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter55_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter56_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter57_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter58_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter59_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter60_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter61_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter62_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_reg_398_pp0_iter63_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal inp_image_load_reg_410 : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter19_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter20_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter21_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter22_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter23_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter24_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter25_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter26_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter27_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter28_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter29_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter30_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter31_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter32_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter33_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter34_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter35_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter36_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter37_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter38_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter39_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter40_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter41_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter42_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter43_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter44_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter45_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter46_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter47_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter48_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter49_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter50_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter51_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter52_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter53_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_image_load_reg_410_pp0_iter54_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_436 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001_ignoreCallOp130 : BOOLEAN;
    signal add_reg_441 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_446 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001_ignoreCallOp143 : BOOLEAN;
    signal add51_1_reg_451 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_reg_456 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001_ignoreCallOp152 : BOOLEAN;
    signal add51_2_reg_461 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_reg_466 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_reg_471 : STD_LOGIC_VECTOR (63 downto 0);
    signal add1_reg_476 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_reg_486 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001_ignoreCallOp183 : BOOLEAN;
    signal div_reg_491 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_ignoreCallOp100 : BOOLEAN;
    signal ap_block_pp0_stage0_ignoreCallOp108 : BOOLEAN;
    signal ap_block_pp0_stage0_ignoreCallOp120 : BOOLEAN;
    signal ap_block_pp0_stage0_ignoreCallOp171 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal y_fu_68 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln63_fu_321_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_y_load : STD_LOGIC_VECTOR (4 downto 0);
    signal x_fu_72 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal select_ln60_1_fu_309_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_x_load : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten19_fu_76 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal add_ln60_1_fu_277_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten19_load : STD_LOGIC_VECTOR (9 downto 0);
    signal inp_image_ce0_local : STD_LOGIC;
    signal inp_image_1_ce0_local : STD_LOGIC;
    signal inp_image_2_ce0_local : STD_LOGIC;
    signal out_img_we0_local : STD_LOGIC;
    signal out_img_ce0_local : STD_LOGIC;
    signal icmp_ln63_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln60_fu_289_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_349_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_349_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_349_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_349_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter30_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter31_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter32_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter33_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter34_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter35_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter36_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter37_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter38_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter39_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter40_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter41_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter42_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter43_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter44_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter45_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter46_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter47_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter48_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter49_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter50_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter51_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter52_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter53_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter54_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter55_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter56_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter57_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter58_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter59_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter60_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter61_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter62_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter63_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal grp_fu_349_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_349_p20 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component NN_pow_generic_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        base_r : IN STD_LOGIC_VECTOR (31 downto 0);
        exp : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component NN_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component NN_fdiv_32ns_32ns_32_9_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component NN_fptrunc_64ns_32_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component NN_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component NN_dadd_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component NN_dmul_64ns_64ns_64_5_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component NN_mac_muladd_5ns_5ns_5ns_10_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component NN_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_5ns_5ns_5ns_10_4_1_U3131 : component NN_mac_muladd_5ns_5ns_5ns_10_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        din2_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_349_p0,
        din1 => grp_fu_349_p1,
        din2 => grp_fu_349_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_349_p3);

    flow_control_loop_pipe_sequential_init_U : component NN_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter63_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter44 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter45 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter46 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter47_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter47 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter48_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter48 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter49_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter49 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter50_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter50 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter51_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter51 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter51 <= ap_enable_reg_pp0_iter50;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter52_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter52 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter52 <= ap_enable_reg_pp0_iter51;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter53_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter53 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter53 <= ap_enable_reg_pp0_iter52;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter54_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter54 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter54 <= ap_enable_reg_pp0_iter53;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter55_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter55 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter55 <= ap_enable_reg_pp0_iter54;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter56_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter56 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter56 <= ap_enable_reg_pp0_iter55;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter57_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter57 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter57 <= ap_enable_reg_pp0_iter56;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter58_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter58 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter58 <= ap_enable_reg_pp0_iter57;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter59_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter59 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter59 <= ap_enable_reg_pp0_iter58;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter60_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter60 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter60 <= ap_enable_reg_pp0_iter59;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter61_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter61 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter61 <= ap_enable_reg_pp0_iter60;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter62_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter62 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter62 <= ap_enable_reg_pp0_iter61;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter63_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter63 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter63 <= ap_enable_reg_pp0_iter62;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter64_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter64 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter64 <= ap_enable_reg_pp0_iter63;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten19_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln60_fu_271_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten19_fu_76 <= add_ln60_1_fu_277_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten19_fu_76 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    x_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln60_fu_271_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    x_fu_72 <= select_ln60_1_fu_309_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    x_fu_72 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    y_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln60_fu_271_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    y_fu_68 <= add_ln63_fu_321_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    y_fu_68 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add1_reg_476 <= grp_fu_846_p_dout0;
                add51_1_reg_451 <= grp_fu_828_p_dout0;
                add51_2_reg_461 <= grp_fu_832_p_dout0;
                add_reg_441 <= grp_fu_824_p_dout0;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
                ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
                ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
                ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
                ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
                ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
                ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
                ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
                ap_loop_exit_ready_pp0_iter37_reg <= ap_loop_exit_ready_pp0_iter36_reg;
                ap_loop_exit_ready_pp0_iter38_reg <= ap_loop_exit_ready_pp0_iter37_reg;
                ap_loop_exit_ready_pp0_iter39_reg <= ap_loop_exit_ready_pp0_iter38_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter40_reg <= ap_loop_exit_ready_pp0_iter39_reg;
                ap_loop_exit_ready_pp0_iter41_reg <= ap_loop_exit_ready_pp0_iter40_reg;
                ap_loop_exit_ready_pp0_iter42_reg <= ap_loop_exit_ready_pp0_iter41_reg;
                ap_loop_exit_ready_pp0_iter43_reg <= ap_loop_exit_ready_pp0_iter42_reg;
                ap_loop_exit_ready_pp0_iter44_reg <= ap_loop_exit_ready_pp0_iter43_reg;
                ap_loop_exit_ready_pp0_iter45_reg <= ap_loop_exit_ready_pp0_iter44_reg;
                ap_loop_exit_ready_pp0_iter46_reg <= ap_loop_exit_ready_pp0_iter45_reg;
                ap_loop_exit_ready_pp0_iter47_reg <= ap_loop_exit_ready_pp0_iter46_reg;
                ap_loop_exit_ready_pp0_iter48_reg <= ap_loop_exit_ready_pp0_iter47_reg;
                ap_loop_exit_ready_pp0_iter49_reg <= ap_loop_exit_ready_pp0_iter48_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter50_reg <= ap_loop_exit_ready_pp0_iter49_reg;
                ap_loop_exit_ready_pp0_iter51_reg <= ap_loop_exit_ready_pp0_iter50_reg;
                ap_loop_exit_ready_pp0_iter52_reg <= ap_loop_exit_ready_pp0_iter51_reg;
                ap_loop_exit_ready_pp0_iter53_reg <= ap_loop_exit_ready_pp0_iter52_reg;
                ap_loop_exit_ready_pp0_iter54_reg <= ap_loop_exit_ready_pp0_iter53_reg;
                ap_loop_exit_ready_pp0_iter55_reg <= ap_loop_exit_ready_pp0_iter54_reg;
                ap_loop_exit_ready_pp0_iter56_reg <= ap_loop_exit_ready_pp0_iter55_reg;
                ap_loop_exit_ready_pp0_iter57_reg <= ap_loop_exit_ready_pp0_iter56_reg;
                ap_loop_exit_ready_pp0_iter58_reg <= ap_loop_exit_ready_pp0_iter57_reg;
                ap_loop_exit_ready_pp0_iter59_reg <= ap_loop_exit_ready_pp0_iter58_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter60_reg <= ap_loop_exit_ready_pp0_iter59_reg;
                ap_loop_exit_ready_pp0_iter61_reg <= ap_loop_exit_ready_pp0_iter60_reg;
                ap_loop_exit_ready_pp0_iter62_reg <= ap_loop_exit_ready_pp0_iter61_reg;
                ap_loop_exit_ready_pp0_iter63_reg <= ap_loop_exit_ready_pp0_iter62_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                conv_reg_466 <= grp_fu_843_p_dout0;
                div_reg_491 <= grp_fu_836_p_dout0;
                inp_image_load_reg_410 <= inp_image_q0;
                inp_image_load_reg_410_pp0_iter10_reg <= inp_image_load_reg_410_pp0_iter9_reg;
                inp_image_load_reg_410_pp0_iter11_reg <= inp_image_load_reg_410_pp0_iter10_reg;
                inp_image_load_reg_410_pp0_iter12_reg <= inp_image_load_reg_410_pp0_iter11_reg;
                inp_image_load_reg_410_pp0_iter13_reg <= inp_image_load_reg_410_pp0_iter12_reg;
                inp_image_load_reg_410_pp0_iter14_reg <= inp_image_load_reg_410_pp0_iter13_reg;
                inp_image_load_reg_410_pp0_iter15_reg <= inp_image_load_reg_410_pp0_iter14_reg;
                inp_image_load_reg_410_pp0_iter16_reg <= inp_image_load_reg_410_pp0_iter15_reg;
                inp_image_load_reg_410_pp0_iter17_reg <= inp_image_load_reg_410_pp0_iter16_reg;
                inp_image_load_reg_410_pp0_iter18_reg <= inp_image_load_reg_410_pp0_iter17_reg;
                inp_image_load_reg_410_pp0_iter19_reg <= inp_image_load_reg_410_pp0_iter18_reg;
                inp_image_load_reg_410_pp0_iter20_reg <= inp_image_load_reg_410_pp0_iter19_reg;
                inp_image_load_reg_410_pp0_iter21_reg <= inp_image_load_reg_410_pp0_iter20_reg;
                inp_image_load_reg_410_pp0_iter22_reg <= inp_image_load_reg_410_pp0_iter21_reg;
                inp_image_load_reg_410_pp0_iter23_reg <= inp_image_load_reg_410_pp0_iter22_reg;
                inp_image_load_reg_410_pp0_iter24_reg <= inp_image_load_reg_410_pp0_iter23_reg;
                inp_image_load_reg_410_pp0_iter25_reg <= inp_image_load_reg_410_pp0_iter24_reg;
                inp_image_load_reg_410_pp0_iter26_reg <= inp_image_load_reg_410_pp0_iter25_reg;
                inp_image_load_reg_410_pp0_iter27_reg <= inp_image_load_reg_410_pp0_iter26_reg;
                inp_image_load_reg_410_pp0_iter28_reg <= inp_image_load_reg_410_pp0_iter27_reg;
                inp_image_load_reg_410_pp0_iter29_reg <= inp_image_load_reg_410_pp0_iter28_reg;
                inp_image_load_reg_410_pp0_iter30_reg <= inp_image_load_reg_410_pp0_iter29_reg;
                inp_image_load_reg_410_pp0_iter31_reg <= inp_image_load_reg_410_pp0_iter30_reg;
                inp_image_load_reg_410_pp0_iter32_reg <= inp_image_load_reg_410_pp0_iter31_reg;
                inp_image_load_reg_410_pp0_iter33_reg <= inp_image_load_reg_410_pp0_iter32_reg;
                inp_image_load_reg_410_pp0_iter34_reg <= inp_image_load_reg_410_pp0_iter33_reg;
                inp_image_load_reg_410_pp0_iter35_reg <= inp_image_load_reg_410_pp0_iter34_reg;
                inp_image_load_reg_410_pp0_iter36_reg <= inp_image_load_reg_410_pp0_iter35_reg;
                inp_image_load_reg_410_pp0_iter37_reg <= inp_image_load_reg_410_pp0_iter36_reg;
                inp_image_load_reg_410_pp0_iter38_reg <= inp_image_load_reg_410_pp0_iter37_reg;
                inp_image_load_reg_410_pp0_iter39_reg <= inp_image_load_reg_410_pp0_iter38_reg;
                inp_image_load_reg_410_pp0_iter40_reg <= inp_image_load_reg_410_pp0_iter39_reg;
                inp_image_load_reg_410_pp0_iter41_reg <= inp_image_load_reg_410_pp0_iter40_reg;
                inp_image_load_reg_410_pp0_iter42_reg <= inp_image_load_reg_410_pp0_iter41_reg;
                inp_image_load_reg_410_pp0_iter43_reg <= inp_image_load_reg_410_pp0_iter42_reg;
                inp_image_load_reg_410_pp0_iter44_reg <= inp_image_load_reg_410_pp0_iter43_reg;
                inp_image_load_reg_410_pp0_iter45_reg <= inp_image_load_reg_410_pp0_iter44_reg;
                inp_image_load_reg_410_pp0_iter46_reg <= inp_image_load_reg_410_pp0_iter45_reg;
                inp_image_load_reg_410_pp0_iter47_reg <= inp_image_load_reg_410_pp0_iter46_reg;
                inp_image_load_reg_410_pp0_iter48_reg <= inp_image_load_reg_410_pp0_iter47_reg;
                inp_image_load_reg_410_pp0_iter49_reg <= inp_image_load_reg_410_pp0_iter48_reg;
                inp_image_load_reg_410_pp0_iter50_reg <= inp_image_load_reg_410_pp0_iter49_reg;
                inp_image_load_reg_410_pp0_iter51_reg <= inp_image_load_reg_410_pp0_iter50_reg;
                inp_image_load_reg_410_pp0_iter52_reg <= inp_image_load_reg_410_pp0_iter51_reg;
                inp_image_load_reg_410_pp0_iter53_reg <= inp_image_load_reg_410_pp0_iter52_reg;
                inp_image_load_reg_410_pp0_iter54_reg <= inp_image_load_reg_410_pp0_iter53_reg;
                inp_image_load_reg_410_pp0_iter5_reg <= inp_image_load_reg_410;
                inp_image_load_reg_410_pp0_iter6_reg <= inp_image_load_reg_410_pp0_iter5_reg;
                inp_image_load_reg_410_pp0_iter7_reg <= inp_image_load_reg_410_pp0_iter6_reg;
                inp_image_load_reg_410_pp0_iter8_reg <= inp_image_load_reg_410_pp0_iter7_reg;
                inp_image_load_reg_410_pp0_iter9_reg <= inp_image_load_reg_410_pp0_iter8_reg;
                mul_reg_471 <= grp_fu_850_p_dout0;
                    zext_ln68_2_reg_398(9 downto 0) <= zext_ln68_2_fu_345_p1(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter10_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter9_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter11_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter10_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter12_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter11_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter13_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter12_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter14_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter13_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter15_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter14_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter16_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter15_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter17_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter16_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter18_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter17_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter19_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter18_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter20_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter19_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter21_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter20_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter22_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter21_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter23_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter22_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter24_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter23_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter25_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter24_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter26_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter25_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter27_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter26_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter28_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter27_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter29_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter28_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter30_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter29_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter31_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter30_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter32_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter31_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter33_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter32_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter34_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter33_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter35_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter34_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter36_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter35_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter37_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter36_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter38_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter37_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter39_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter38_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter40_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter39_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter41_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter40_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter42_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter41_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter43_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter42_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter44_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter43_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter45_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter44_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter46_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter45_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter47_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter46_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter48_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter47_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter49_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter48_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter4_reg(9 downto 0) <= zext_ln68_2_reg_398(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter50_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter49_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter51_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter50_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter52_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter51_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter53_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter52_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter54_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter53_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter55_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter54_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter56_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter55_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter57_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter56_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter58_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter57_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter59_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter58_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter5_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter4_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter60_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter59_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter61_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter60_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter62_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter61_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter63_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter62_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter6_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter5_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter7_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter6_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter8_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter7_reg(9 downto 0);
                    zext_ln68_2_reg_398_pp0_iter9_reg(9 downto 0) <= zext_ln68_2_reg_398_pp0_iter8_reg(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                select_ln60_reg_383 <= select_ln60_fu_301_p3;
                select_ln60_reg_383_pp0_iter1_reg <= select_ln60_reg_383;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp152)) then
                tmp_33_reg_456 <= grp_pow_generic_float_s_fu_878_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp183)) then
                tmp_34_reg_486 <= grp_pow_generic_float_s_fu_890_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp130)) then
                tmp_reg_436 <= grp_pow_generic_float_s_fu_854_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp143)) then
                tmp_s_reg_446 <= grp_pow_generic_float_s_fu_866_p_dout0;
            end if;
        end if;
    end process;
    zext_ln68_2_reg_398(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter4_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter5_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter6_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter7_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter8_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter9_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter10_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter11_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter12_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter13_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter14_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter15_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter16_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter17_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter18_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter19_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter20_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter21_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter22_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter23_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter24_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter25_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter26_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter27_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter28_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter29_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter30_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter31_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter32_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter33_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter34_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter35_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter36_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter37_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter38_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter39_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter40_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter41_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter42_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter43_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter44_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter45_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter46_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter47_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter48_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter49_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter50_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter51_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter52_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter53_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter54_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter55_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter56_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter57_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter58_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter59_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter60_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter61_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter62_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln68_2_reg_398_pp0_iter63_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln60_1_fu_277_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten19_load) + unsigned(ap_const_lv10_1));
    add_ln60_fu_289_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_x_load) + unsigned(ap_const_lv5_1));
    add_ln63_fu_321_p2 <= std_logic_vector(unsigned(select_ln60_fu_301_p3) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001_ignoreCallOp130 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001_ignoreCallOp143 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001_ignoreCallOp152 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001_ignoreCallOp183 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_ignoreCallOp100 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_ignoreCallOp108 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_ignoreCallOp120 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_ignoreCallOp171 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln60_fu_271_p2)
    begin
        if (((icmp_ln60_fu_271_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter63_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter63_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter44, ap_enable_reg_pp0_iter45, ap_enable_reg_pp0_iter46, ap_enable_reg_pp0_iter47, ap_enable_reg_pp0_iter48, ap_enable_reg_pp0_iter49, ap_enable_reg_pp0_iter50, ap_enable_reg_pp0_iter51, ap_enable_reg_pp0_iter52, ap_enable_reg_pp0_iter53, ap_enable_reg_pp0_iter54, ap_enable_reg_pp0_iter55, ap_enable_reg_pp0_iter56, ap_enable_reg_pp0_iter57, ap_enable_reg_pp0_iter58, ap_enable_reg_pp0_iter59, ap_enable_reg_pp0_iter60, ap_enable_reg_pp0_iter61, ap_enable_reg_pp0_iter62, ap_enable_reg_pp0_iter63, ap_enable_reg_pp0_iter64)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = 
    ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter64 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter63 = ap_const_logic_0) and (ap_enable_reg_pp0_iter62 = ap_const_logic_0) and (ap_enable_reg_pp0_iter61 = ap_const_logic_0) and (ap_enable_reg_pp0_iter60 = ap_const_logic_0) and (ap_enable_reg_pp0_iter59 = ap_const_logic_0) and (ap_enable_reg_pp0_iter58 = ap_const_logic_0) and (ap_enable_reg_pp0_iter57 = ap_const_logic_0) and (ap_enable_reg_pp0_iter56 = ap_const_logic_0) and (ap_enable_reg_pp0_iter55 = ap_const_logic_0) and (ap_enable_reg_pp0_iter54 = ap_const_logic_0) and (ap_enable_reg_pp0_iter53 = ap_const_logic_0) and (ap_enable_reg_pp0_iter52 = ap_const_logic_0) and (ap_enable_reg_pp0_iter51 = ap_const_logic_0) and (ap_enable_reg_pp0_iter50 
    = ap_const_logic_0) and (ap_enable_reg_pp0_iter49 = ap_const_logic_0) and (ap_enable_reg_pp0_iter48 = ap_const_logic_0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_0) and (ap_enable_reg_pp0_iter45 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 
    = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten19_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten19_fu_76)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten19_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten19_load <= indvar_flatten19_fu_76;
        end if; 
    end process;


    ap_sig_allocacmp_x_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, x_fu_72)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_x_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_x_load <= x_fu_72;
        end if; 
    end process;


    ap_sig_allocacmp_y_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, y_fu_68, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_y_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_y_load <= y_fu_68;
        end if; 
    end process;

    grp_fu_349_p0 <= grp_fu_349_p00(5 - 1 downto 0);
    grp_fu_349_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln60_1_fu_309_p3),10));
    grp_fu_349_p1 <= ap_const_lv10_1B(5 - 1 downto 0);
    grp_fu_349_p2 <= grp_fu_349_p20(5 - 1 downto 0);
    grp_fu_349_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln60_reg_383_pp0_iter1_reg),10));
    grp_fu_824_p_ce <= ap_const_logic_1;
    grp_fu_824_p_din0 <= tmp_reg_436;
    grp_fu_824_p_din1 <= ap_const_lv32_0;
    grp_fu_824_p_opcode <= ap_const_lv2_0;
    grp_fu_828_p_ce <= ap_const_logic_1;
    grp_fu_828_p_din0 <= add_reg_441;
    grp_fu_828_p_din1 <= tmp_s_reg_446;
    grp_fu_828_p_opcode <= ap_const_lv2_0;
    grp_fu_832_p_ce <= ap_const_logic_1;
    grp_fu_832_p_din0 <= add51_1_reg_451;
    grp_fu_832_p_din1 <= tmp_33_reg_456;
    grp_fu_832_p_opcode <= ap_const_lv2_0;
    grp_fu_836_p_ce <= ap_const_logic_1;
    grp_fu_836_p_din0 <= inp_image_load_reg_410_pp0_iter54_reg;
    grp_fu_836_p_din1 <= tmp_34_reg_486;
    grp_fu_840_p_ce <= ap_const_logic_1;
    grp_fu_840_p_din0 <= add1_reg_476;
    grp_fu_843_p_ce <= ap_const_logic_1;
    grp_fu_843_p_din0 <= add51_2_reg_461;
    grp_fu_846_p_ce <= ap_const_logic_1;
    grp_fu_846_p_din0 <= mul_reg_471;
    grp_fu_846_p_din1 <= ap_const_lv64_3FF0000000000000;
    grp_fu_846_p_opcode <= ap_const_lv2_0;
    grp_fu_850_p_ce <= ap_const_logic_1;
    grp_fu_850_p_din0 <= conv_reg_466;
    grp_fu_850_p_din1 <= ap_const_lv64_3EF4F8B588E368F1;
    grp_pow_generic_float_s_fu_854_p_din1 <= inp_image_q0;
    grp_pow_generic_float_s_fu_854_p_din2 <= ap_const_lv32_40000000;
    grp_pow_generic_float_s_fu_866_p_din1 <= inp_image_1_q0;
    grp_pow_generic_float_s_fu_866_p_din2 <= ap_const_lv32_40000000;
    grp_pow_generic_float_s_fu_878_p_din1 <= inp_image_2_q0;
    grp_pow_generic_float_s_fu_878_p_din2 <= ap_const_lv32_40000000;
    grp_pow_generic_float_s_fu_890_p_din1 <= grp_fu_840_p_dout0;
    grp_pow_generic_float_s_fu_890_p_din2 <= ap_const_lv32_3F400000;
    icmp_ln60_fu_271_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten19_load = ap_const_lv10_2D9) else "0";
    icmp_ln63_fu_295_p2 <= "1" when (ap_sig_allocacmp_y_load = ap_const_lv5_1B) else "0";
    inp_image_1_address0 <= zext_ln68_2_reg_398_pp0_iter6_reg(10 - 1 downto 0);
    inp_image_1_ce0 <= inp_image_1_ce0_local;

    inp_image_1_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            inp_image_1_ce0_local <= ap_const_logic_1;
        else 
            inp_image_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    inp_image_2_address0 <= zext_ln68_2_reg_398_pp0_iter10_reg(10 - 1 downto 0);
    inp_image_2_ce0 <= inp_image_2_ce0_local;

    inp_image_2_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            inp_image_2_ce0_local <= ap_const_logic_1;
        else 
            inp_image_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    inp_image_address0 <= zext_ln68_2_fu_345_p1(10 - 1 downto 0);
    inp_image_ce0 <= inp_image_ce0_local;

    inp_image_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            inp_image_ce0_local <= ap_const_logic_1;
        else 
            inp_image_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_img_address0 <= zext_ln68_2_reg_398_pp0_iter63_reg(17 - 1 downto 0);
    out_img_ce0 <= out_img_ce0_local;

    out_img_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter64, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter64 = ap_const_logic_1))) then 
            out_img_ce0_local <= ap_const_logic_1;
        else 
            out_img_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_img_d0 <= div_reg_491;
    out_img_we0 <= out_img_we0_local;

    out_img_we0_local_assign_proc : process(ap_enable_reg_pp0_iter64, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter64 = ap_const_logic_1))) then 
            out_img_we0_local <= ap_const_logic_1;
        else 
            out_img_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    select_ln60_1_fu_309_p3 <= 
        add_ln60_fu_289_p2 when (icmp_ln63_fu_295_p2(0) = '1') else 
        ap_sig_allocacmp_x_load;
    select_ln60_fu_301_p3 <= 
        ap_const_lv5_0 when (icmp_ln63_fu_295_p2(0) = '1') else 
        ap_sig_allocacmp_y_load;
    zext_ln68_2_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_349_p3),64));
end behav;
