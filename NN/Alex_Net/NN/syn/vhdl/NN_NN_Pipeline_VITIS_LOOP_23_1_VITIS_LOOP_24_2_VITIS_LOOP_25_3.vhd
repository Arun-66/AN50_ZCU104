-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity NN_NN_Pipeline_VITIS_LOOP_23_1_VITIS_LOOP_24_2_VITIS_LOOP_25_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Pad2_out_img_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Pad2_out_img_ce0 : OUT STD_LOGIC;
    Pad2_out_img_we0 : OUT STD_LOGIC;
    Pad2_out_img_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Norm2_out_img_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Norm2_out_img_ce0 : OUT STD_LOGIC;
    Norm2_out_img_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of NN_NN_Pipeline_VITIS_LOOP_23_1_VITIS_LOOP_24_2_VITIS_LOOP_25_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_E100 : STD_LOGIC_VECTOR (15 downto 0) := "1110000100000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv8_E1 : STD_LOGIC_VECTOR (7 downto 0) := "11100001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv16_A9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010101001";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv16_E1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000011100001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln23_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln24_fu_157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_451 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_mid2_fu_201_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_mid2_reg_456 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_mid2_reg_456_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_mid2_reg_456_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln24_fu_217_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_1363_fu_229_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_1363_reg_467 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_1363_reg_467_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_1363_reg_467_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_1363_reg_467_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln33_1_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln33_1_reg_472 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln33_1_reg_472_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln33_1_reg_472_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln33_1_reg_472_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln23_1_cast_fu_333_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln23_1_cast_reg_477 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln24_fu_342_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln34_fu_368_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln30_fu_381_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_fu_62 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln25_fu_277_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_1_load : STD_LOGIC_VECTOR (3 downto 0);
    signal i_fu_66 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal select_ln24_fu_209_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten19_fu_70 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln24_1_fu_289_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_indvar_flatten19_load : STD_LOGIC_VECTOR (7 downto 0);
    signal c_4_fu_74 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal select_ln23_1_fu_326_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten32_fu_78 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal add_ln23_1_fu_142_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_indvar_flatten32_load : STD_LOGIC_VECTOR (15 downto 0);
    signal Norm2_out_img_ce0_local : STD_LOGIC;
    signal Pad2_out_img_we0_local : STD_LOGIC;
    signal storemerge67_fu_386_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Pad2_out_img_ce0_local : STD_LOGIC;
    signal icmp_ln2588_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln23_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln23_fu_163_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln23_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln24_fu_189_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_fu_221_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal cmp18_i_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp19_i_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_1_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln33_2_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln33_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln24_1_fu_283_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln23_fu_320_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln24_fu_342_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln24_fu_342_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln25_fu_347_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln30_2_fu_353_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln30_fu_359_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_394_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln30_fu_363_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln30_fu_363_p2 : signal is "no";
    signal grp_fu_403_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_cast28_fu_373_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln29_fu_376_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln29_fu_376_p2 : signal is "no";
    signal grp_fu_394_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_394_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_403_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_403_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_403_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal grp_fu_403_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_403_p20 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component NN_mul_9ns_9ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component NN_mac_muladd_4ns_4ns_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component NN_mac_muladd_9ns_8ns_4ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component NN_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_9ns_9ns_16_1_1_U11783 : component NN_mul_9ns_9ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln24_fu_342_p0,
        din1 => mul_ln24_fu_342_p1,
        dout => mul_ln24_fu_342_p2);

    mac_muladd_4ns_4ns_16ns_16_4_1_U11784 : component NN_mac_muladd_4ns_4ns_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_394_p0,
        din1 => grp_fu_394_p1,
        din2 => mul_ln24_fu_342_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_394_p3);

    mac_muladd_9ns_8ns_4ns_16_4_1_U11785 : component NN_mac_muladd_9ns_8ns_4ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 8,
        din2_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_403_p0,
        din1 => grp_fu_403_p1,
        din2 => grp_fu_403_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_403_p3);

    flow_control_loop_pipe_sequential_init_U : component NN_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    c_4_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    c_4_fu_74 <= ap_const_lv9_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    c_4_fu_74 <= select_ln23_1_fu_326_p3;
                end if;
            end if; 
        end if;
    end process;

    i_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln23_fu_136_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_66 <= select_ln24_fu_209_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_66 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten19_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln23_fu_136_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten19_fu_70 <= select_ln24_1_fu_289_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten19_fu_70 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten32_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln23_fu_136_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten32_fu_78 <= add_ln23_1_fu_142_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten32_fu_78 <= ap_const_lv16_0;
                end if;
            end if; 
        end if;
    end process;

    j_1_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln23_fu_136_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_1_fu_62 <= add_ln25_fu_277_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_1_fu_62 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                empty_1363_reg_467 <= empty_1363_fu_229_p2;
                empty_1363_reg_467_pp0_iter1_reg <= empty_1363_reg_467;
                icmp_ln24_reg_451 <= icmp_ln24_fu_157_p2;
                j_1_mid2_reg_456 <= j_1_mid2_fu_201_p3;
                j_1_mid2_reg_456_pp0_iter1_reg <= j_1_mid2_reg_456;
                or_ln33_1_reg_472 <= or_ln33_1_fu_271_p2;
                or_ln33_1_reg_472_pp0_iter1_reg <= or_ln33_1_reg_472;
                    select_ln23_1_cast_reg_477(8 downto 0) <= select_ln23_1_cast_fu_333_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                empty_1363_reg_467_pp0_iter2_reg <= empty_1363_reg_467_pp0_iter1_reg;
                empty_1363_reg_467_pp0_iter3_reg <= empty_1363_reg_467_pp0_iter2_reg;
                j_1_mid2_reg_456_pp0_iter2_reg <= j_1_mid2_reg_456_pp0_iter1_reg;
                or_ln33_1_reg_472_pp0_iter2_reg <= or_ln33_1_reg_472_pp0_iter1_reg;
                or_ln33_1_reg_472_pp0_iter3_reg <= or_ln33_1_reg_472_pp0_iter2_reg;
            end if;
        end if;
    end process;
    select_ln23_1_cast_reg_477(15 downto 9) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Norm2_out_img_address0 <= zext_ln34_fu_368_p1(16 - 1 downto 0);
    Norm2_out_img_ce0 <= Norm2_out_img_ce0_local;

    Norm2_out_img_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            Norm2_out_img_ce0_local <= ap_const_logic_1;
        else 
            Norm2_out_img_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    Pad2_out_img_address0 <= zext_ln30_fu_381_p1(16 - 1 downto 0);
    Pad2_out_img_ce0 <= Pad2_out_img_ce0_local;

    Pad2_out_img_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            Pad2_out_img_ce0_local <= ap_const_logic_1;
        else 
            Pad2_out_img_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    Pad2_out_img_d0 <= storemerge67_fu_386_p3;
    Pad2_out_img_we0 <= Pad2_out_img_we0_local;

    Pad2_out_img_we0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            Pad2_out_img_we0_local <= ap_const_logic_1;
        else 
            Pad2_out_img_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln23_1_fu_142_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten32_load) + unsigned(ap_const_lv16_1));
    add_ln23_fu_320_p2 <= std_logic_vector(unsigned(c_4_fu_74) + unsigned(ap_const_lv9_1));
    add_ln24_1_fu_283_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten19_load) + unsigned(ap_const_lv8_1));
    add_ln24_fu_189_p2 <= std_logic_vector(unsigned(select_ln23_fu_163_p3) + unsigned(ap_const_lv4_1));
    add_ln25_fu_277_p2 <= std_logic_vector(unsigned(j_1_mid2_fu_201_p3) + unsigned(ap_const_lv4_1));
    add_ln29_fu_376_p2 <= std_logic_vector(unsigned(grp_fu_403_p3) + unsigned(p_cast28_fu_373_p1));
    add_ln30_2_fu_353_p2 <= std_logic_vector(unsigned(zext_ln25_fu_347_p1) + unsigned(ap_const_lv5_12));
    add_ln30_fu_363_p2 <= std_logic_vector(signed(sext_ln30_fu_359_p1) + signed(grp_fu_394_p3));
    and_ln23_fu_183_p2 <= (xor_ln23_fu_171_p2 and icmp_ln2588_fu_177_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln23_fu_136_p2)
    begin
        if (((icmp_ln23_fu_136_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_66)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_66;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten19_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten19_fu_70)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten19_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_indvar_flatten19_load <= indvar_flatten19_fu_70;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten32_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten32_fu_78)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten32_load <= ap_const_lv16_0;
        else 
            ap_sig_allocacmp_indvar_flatten32_load <= indvar_flatten32_fu_78;
        end if; 
    end process;


    ap_sig_allocacmp_j_1_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_1_fu_62, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_1_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_j_1_load <= j_1_fu_62;
        end if; 
    end process;

    cmp18_i_fu_235_p2 <= "1" when (select_ln24_fu_209_p3 = ap_const_lv4_0) else "0";
    cmp19_i_fu_241_p2 <= "1" when (unsigned(select_ln24_fu_209_p3) > unsigned(ap_const_lv4_D)) else "0";
    empty_1363_fu_229_p2 <= std_logic_vector(unsigned(p_shl_fu_221_p3) - unsigned(zext_ln24_fu_217_p1));
    empty_fu_195_p2 <= (icmp_ln24_fu_157_p2 or and_ln23_fu_183_p2);
    grp_fu_394_p0 <= zext_ln24_fu_217_p1(4 - 1 downto 0);
    grp_fu_394_p1 <= ap_const_lv8_D(4 - 1 downto 0);
    grp_fu_403_p0 <= grp_fu_403_p00(9 - 1 downto 0);
    grp_fu_403_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln23_1_fu_326_p3),16));
    grp_fu_403_p1 <= ap_const_lv16_E1(8 - 1 downto 0);
    grp_fu_403_p2 <= grp_fu_403_p20(4 - 1 downto 0);
    grp_fu_403_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_mid2_reg_456_pp0_iter2_reg),16));
    icmp_ln23_fu_136_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten32_load = ap_const_lv16_E100) else "0";
    icmp_ln24_fu_157_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten19_load = ap_const_lv8_E1) else "0";
    icmp_ln2588_fu_177_p2 <= "1" when (ap_sig_allocacmp_j_1_load = ap_const_lv4_F) else "0";
    icmp_ln34_1_fu_253_p2 <= "1" when (unsigned(j_1_mid2_fu_201_p3) > unsigned(ap_const_lv4_D)) else "0";
    icmp_ln34_fu_247_p2 <= "1" when (j_1_mid2_fu_201_p3 = ap_const_lv4_0) else "0";
    j_1_mid2_fu_201_p3 <= 
        ap_const_lv4_0 when (empty_fu_195_p2(0) = '1') else 
        ap_sig_allocacmp_j_1_load;
    mul_ln24_fu_342_p0 <= select_ln23_1_cast_reg_477(9 - 1 downto 0);
    mul_ln24_fu_342_p1 <= ap_const_lv16_A9(9 - 1 downto 0);
    or_ln33_1_fu_271_p2 <= (or_ln33_fu_259_p2 or or_ln33_2_fu_265_p2);
    or_ln33_2_fu_265_p2 <= (icmp_ln34_fu_247_p2 or icmp_ln34_1_fu_253_p2);
    or_ln33_fu_259_p2 <= (cmp19_i_fu_241_p2 or cmp18_i_fu_235_p2);
    p_cast28_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_1363_reg_467_pp0_iter3_reg),16));
    p_shl_fu_221_p3 <= (select_ln24_fu_209_p3 & ap_const_lv4_0);
    select_ln23_1_cast_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln23_1_fu_326_p3),16));
    select_ln23_1_fu_326_p3 <= 
        add_ln23_fu_320_p2 when (icmp_ln24_reg_451(0) = '1') else 
        c_4_fu_74;
    select_ln23_fu_163_p3 <= 
        ap_const_lv4_0 when (icmp_ln24_fu_157_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln24_1_fu_289_p3 <= 
        ap_const_lv8_1 when (icmp_ln24_fu_157_p2(0) = '1') else 
        add_ln24_1_fu_283_p2;
    select_ln24_fu_209_p3 <= 
        add_ln24_fu_189_p2 when (and_ln23_fu_183_p2(0) = '1') else 
        select_ln23_fu_163_p3;
        sext_ln30_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln30_2_fu_353_p2),16));

    storemerge67_fu_386_p3 <= 
        ap_const_lv32_0 when (or_ln33_1_reg_472_pp0_iter3_reg(0) = '1') else 
        Norm2_out_img_q0;
    xor_ln23_fu_171_p2 <= (icmp_ln24_fu_157_p2 xor ap_const_lv1_1);
    zext_ln24_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_fu_209_p3),8));
    zext_ln25_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_mid2_reg_456_pp0_iter2_reg),5));
    zext_ln30_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_fu_376_p2),64));
    zext_ln34_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_fu_363_p2),64));
end behav;
