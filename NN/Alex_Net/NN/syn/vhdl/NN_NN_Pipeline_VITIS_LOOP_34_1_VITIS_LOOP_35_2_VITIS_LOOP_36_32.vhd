-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity NN_NN_Pipeline_VITIS_LOOP_34_1_VITIS_LOOP_35_2_VITIS_LOOP_36_32 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Pad4_out_img_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    Pad4_out_img_ce0 : OUT STD_LOGIC;
    Pad4_out_img_we0 : OUT STD_LOGIC;
    Pad4_out_img_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Conv4_out_img_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    Conv4_out_img_ce0 : OUT STD_LOGIC;
    Conv4_out_img_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Conv4_out_img_1_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    Conv4_out_img_1_ce0 : OUT STD_LOGIC;
    Conv4_out_img_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Conv4_out_img_2_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    Conv4_out_img_2_ce0 : OUT STD_LOGIC;
    Conv4_out_img_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Conv4_out_img_3_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    Conv4_out_img_3_ce0 : OUT STD_LOGIC;
    Conv4_out_img_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Conv4_out_img_4_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    Conv4_out_img_4_ce0 : OUT STD_LOGIC;
    Conv4_out_img_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Conv4_out_img_5_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    Conv4_out_img_5_ce0 : OUT STD_LOGIC;
    Conv4_out_img_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Conv4_out_img_6_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    Conv4_out_img_6_ce0 : OUT STD_LOGIC;
    Conv4_out_img_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Conv4_out_img_7_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    Conv4_out_img_7_ce0 : OUT STD_LOGIC;
    Conv4_out_img_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Conv4_out_img_8_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    Conv4_out_img_8_ce0 : OUT STD_LOGIC;
    Conv4_out_img_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Conv4_out_img_9_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    Conv4_out_img_9_ce0 : OUT STD_LOGIC;
    Conv4_out_img_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Conv4_out_img_10_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    Conv4_out_img_10_ce0 : OUT STD_LOGIC;
    Conv4_out_img_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Conv4_out_img_11_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    Conv4_out_img_11_ce0 : OUT STD_LOGIC;
    Conv4_out_img_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Conv4_out_img_12_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    Conv4_out_img_12_ce0 : OUT STD_LOGIC;
    Conv4_out_img_12_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of NN_NN_Pipeline_VITIS_LOOP_34_1_VITIS_LOOP_35_2_VITIS_LOOP_36_32 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv129_lc_1 : STD_LOGIC_VECTOR (128 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010011101100010011101100010011101100010011101100010011101100010100";
    constant ap_const_lv17_15180 : STD_LOGIC_VECTOR (16 downto 0) := "10101000110000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv8_E1 : STD_LOGIC_VECTOR (7 downto 0) := "11100001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv16_A9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010101001";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv17_E1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000011100001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln34_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln35_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_reg_783 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_reg_783_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_mid2_fu_420_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_3_mid2_reg_788 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_3_mid2_reg_788_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal j_3_mid2_reg_788_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal j_3_mid2_reg_788_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal j_3_mid2_reg_788_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln35_fu_436_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal cmp9_i39_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp9_i39_reg_804 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp9_i39_reg_804_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp9_i39_reg_804_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp9_i39_reg_804_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp9_i39_reg_804_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_1354_fu_454_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_1354_reg_809 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_1354_reg_809_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_1354_reg_809_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_1354_reg_809_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_1354_reg_809_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal cmp10_i40_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp10_i40_reg_814 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp10_i40_reg_814_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp10_i40_reg_814_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp10_i40_reg_814_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp10_i40_reg_814_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln35_fu_530_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln45_2_fu_557_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln45_2_reg_829 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln45_2_fu_584_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln41_fu_635_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_3_fu_120 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln36_fu_466_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_124 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal select_ln35_fu_428_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten59_fu_128 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln35_1_fu_478_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_6_fu_132 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal select_ln34_1_fu_515_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten72_fu_136 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal add_ln34_fu_361_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal Conv4_out_img_ce0_local : STD_LOGIC;
    signal Conv4_out_img_1_ce0_local : STD_LOGIC;
    signal Conv4_out_img_2_ce0_local : STD_LOGIC;
    signal Conv4_out_img_3_ce0_local : STD_LOGIC;
    signal Conv4_out_img_4_ce0_local : STD_LOGIC;
    signal Conv4_out_img_5_ce0_local : STD_LOGIC;
    signal Conv4_out_img_6_ce0_local : STD_LOGIC;
    signal Conv4_out_img_7_ce0_local : STD_LOGIC;
    signal Conv4_out_img_8_ce0_local : STD_LOGIC;
    signal Conv4_out_img_9_ce0_local : STD_LOGIC;
    signal Conv4_out_img_10_ce0_local : STD_LOGIC;
    signal Conv4_out_img_11_ce0_local : STD_LOGIC;
    signal Conv4_out_img_12_ce0_local : STD_LOGIC;
    signal Pad4_out_img_we0_local : STD_LOGIC;
    signal storemerge73_fu_717_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Pad4_out_img_ce0_local : STD_LOGIC;
    signal mul_ln45_fu_322_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln45_fu_322_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal icmp_ln36_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln34_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_fu_382_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln34_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln35_fu_408_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_fu_446_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln35_1_fu_472_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln34_1_fu_509_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln35_fu_530_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln35_fu_530_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_726_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln36_2_fu_541_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln45_1_fu_547_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln45_fu_553_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln45_fu_544_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln45_1_fu_566_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln45_fu_322_p2 : STD_LOGIC_VECTOR (128 downto 0);
    signal tmp_fu_574_p4 : STD_LOGIC_VECTOR (60 downto 0);
    signal icmp_ln39_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_1_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_1_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_fu_614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_735_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_cast38_fu_601_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln41_1_fu_630_p2 : STD_LOGIC_VECTOR (16 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln41_1_fu_630_p2 : signal is "no";
    signal icmp_ln45_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln45_3_fu_645_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_657_p27 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_657_p28 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln39_2_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_657_p29 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_726_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_726_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_735_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_735_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_735_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal grp_fu_735_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_735_p20 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln35_fu_530_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln45_fu_322_p00 : STD_LOGIC_VECTOR (128 downto 0);
    signal tmp_s_fu_657_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_657_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_657_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_657_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_657_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_657_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_657_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_657_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_657_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_657_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_657_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_657_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_657_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component NN_mul_64ns_66ns_129_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (65 downto 0);
        dout : OUT STD_LOGIC_VECTOR (128 downto 0) );
    end component;


    component NN_mul_9ns_9ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component NN_sparsemux_27_4_32_1_1_x IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (3 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (3 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (3 downto 0);
        din11_WIDTH : INTEGER;
        CASE12 : STD_LOGIC_VECTOR (3 downto 0);
        din12_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        def : IN STD_LOGIC_VECTOR (31 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component NN_mac_muladd_4ns_4ns_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component NN_mac_muladd_9ns_8ns_4ns_17_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component NN_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_64ns_66ns_129_1_1_U20144 : component NN_mul_64ns_66ns_129_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 66,
        dout_WIDTH => 129)
    port map (
        din0 => mul_ln45_fu_322_p0,
        din1 => mul_ln45_fu_322_p1,
        dout => mul_ln45_fu_322_p2);

    mul_9ns_9ns_16_1_1_U20145 : component NN_mul_9ns_9ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln35_fu_530_p0,
        din1 => mul_ln35_fu_530_p1,
        dout => mul_ln35_fu_530_p2);

    sparsemux_27_4_32_1_1_x_U20146 : component NN_sparsemux_27_4_32_1_1_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0001",
        din0_WIDTH => 32,
        CASE1 => "0010",
        din1_WIDTH => 32,
        CASE2 => "0011",
        din2_WIDTH => 32,
        CASE3 => "0100",
        din3_WIDTH => 32,
        CASE4 => "0101",
        din4_WIDTH => 32,
        CASE5 => "0110",
        din5_WIDTH => 32,
        CASE6 => "0111",
        din6_WIDTH => 32,
        CASE7 => "1000",
        din7_WIDTH => 32,
        CASE8 => "1001",
        din8_WIDTH => 32,
        CASE9 => "1010",
        din9_WIDTH => 32,
        CASE10 => "1011",
        din10_WIDTH => 32,
        CASE11 => "1100",
        din11_WIDTH => 32,
        CASE12 => "0000",
        din12_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => Conv4_out_img_q0,
        din1 => Conv4_out_img_1_q0,
        din2 => Conv4_out_img_2_q0,
        din3 => Conv4_out_img_3_q0,
        din4 => Conv4_out_img_4_q0,
        din5 => Conv4_out_img_5_q0,
        din6 => Conv4_out_img_6_q0,
        din7 => Conv4_out_img_7_q0,
        din8 => Conv4_out_img_8_q0,
        din9 => Conv4_out_img_9_q0,
        din10 => Conv4_out_img_10_q0,
        din11 => Conv4_out_img_11_q0,
        din12 => Conv4_out_img_12_q0,
        def => tmp_s_fu_657_p27,
        sel => tmp_s_fu_657_p28,
        dout => tmp_s_fu_657_p29);

    mac_muladd_4ns_4ns_16ns_16_4_1_U20147 : component NN_mac_muladd_4ns_4ns_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_726_p0,
        din1 => grp_fu_726_p1,
        din2 => mul_ln35_fu_530_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_726_p3);

    mac_muladd_9ns_8ns_4ns_17_4_1_U20148 : component NN_mac_muladd_9ns_8ns_4ns_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 8,
        din2_WIDTH => 4,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_735_p0,
        din1 => grp_fu_735_p1,
        din2 => grp_fu_735_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_735_p3);

    flow_control_loop_pipe_sequential_init_U : component NN_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    c_6_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    c_6_fu_132 <= ap_const_lv9_0;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    c_6_fu_132 <= select_ln34_1_fu_515_p3;
                end if;
            end if; 
        end if;
    end process;

    i_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_124 <= ap_const_lv4_0;
                elsif (((icmp_ln34_fu_355_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_124 <= select_ln35_fu_428_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten59_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten59_fu_128 <= ap_const_lv8_0;
                elsif (((icmp_ln34_fu_355_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten59_fu_128 <= select_ln35_1_fu_478_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten72_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten72_fu_136 <= ap_const_lv17_0;
                elsif (((icmp_ln34_fu_355_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten72_fu_136 <= add_ln34_fu_361_p2;
                end if;
            end if; 
        end if;
    end process;

    j_3_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_3_fu_120 <= ap_const_lv4_0;
                elsif (((icmp_ln34_fu_355_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    j_3_fu_120 <= add_ln36_fu_466_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln45_2_reg_829 <= add_ln45_2_fu_557_p2;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                cmp10_i40_reg_814_pp0_iter2_reg <= cmp10_i40_reg_814;
                cmp10_i40_reg_814_pp0_iter3_reg <= cmp10_i40_reg_814_pp0_iter2_reg;
                cmp10_i40_reg_814_pp0_iter4_reg <= cmp10_i40_reg_814_pp0_iter3_reg;
                cmp10_i40_reg_814_pp0_iter5_reg <= cmp10_i40_reg_814_pp0_iter4_reg;
                cmp9_i39_reg_804_pp0_iter2_reg <= cmp9_i39_reg_804;
                cmp9_i39_reg_804_pp0_iter3_reg <= cmp9_i39_reg_804_pp0_iter2_reg;
                cmp9_i39_reg_804_pp0_iter4_reg <= cmp9_i39_reg_804_pp0_iter3_reg;
                cmp9_i39_reg_804_pp0_iter5_reg <= cmp9_i39_reg_804_pp0_iter4_reg;
                empty_1354_reg_809_pp0_iter2_reg <= empty_1354_reg_809;
                empty_1354_reg_809_pp0_iter3_reg <= empty_1354_reg_809_pp0_iter2_reg;
                empty_1354_reg_809_pp0_iter4_reg <= empty_1354_reg_809_pp0_iter3_reg;
                empty_1354_reg_809_pp0_iter5_reg <= empty_1354_reg_809_pp0_iter4_reg;
                icmp_ln35_reg_783_pp0_iter2_reg <= icmp_ln35_reg_783;
                j_3_mid2_reg_788_pp0_iter2_reg <= j_3_mid2_reg_788;
                j_3_mid2_reg_788_pp0_iter3_reg <= j_3_mid2_reg_788_pp0_iter2_reg;
                j_3_mid2_reg_788_pp0_iter4_reg <= j_3_mid2_reg_788_pp0_iter3_reg;
                j_3_mid2_reg_788_pp0_iter5_reg <= j_3_mid2_reg_788_pp0_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                cmp10_i40_reg_814 <= cmp10_i40_fu_460_p2;
                cmp9_i39_reg_804 <= cmp9_i39_fu_440_p2;
                empty_1354_reg_809 <= empty_1354_fu_454_p2;
                icmp_ln35_reg_783 <= icmp_ln35_fu_376_p2;
                j_3_mid2_reg_788 <= j_3_mid2_fu_420_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Conv4_out_img_10_address0 <= zext_ln45_2_fu_584_p1(13 - 1 downto 0);
    Conv4_out_img_10_ce0 <= Conv4_out_img_10_ce0_local;

    Conv4_out_img_10_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            Conv4_out_img_10_ce0_local <= ap_const_logic_1;
        else 
            Conv4_out_img_10_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    Conv4_out_img_11_address0 <= zext_ln45_2_fu_584_p1(13 - 1 downto 0);
    Conv4_out_img_11_ce0 <= Conv4_out_img_11_ce0_local;

    Conv4_out_img_11_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            Conv4_out_img_11_ce0_local <= ap_const_logic_1;
        else 
            Conv4_out_img_11_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    Conv4_out_img_12_address0 <= zext_ln45_2_fu_584_p1(13 - 1 downto 0);
    Conv4_out_img_12_ce0 <= Conv4_out_img_12_ce0_local;

    Conv4_out_img_12_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            Conv4_out_img_12_ce0_local <= ap_const_logic_1;
        else 
            Conv4_out_img_12_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    Conv4_out_img_1_address0 <= zext_ln45_2_fu_584_p1(13 - 1 downto 0);
    Conv4_out_img_1_ce0 <= Conv4_out_img_1_ce0_local;

    Conv4_out_img_1_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            Conv4_out_img_1_ce0_local <= ap_const_logic_1;
        else 
            Conv4_out_img_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    Conv4_out_img_2_address0 <= zext_ln45_2_fu_584_p1(13 - 1 downto 0);
    Conv4_out_img_2_ce0 <= Conv4_out_img_2_ce0_local;

    Conv4_out_img_2_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            Conv4_out_img_2_ce0_local <= ap_const_logic_1;
        else 
            Conv4_out_img_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    Conv4_out_img_3_address0 <= zext_ln45_2_fu_584_p1(13 - 1 downto 0);
    Conv4_out_img_3_ce0 <= Conv4_out_img_3_ce0_local;

    Conv4_out_img_3_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            Conv4_out_img_3_ce0_local <= ap_const_logic_1;
        else 
            Conv4_out_img_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    Conv4_out_img_4_address0 <= zext_ln45_2_fu_584_p1(13 - 1 downto 0);
    Conv4_out_img_4_ce0 <= Conv4_out_img_4_ce0_local;

    Conv4_out_img_4_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            Conv4_out_img_4_ce0_local <= ap_const_logic_1;
        else 
            Conv4_out_img_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    Conv4_out_img_5_address0 <= zext_ln45_2_fu_584_p1(13 - 1 downto 0);
    Conv4_out_img_5_ce0 <= Conv4_out_img_5_ce0_local;

    Conv4_out_img_5_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            Conv4_out_img_5_ce0_local <= ap_const_logic_1;
        else 
            Conv4_out_img_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    Conv4_out_img_6_address0 <= zext_ln45_2_fu_584_p1(13 - 1 downto 0);
    Conv4_out_img_6_ce0 <= Conv4_out_img_6_ce0_local;

    Conv4_out_img_6_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            Conv4_out_img_6_ce0_local <= ap_const_logic_1;
        else 
            Conv4_out_img_6_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    Conv4_out_img_7_address0 <= zext_ln45_2_fu_584_p1(13 - 1 downto 0);
    Conv4_out_img_7_ce0 <= Conv4_out_img_7_ce0_local;

    Conv4_out_img_7_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            Conv4_out_img_7_ce0_local <= ap_const_logic_1;
        else 
            Conv4_out_img_7_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    Conv4_out_img_8_address0 <= zext_ln45_2_fu_584_p1(13 - 1 downto 0);
    Conv4_out_img_8_ce0 <= Conv4_out_img_8_ce0_local;

    Conv4_out_img_8_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            Conv4_out_img_8_ce0_local <= ap_const_logic_1;
        else 
            Conv4_out_img_8_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    Conv4_out_img_9_address0 <= zext_ln45_2_fu_584_p1(13 - 1 downto 0);
    Conv4_out_img_9_ce0 <= Conv4_out_img_9_ce0_local;

    Conv4_out_img_9_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            Conv4_out_img_9_ce0_local <= ap_const_logic_1;
        else 
            Conv4_out_img_9_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    Conv4_out_img_address0 <= zext_ln45_2_fu_584_p1(13 - 1 downto 0);
    Conv4_out_img_ce0 <= Conv4_out_img_ce0_local;

    Conv4_out_img_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            Conv4_out_img_ce0_local <= ap_const_logic_1;
        else 
            Conv4_out_img_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    Pad4_out_img_address0 <= zext_ln41_fu_635_p1(17 - 1 downto 0);
    Pad4_out_img_ce0 <= Pad4_out_img_ce0_local;

    Pad4_out_img_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            Pad4_out_img_ce0_local <= ap_const_logic_1;
        else 
            Pad4_out_img_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    Pad4_out_img_d0 <= storemerge73_fu_717_p3;
    Pad4_out_img_we0 <= Pad4_out_img_we0_local;

    Pad4_out_img_we0_local_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            Pad4_out_img_we0_local <= ap_const_logic_1;
        else 
            Pad4_out_img_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln34_1_fu_509_p2 <= std_logic_vector(unsigned(c_6_fu_132) + unsigned(ap_const_lv9_1));
    add_ln34_fu_361_p2 <= std_logic_vector(unsigned(indvar_flatten72_fu_136) + unsigned(ap_const_lv17_1));
    add_ln35_1_fu_472_p2 <= std_logic_vector(unsigned(indvar_flatten59_fu_128) + unsigned(ap_const_lv8_1));
    add_ln35_fu_408_p2 <= std_logic_vector(unsigned(select_ln34_fu_382_p3) + unsigned(ap_const_lv4_1));
    add_ln36_fu_466_p2 <= std_logic_vector(unsigned(j_3_mid2_fu_420_p3) + unsigned(ap_const_lv4_1));
    add_ln41_1_fu_630_p2 <= std_logic_vector(unsigned(grp_fu_735_p3) + unsigned(p_cast38_fu_601_p1));
    add_ln45_1_fu_547_p2 <= std_logic_vector(unsigned(zext_ln36_2_fu_541_p1) + unsigned(ap_const_lv5_12));
    add_ln45_2_fu_557_p2 <= std_logic_vector(signed(sext_ln45_fu_553_p1) + signed(zext_ln45_fu_544_p1));
    add_ln45_3_fu_645_p2 <= std_logic_vector(unsigned(j_3_mid2_reg_788_pp0_iter5_reg) + unsigned(ap_const_lv4_3));
    and_ln34_fu_402_p2 <= (xor_ln34_fu_390_p2 and icmp_ln36_fu_396_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln34_fu_355_p2)
    begin
        if (((icmp_ln34_fu_355_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    cmp10_i40_fu_460_p2 <= "1" when (unsigned(select_ln35_fu_428_p3) > unsigned(ap_const_lv4_D)) else "0";
    cmp9_i39_fu_440_p2 <= "1" when (select_ln35_fu_428_p3 = ap_const_lv4_0) else "0";
    empty_1354_fu_454_p2 <= std_logic_vector(unsigned(p_shl_fu_446_p3) - unsigned(zext_ln35_fu_436_p1));
    empty_fu_414_p2 <= (icmp_ln35_fu_376_p2 or and_ln34_fu_402_p2);
    grp_fu_726_p0 <= zext_ln35_fu_436_p1(4 - 1 downto 0);
    grp_fu_726_p1 <= ap_const_lv8_D(4 - 1 downto 0);
    grp_fu_735_p0 <= grp_fu_735_p00(9 - 1 downto 0);
    grp_fu_735_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_1_fu_515_p3),17));
    grp_fu_735_p1 <= ap_const_lv17_E1(8 - 1 downto 0);
    grp_fu_735_p2 <= grp_fu_735_p20(4 - 1 downto 0);
    grp_fu_735_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_3_mid2_reg_788_pp0_iter4_reg),17));
    icmp_ln34_fu_355_p2 <= "1" when (indvar_flatten72_fu_136 = ap_const_lv17_15180) else "0";
    icmp_ln35_fu_376_p2 <= "1" when (indvar_flatten59_fu_128 = ap_const_lv8_E1) else "0";
    icmp_ln36_fu_396_p2 <= "1" when (j_3_fu_120 = ap_const_lv4_F) else "0";
    icmp_ln39_1_fu_609_p2 <= "1" when (unsigned(j_3_mid2_reg_788_pp0_iter5_reg) > unsigned(ap_const_lv4_D)) else "0";
    icmp_ln39_fu_604_p2 <= "1" when (j_3_mid2_reg_788_pp0_iter5_reg = ap_const_lv4_0) else "0";
    icmp_ln45_fu_640_p2 <= "1" when (unsigned(j_3_mid2_reg_788_pp0_iter5_reg) < unsigned(ap_const_lv4_D)) else "0";
    j_3_mid2_fu_420_p3 <= 
        ap_const_lv4_0 when (empty_fu_414_p2(0) = '1') else 
        j_3_fu_120;
    mul_ln35_fu_530_p0 <= mul_ln35_fu_530_p00(9 - 1 downto 0);
    mul_ln35_fu_530_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_1_fu_515_p3),16));
    mul_ln35_fu_530_p1 <= ap_const_lv16_A9(9 - 1 downto 0);
    mul_ln45_fu_322_p0 <= mul_ln45_fu_322_p00(64 - 1 downto 0);
    mul_ln45_fu_322_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln45_1_fu_566_p1),129));
    mul_ln45_fu_322_p1 <= ap_const_lv129_lc_1(66 - 1 downto 0);
    or_ln39_1_fu_618_p2 <= (icmp_ln39_fu_604_p2 or icmp_ln39_1_fu_609_p2);
    or_ln39_2_fu_624_p2 <= (or_ln39_fu_614_p2 or or_ln39_1_fu_618_p2);
    or_ln39_fu_614_p2 <= (cmp9_i39_reg_804_pp0_iter5_reg or cmp10_i40_reg_814_pp0_iter5_reg);
    p_cast38_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_1354_reg_809_pp0_iter5_reg),17));
    p_shl_fu_446_p3 <= (select_ln35_fu_428_p3 & ap_const_lv4_0);
    select_ln34_1_fu_515_p3 <= 
        add_ln34_1_fu_509_p2 when (icmp_ln35_reg_783_pp0_iter2_reg(0) = '1') else 
        c_6_fu_132;
    select_ln34_fu_382_p3 <= 
        ap_const_lv4_0 when (icmp_ln35_fu_376_p2(0) = '1') else 
        i_fu_124;
    select_ln35_1_fu_478_p3 <= 
        ap_const_lv8_1 when (icmp_ln35_fu_376_p2(0) = '1') else 
        add_ln35_1_fu_472_p2;
    select_ln35_fu_428_p3 <= 
        add_ln35_fu_408_p2 when (and_ln34_fu_402_p2(0) = '1') else 
        select_ln34_fu_382_p3;
        sext_ln45_1_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln45_2_reg_829),64));

        sext_ln45_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln45_1_fu_547_p2),17));

    storemerge73_fu_717_p3 <= 
        ap_const_lv32_0 when (or_ln39_2_fu_624_p2(0) = '1') else 
        tmp_s_fu_657_p29;
    tmp_fu_574_p4 <= mul_ln45_fu_322_p2(128 downto 68);
    tmp_s_fu_657_p27 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_s_fu_657_p28 <= 
        j_3_mid2_reg_788_pp0_iter5_reg when (icmp_ln45_fu_640_p2(0) = '1') else 
        add_ln45_3_fu_645_p2;
    xor_ln34_fu_390_p2 <= (icmp_ln35_fu_376_p2 xor ap_const_lv1_1);
    zext_ln35_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_fu_428_p3),8));
    zext_ln36_2_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_3_mid2_reg_788_pp0_iter3_reg),5));
    zext_ln41_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_1_fu_630_p2),64));
    zext_ln45_2_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_574_p4),64));
    zext_ln45_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_726_p3),17));
end behav;
