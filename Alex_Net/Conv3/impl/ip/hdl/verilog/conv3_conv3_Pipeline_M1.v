// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module conv3_conv3_Pipeline_M1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem0_0_AWVALID,
        m_axi_gmem0_0_AWREADY,
        m_axi_gmem0_0_AWADDR,
        m_axi_gmem0_0_AWID,
        m_axi_gmem0_0_AWLEN,
        m_axi_gmem0_0_AWSIZE,
        m_axi_gmem0_0_AWBURST,
        m_axi_gmem0_0_AWLOCK,
        m_axi_gmem0_0_AWCACHE,
        m_axi_gmem0_0_AWPROT,
        m_axi_gmem0_0_AWQOS,
        m_axi_gmem0_0_AWREGION,
        m_axi_gmem0_0_AWUSER,
        m_axi_gmem0_0_WVALID,
        m_axi_gmem0_0_WREADY,
        m_axi_gmem0_0_WDATA,
        m_axi_gmem0_0_WSTRB,
        m_axi_gmem0_0_WLAST,
        m_axi_gmem0_0_WID,
        m_axi_gmem0_0_WUSER,
        m_axi_gmem0_0_ARVALID,
        m_axi_gmem0_0_ARREADY,
        m_axi_gmem0_0_ARADDR,
        m_axi_gmem0_0_ARID,
        m_axi_gmem0_0_ARLEN,
        m_axi_gmem0_0_ARSIZE,
        m_axi_gmem0_0_ARBURST,
        m_axi_gmem0_0_ARLOCK,
        m_axi_gmem0_0_ARCACHE,
        m_axi_gmem0_0_ARPROT,
        m_axi_gmem0_0_ARQOS,
        m_axi_gmem0_0_ARREGION,
        m_axi_gmem0_0_ARUSER,
        m_axi_gmem0_0_RVALID,
        m_axi_gmem0_0_RREADY,
        m_axi_gmem0_0_RDATA,
        m_axi_gmem0_0_RLAST,
        m_axi_gmem0_0_RID,
        m_axi_gmem0_0_RFIFONUM,
        m_axi_gmem0_0_RUSER,
        m_axi_gmem0_0_RRESP,
        m_axi_gmem0_0_BVALID,
        m_axi_gmem0_0_BREADY,
        m_axi_gmem0_0_BRESP,
        m_axi_gmem0_0_BID,
        m_axi_gmem0_0_BUSER,
        sext_ln83,
        add1804613_reload,
        add180_14626_reload,
        add180_24639_reload,
        add180_34652_reload,
        add180_44665_reload,
        add180_54678_reload,
        add180_64691_reload,
        add180_74704_reload,
        add180_84717_reload,
        add180_94730_reload,
        add180_104743_reload,
        add180_114756_reload,
        add180_124769_reload,
        empty,
        add180_138784614_reload,
        add180_1_14627_reload,
        add180_2_14640_reload,
        add180_3_14653_reload,
        add180_4_14666_reload,
        add180_5_14679_reload,
        add180_6_14692_reload,
        add180_7_14705_reload,
        add180_8_14718_reload,
        add180_9_14731_reload,
        add180_10_14744_reload,
        add180_11_14757_reload,
        add180_12_14770_reload,
        add180_238954615_reload,
        add180_1_24628_reload,
        add180_2_24641_reload,
        add180_3_24654_reload,
        add180_4_24667_reload,
        add180_5_24680_reload,
        add180_6_24693_reload,
        add180_7_24706_reload,
        add180_8_24719_reload,
        add180_9_24732_reload,
        add180_10_24745_reload,
        add180_11_24758_reload,
        add180_12_24771_reload,
        add180_339124616_reload,
        add180_1_34629_reload,
        add180_2_34642_reload,
        add180_3_34655_reload,
        add180_4_34668_reload,
        add180_5_34681_reload,
        add180_6_34694_reload,
        add180_7_34707_reload,
        add180_8_34720_reload,
        add180_9_34733_reload,
        add180_10_34746_reload,
        add180_11_34759_reload,
        add180_12_34772_reload,
        add180_439294617_reload,
        add180_1_44630_reload,
        add180_2_44643_reload,
        add180_3_44656_reload,
        add180_4_44669_reload,
        add180_5_44682_reload,
        add180_6_44695_reload,
        add180_7_44708_reload,
        add180_8_44721_reload,
        add180_9_44734_reload,
        add180_10_44747_reload,
        add180_11_44760_reload,
        add180_12_44773_reload,
        add180_539464618_reload,
        add180_1_54631_reload,
        add180_2_54644_reload,
        add180_3_54657_reload,
        add180_4_54670_reload,
        add180_5_54683_reload,
        add180_6_54696_reload,
        add180_7_54709_reload,
        add180_8_54722_reload,
        add180_9_54735_reload,
        add180_10_54748_reload,
        add180_11_54761_reload,
        add180_12_54774_reload,
        add180_639634619_reload,
        add180_1_64632_reload,
        add180_2_64645_reload,
        add180_3_64658_reload,
        add180_4_64671_reload,
        add180_5_64684_reload,
        add180_6_64697_reload,
        add180_7_64710_reload,
        add180_8_64723_reload,
        add180_9_64736_reload,
        add180_10_64749_reload,
        add180_11_64762_reload,
        add180_12_64775_reload,
        add180_739804620_reload,
        add180_1_74633_reload,
        add180_2_74646_reload,
        add180_3_74659_reload,
        add180_4_74672_reload,
        add180_5_74685_reload,
        add180_6_74698_reload,
        add180_7_74711_reload,
        add180_8_74724_reload,
        add180_9_74737_reload,
        add180_10_74750_reload,
        add180_11_74763_reload,
        add180_12_74776_reload,
        add180_839974621_reload,
        add180_1_84634_reload,
        add180_2_84647_reload,
        add180_3_84660_reload,
        add180_4_84673_reload,
        add180_5_84686_reload,
        add180_6_84699_reload,
        add180_7_84712_reload,
        add180_8_84725_reload,
        add180_9_84738_reload,
        add180_10_84751_reload,
        add180_11_84764_reload,
        add180_12_84777_reload,
        add180_940144622_reload,
        add180_1_94635_reload,
        add180_2_94648_reload,
        add180_3_94661_reload,
        add180_4_94674_reload,
        add180_5_94687_reload,
        add180_6_94700_reload,
        add180_7_94713_reload,
        add180_8_94726_reload,
        add180_9_94739_reload,
        add180_10_94752_reload,
        add180_11_94765_reload,
        add180_12_94778_reload,
        add180_1040314623_reload,
        add180_1_104636_reload,
        add180_2_104649_reload,
        add180_3_104662_reload,
        add180_4_104675_reload,
        add180_5_104688_reload,
        add180_6_104701_reload,
        add180_7_104714_reload,
        add180_8_104727_reload,
        add180_9_104740_reload,
        add180_10_104753_reload,
        add180_11_104766_reload,
        add180_12_104779_reload,
        add180_1140484624_reload,
        add180_1_114637_reload,
        add180_2_114650_reload,
        add180_3_114663_reload,
        add180_4_114676_reload,
        add180_5_114689_reload,
        add180_6_114702_reload,
        add180_7_114715_reload,
        add180_8_114728_reload,
        add180_9_114741_reload,
        add180_10_114754_reload,
        add180_11_114767_reload,
        add180_12_114780_reload,
        add180_1240654625_reload,
        add180_1_124638_reload,
        add180_2_124651_reload,
        add180_3_124664_reload,
        add180_4_124677_reload,
        add180_5_124690_reload,
        add180_6_124703_reload,
        add180_7_124716_reload,
        add180_8_124729_reload,
        add180_9_124742_reload,
        add180_10_124755_reload,
        add180_11_124768_reload,
        add180_12_124790_reload,
        grp_fu_10957_p_din0,
        grp_fu_10957_p_din1,
        grp_fu_10957_p_opcode,
        grp_fu_10957_p_dout0,
        grp_fu_10957_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 13'd1;
parameter    ap_ST_fsm_pp0_stage1 = 13'd2;
parameter    ap_ST_fsm_pp0_stage2 = 13'd4;
parameter    ap_ST_fsm_pp0_stage3 = 13'd8;
parameter    ap_ST_fsm_pp0_stage4 = 13'd16;
parameter    ap_ST_fsm_pp0_stage5 = 13'd32;
parameter    ap_ST_fsm_pp0_stage6 = 13'd64;
parameter    ap_ST_fsm_pp0_stage7 = 13'd128;
parameter    ap_ST_fsm_pp0_stage8 = 13'd256;
parameter    ap_ST_fsm_pp0_stage9 = 13'd512;
parameter    ap_ST_fsm_pp0_stage10 = 13'd1024;
parameter    ap_ST_fsm_pp0_stage11 = 13'd2048;
parameter    ap_ST_fsm_pp0_stage12 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem0_0_AWVALID;
input   m_axi_gmem0_0_AWREADY;
output  [63:0] m_axi_gmem0_0_AWADDR;
output  [0:0] m_axi_gmem0_0_AWID;
output  [31:0] m_axi_gmem0_0_AWLEN;
output  [2:0] m_axi_gmem0_0_AWSIZE;
output  [1:0] m_axi_gmem0_0_AWBURST;
output  [1:0] m_axi_gmem0_0_AWLOCK;
output  [3:0] m_axi_gmem0_0_AWCACHE;
output  [2:0] m_axi_gmem0_0_AWPROT;
output  [3:0] m_axi_gmem0_0_AWQOS;
output  [3:0] m_axi_gmem0_0_AWREGION;
output  [0:0] m_axi_gmem0_0_AWUSER;
output   m_axi_gmem0_0_WVALID;
input   m_axi_gmem0_0_WREADY;
output  [31:0] m_axi_gmem0_0_WDATA;
output  [3:0] m_axi_gmem0_0_WSTRB;
output   m_axi_gmem0_0_WLAST;
output  [0:0] m_axi_gmem0_0_WID;
output  [0:0] m_axi_gmem0_0_WUSER;
output   m_axi_gmem0_0_ARVALID;
input   m_axi_gmem0_0_ARREADY;
output  [63:0] m_axi_gmem0_0_ARADDR;
output  [0:0] m_axi_gmem0_0_ARID;
output  [31:0] m_axi_gmem0_0_ARLEN;
output  [2:0] m_axi_gmem0_0_ARSIZE;
output  [1:0] m_axi_gmem0_0_ARBURST;
output  [1:0] m_axi_gmem0_0_ARLOCK;
output  [3:0] m_axi_gmem0_0_ARCACHE;
output  [2:0] m_axi_gmem0_0_ARPROT;
output  [3:0] m_axi_gmem0_0_ARQOS;
output  [3:0] m_axi_gmem0_0_ARREGION;
output  [0:0] m_axi_gmem0_0_ARUSER;
input   m_axi_gmem0_0_RVALID;
output   m_axi_gmem0_0_RREADY;
input  [31:0] m_axi_gmem0_0_RDATA;
input   m_axi_gmem0_0_RLAST;
input  [0:0] m_axi_gmem0_0_RID;
input  [8:0] m_axi_gmem0_0_RFIFONUM;
input  [0:0] m_axi_gmem0_0_RUSER;
input  [1:0] m_axi_gmem0_0_RRESP;
input   m_axi_gmem0_0_BVALID;
output   m_axi_gmem0_0_BREADY;
input  [1:0] m_axi_gmem0_0_BRESP;
input  [0:0] m_axi_gmem0_0_BID;
input  [0:0] m_axi_gmem0_0_BUSER;
input  [61:0] sext_ln83;
input  [31:0] add1804613_reload;
input  [31:0] add180_14626_reload;
input  [31:0] add180_24639_reload;
input  [31:0] add180_34652_reload;
input  [31:0] add180_44665_reload;
input  [31:0] add180_54678_reload;
input  [31:0] add180_64691_reload;
input  [31:0] add180_74704_reload;
input  [31:0] add180_84717_reload;
input  [31:0] add180_94730_reload;
input  [31:0] add180_104743_reload;
input  [31:0] add180_114756_reload;
input  [31:0] add180_124769_reload;
input  [31:0] empty;
input  [31:0] add180_138784614_reload;
input  [31:0] add180_1_14627_reload;
input  [31:0] add180_2_14640_reload;
input  [31:0] add180_3_14653_reload;
input  [31:0] add180_4_14666_reload;
input  [31:0] add180_5_14679_reload;
input  [31:0] add180_6_14692_reload;
input  [31:0] add180_7_14705_reload;
input  [31:0] add180_8_14718_reload;
input  [31:0] add180_9_14731_reload;
input  [31:0] add180_10_14744_reload;
input  [31:0] add180_11_14757_reload;
input  [31:0] add180_12_14770_reload;
input  [31:0] add180_238954615_reload;
input  [31:0] add180_1_24628_reload;
input  [31:0] add180_2_24641_reload;
input  [31:0] add180_3_24654_reload;
input  [31:0] add180_4_24667_reload;
input  [31:0] add180_5_24680_reload;
input  [31:0] add180_6_24693_reload;
input  [31:0] add180_7_24706_reload;
input  [31:0] add180_8_24719_reload;
input  [31:0] add180_9_24732_reload;
input  [31:0] add180_10_24745_reload;
input  [31:0] add180_11_24758_reload;
input  [31:0] add180_12_24771_reload;
input  [31:0] add180_339124616_reload;
input  [31:0] add180_1_34629_reload;
input  [31:0] add180_2_34642_reload;
input  [31:0] add180_3_34655_reload;
input  [31:0] add180_4_34668_reload;
input  [31:0] add180_5_34681_reload;
input  [31:0] add180_6_34694_reload;
input  [31:0] add180_7_34707_reload;
input  [31:0] add180_8_34720_reload;
input  [31:0] add180_9_34733_reload;
input  [31:0] add180_10_34746_reload;
input  [31:0] add180_11_34759_reload;
input  [31:0] add180_12_34772_reload;
input  [31:0] add180_439294617_reload;
input  [31:0] add180_1_44630_reload;
input  [31:0] add180_2_44643_reload;
input  [31:0] add180_3_44656_reload;
input  [31:0] add180_4_44669_reload;
input  [31:0] add180_5_44682_reload;
input  [31:0] add180_6_44695_reload;
input  [31:0] add180_7_44708_reload;
input  [31:0] add180_8_44721_reload;
input  [31:0] add180_9_44734_reload;
input  [31:0] add180_10_44747_reload;
input  [31:0] add180_11_44760_reload;
input  [31:0] add180_12_44773_reload;
input  [31:0] add180_539464618_reload;
input  [31:0] add180_1_54631_reload;
input  [31:0] add180_2_54644_reload;
input  [31:0] add180_3_54657_reload;
input  [31:0] add180_4_54670_reload;
input  [31:0] add180_5_54683_reload;
input  [31:0] add180_6_54696_reload;
input  [31:0] add180_7_54709_reload;
input  [31:0] add180_8_54722_reload;
input  [31:0] add180_9_54735_reload;
input  [31:0] add180_10_54748_reload;
input  [31:0] add180_11_54761_reload;
input  [31:0] add180_12_54774_reload;
input  [31:0] add180_639634619_reload;
input  [31:0] add180_1_64632_reload;
input  [31:0] add180_2_64645_reload;
input  [31:0] add180_3_64658_reload;
input  [31:0] add180_4_64671_reload;
input  [31:0] add180_5_64684_reload;
input  [31:0] add180_6_64697_reload;
input  [31:0] add180_7_64710_reload;
input  [31:0] add180_8_64723_reload;
input  [31:0] add180_9_64736_reload;
input  [31:0] add180_10_64749_reload;
input  [31:0] add180_11_64762_reload;
input  [31:0] add180_12_64775_reload;
input  [31:0] add180_739804620_reload;
input  [31:0] add180_1_74633_reload;
input  [31:0] add180_2_74646_reload;
input  [31:0] add180_3_74659_reload;
input  [31:0] add180_4_74672_reload;
input  [31:0] add180_5_74685_reload;
input  [31:0] add180_6_74698_reload;
input  [31:0] add180_7_74711_reload;
input  [31:0] add180_8_74724_reload;
input  [31:0] add180_9_74737_reload;
input  [31:0] add180_10_74750_reload;
input  [31:0] add180_11_74763_reload;
input  [31:0] add180_12_74776_reload;
input  [31:0] add180_839974621_reload;
input  [31:0] add180_1_84634_reload;
input  [31:0] add180_2_84647_reload;
input  [31:0] add180_3_84660_reload;
input  [31:0] add180_4_84673_reload;
input  [31:0] add180_5_84686_reload;
input  [31:0] add180_6_84699_reload;
input  [31:0] add180_7_84712_reload;
input  [31:0] add180_8_84725_reload;
input  [31:0] add180_9_84738_reload;
input  [31:0] add180_10_84751_reload;
input  [31:0] add180_11_84764_reload;
input  [31:0] add180_12_84777_reload;
input  [31:0] add180_940144622_reload;
input  [31:0] add180_1_94635_reload;
input  [31:0] add180_2_94648_reload;
input  [31:0] add180_3_94661_reload;
input  [31:0] add180_4_94674_reload;
input  [31:0] add180_5_94687_reload;
input  [31:0] add180_6_94700_reload;
input  [31:0] add180_7_94713_reload;
input  [31:0] add180_8_94726_reload;
input  [31:0] add180_9_94739_reload;
input  [31:0] add180_10_94752_reload;
input  [31:0] add180_11_94765_reload;
input  [31:0] add180_12_94778_reload;
input  [31:0] add180_1040314623_reload;
input  [31:0] add180_1_104636_reload;
input  [31:0] add180_2_104649_reload;
input  [31:0] add180_3_104662_reload;
input  [31:0] add180_4_104675_reload;
input  [31:0] add180_5_104688_reload;
input  [31:0] add180_6_104701_reload;
input  [31:0] add180_7_104714_reload;
input  [31:0] add180_8_104727_reload;
input  [31:0] add180_9_104740_reload;
input  [31:0] add180_10_104753_reload;
input  [31:0] add180_11_104766_reload;
input  [31:0] add180_12_104779_reload;
input  [31:0] add180_1140484624_reload;
input  [31:0] add180_1_114637_reload;
input  [31:0] add180_2_114650_reload;
input  [31:0] add180_3_114663_reload;
input  [31:0] add180_4_114676_reload;
input  [31:0] add180_5_114689_reload;
input  [31:0] add180_6_114702_reload;
input  [31:0] add180_7_114715_reload;
input  [31:0] add180_8_114728_reload;
input  [31:0] add180_9_114741_reload;
input  [31:0] add180_10_114754_reload;
input  [31:0] add180_11_114767_reload;
input  [31:0] add180_12_114780_reload;
input  [31:0] add180_1240654625_reload;
input  [31:0] add180_1_124638_reload;
input  [31:0] add180_2_124651_reload;
input  [31:0] add180_3_124664_reload;
input  [31:0] add180_4_124677_reload;
input  [31:0] add180_5_124690_reload;
input  [31:0] add180_6_124703_reload;
input  [31:0] add180_7_124716_reload;
input  [31:0] add180_8_124729_reload;
input  [31:0] add180_9_124742_reload;
input  [31:0] add180_10_124755_reload;
input  [31:0] add180_11_124768_reload;
input  [31:0] add180_12_124790_reload;
output  [31:0] grp_fu_10957_p_din0;
output  [31:0] grp_fu_10957_p_din1;
output  [1:0] grp_fu_10957_p_opcode;
input  [31:0] grp_fu_10957_p_dout0;
output   grp_fu_10957_p_ce;

reg ap_idle;
reg m_axi_gmem0_0_WVALID;
reg[31:0] m_axi_gmem0_0_WDATA;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage6;
reg    ap_block_pp0_stage6_subdone;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [0:0] icmp_ln144_reg_3055;
reg    ap_condition_exit_pp0_iter0_stage6;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage12;
reg    ap_block_state13_io_grp6;
reg    ap_block_pp0_stage12_subdone;
reg    gmem0_blk_n_W;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7_grp1;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_pp0_stage8_grp2;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_pp0_stage9_grp3;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_pp0_stage10_grp4;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_pp0_stage11_grp5;
wire    ap_block_pp0_stage12_grp6;
wire    ap_block_pp0_stage0_grp7;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_grp8;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_grp9;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3_grp10;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4_grp11;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5_grp12;
wire    ap_block_pp0_stage6_grp13;
reg   [31:0] reg_1569;
wire    ap_block_pp0_stage4_11001_grp0;
reg    ap_block_pp0_stage4_subdone_grp0_done_reg;
wire    ap_block_pp0_stage4_subdone_grp0;
reg    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage6_11001_grp0;
reg    ap_block_pp0_stage6_subdone_grp0_done_reg;
wire    ap_block_pp0_stage6_subdone_grp0;
wire    ap_block_pp0_stage8_11001_grp0;
reg    ap_block_pp0_stage8_subdone_grp0_done_reg;
wire    ap_block_pp0_stage8_subdone_grp0;
reg    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage10_11001_grp0;
reg    ap_block_pp0_stage10_subdone_grp0_done_reg;
wire    ap_block_pp0_stage10_subdone_grp0;
reg    ap_block_pp0_stage10_subdone;
wire    ap_block_pp0_stage12_11001_grp0;
reg    ap_block_pp0_stage12_subdone_grp0_done_reg;
wire    ap_block_pp0_stage12_subdone_grp0;
wire    ap_block_pp0_stage1_11001_grp0;
reg    ap_block_pp0_stage1_subdone_grp0_done_reg;
wire    ap_block_pp0_stage1_subdone_grp0;
reg    ap_block_pp0_stage1_subdone;
reg   [31:0] reg_1574;
wire    ap_block_pp0_stage5_11001_grp0;
reg    ap_block_pp0_stage5_subdone_grp0_done_reg;
wire    ap_block_pp0_stage5_subdone_grp0;
reg    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage7_11001_grp0;
reg    ap_block_pp0_stage7_subdone_grp0_done_reg;
wire    ap_block_pp0_stage7_subdone_grp0;
reg    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage9_11001_grp0;
reg    ap_block_pp0_stage9_subdone_grp0_done_reg;
wire    ap_block_pp0_stage9_subdone_grp0;
reg    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage11_11001_grp0;
reg    ap_block_pp0_stage11_subdone_grp0_done_reg;
wire    ap_block_pp0_stage11_subdone_grp0;
reg    ap_block_pp0_stage11_subdone;
wire    ap_block_pp0_stage0_11001_grp0;
reg    ap_block_pp0_stage0_subdone_grp0_done_reg;
wire    ap_block_pp0_stage0_subdone_grp0;
reg    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage2_11001_grp0;
reg    ap_block_pp0_stage2_subdone_grp0_done_reg;
wire    ap_block_pp0_stage2_subdone_grp0;
reg    ap_block_pp0_stage2_subdone;
wire   [0:0] icmp_ln144_fu_1591_p2;
reg    ap_block_pp0_stage0_11001;
reg    ap_block_pp0_stage0_11001_grp7;
wire   [31:0] tmp_fu_1609_p29;
reg   [31:0] tmp_reg_3076;
wire   [31:0] tmp_1_fu_1669_p29;
reg   [31:0] tmp_1_reg_3081;
wire   [31:0] tmp_2_fu_1729_p29;
reg   [31:0] tmp_2_reg_3086;
wire   [31:0] tmp_3_fu_1789_p29;
reg   [31:0] tmp_3_reg_3091;
wire   [31:0] tmp_4_fu_1849_p29;
reg   [31:0] tmp_4_reg_3096;
wire   [31:0] tmp_5_fu_1909_p29;
reg   [31:0] tmp_5_reg_3101;
wire   [31:0] tmp_6_fu_1969_p29;
reg   [31:0] tmp_6_reg_3106;
wire   [31:0] tmp_7_fu_2029_p29;
reg   [31:0] tmp_7_reg_3111;
wire   [31:0] tmp_8_fu_2089_p29;
reg   [31:0] tmp_8_reg_3116;
wire   [31:0] tmp_9_fu_2149_p29;
reg   [31:0] tmp_9_reg_3121;
wire   [31:0] tmp_s_fu_2209_p29;
reg   [31:0] tmp_s_reg_3126;
wire   [31:0] tmp_10_fu_2269_p29;
reg   [31:0] tmp_10_reg_3131;
wire   [31:0] tmp_11_fu_2329_p29;
reg   [31:0] tmp_11_reg_3136;
wire   [31:0] select_ln144_fu_2436_p3;
reg   [31:0] select_ln144_reg_3141;
wire   [31:0] select_ln144_1_fu_2486_p3;
reg   [31:0] select_ln144_1_reg_3146;
wire   [31:0] select_ln144_2_fu_2536_p3;
reg   [31:0] select_ln144_2_reg_3151;
wire   [31:0] select_ln144_3_fu_2586_p3;
reg   [31:0] select_ln144_3_reg_3156;
wire   [31:0] select_ln144_4_fu_2636_p3;
reg   [31:0] select_ln144_4_reg_3161;
wire   [31:0] select_ln144_5_fu_2686_p3;
reg   [31:0] select_ln144_5_reg_3166;
wire   [31:0] select_ln144_6_fu_2736_p3;
reg   [31:0] select_ln144_6_reg_3171;
wire   [31:0] select_ln144_7_fu_2786_p3;
reg   [31:0] select_ln144_7_reg_3176;
wire   [31:0] select_ln144_8_fu_2836_p3;
reg   [31:0] select_ln144_8_reg_3181;
wire   [31:0] select_ln144_9_fu_2886_p3;
reg   [31:0] select_ln144_9_reg_3186;
reg   [31:0] out_12_reg_3191;
wire    ap_block_pp0_stage3_11001_grp0;
reg    ap_block_pp0_stage3_subdone_grp0_done_reg;
wire    ap_block_pp0_stage3_subdone_grp0;
reg    ap_block_pp0_stage3_subdone;
wire   [31:0] select_ln144_10_fu_2936_p3;
reg   [31:0] select_ln144_10_reg_3197;
wire   [31:0] select_ln144_11_fu_2986_p3;
reg   [31:0] select_ln144_11_reg_3202;
wire   [31:0] select_ln144_12_fu_3035_p3;
reg   [31:0] select_ln144_12_reg_3207;
reg    ap_block_state8_io_grp1;
reg    ap_block_pp0_stage7_11001_grp1;
wire    ap_block_pp0_stage7_01001_grp1;
reg    ap_block_state9_io_grp2;
reg    ap_block_pp0_stage8_11001_grp2;
wire    ap_block_pp0_stage8_01001_grp2;
reg    ap_block_state10_io_grp3;
reg    ap_block_pp0_stage9_11001_grp3;
wire    ap_block_pp0_stage9_01001_grp3;
reg    ap_block_state11_io_grp4;
reg    ap_block_pp0_stage10_11001_grp4;
wire    ap_block_pp0_stage10_01001_grp4;
reg    ap_block_state12_io_grp5;
reg    ap_block_pp0_stage11_11001_grp5;
wire    ap_block_pp0_stage11_01001_grp5;
reg    ap_block_pp0_stage12_11001_grp6;
wire    ap_block_pp0_stage12_01001_grp6;
wire    ap_block_pp0_stage0_01001_grp7;
reg    ap_block_pp0_stage1_11001_grp8;
wire    ap_block_pp0_stage1_01001_grp8;
reg    ap_block_pp0_stage2_11001_grp9;
wire    ap_block_pp0_stage2_01001_grp9;
reg    ap_block_pp0_stage3_11001_grp10;
wire    ap_block_pp0_stage3_01001_grp10;
reg    ap_block_pp0_stage4_11001_grp11;
wire    ap_block_pp0_stage4_01001_grp11;
reg    ap_block_pp0_stage5_11001_grp12;
wire    ap_block_pp0_stage5_01001_grp12;
reg    ap_block_pp0_stage6_11001_grp13;
wire    ap_block_pp0_stage6_01001_grp13;
reg   [3:0] i_1_fu_426;
wire   [3:0] add_ln144_fu_1597_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i;
wire    ap_block_pp0_stage0;
reg   [31:0] grp_fu_1560_p0;
wire    ap_block_pp0_stage1_grp0;
wire    ap_block_pp0_stage2_grp0;
wire    ap_block_pp0_stage3_grp0;
wire    ap_block_pp0_stage4_grp0;
wire    ap_block_pp0_stage5_grp0;
wire    ap_block_pp0_stage6_grp0;
wire    ap_block_pp0_stage7_grp0;
wire    ap_block_pp0_stage8_grp0;
wire    ap_block_pp0_stage9_grp0;
wire    ap_block_pp0_stage10_grp0;
wire    ap_block_pp0_stage11_grp0;
wire    ap_block_pp0_stage12_grp0;
wire    ap_block_pp0_stage0_grp0;
reg   [31:0] grp_fu_1564_p0;
wire   [31:0] tmp_fu_1609_p27;
wire   [31:0] tmp_1_fu_1669_p27;
wire   [31:0] tmp_2_fu_1729_p27;
wire   [31:0] tmp_3_fu_1789_p27;
wire   [31:0] tmp_4_fu_1849_p27;
wire   [31:0] tmp_5_fu_1909_p27;
wire   [31:0] tmp_6_fu_1969_p27;
wire   [31:0] tmp_7_fu_2029_p27;
wire   [31:0] tmp_8_fu_2089_p27;
wire   [31:0] tmp_9_fu_2149_p27;
wire   [31:0] tmp_s_fu_2209_p27;
wire   [31:0] tmp_10_fu_2269_p27;
wire   [31:0] tmp_11_fu_2329_p27;
wire   [31:0] bitcast_ln151_fu_2394_p1;
wire   [7:0] tmp_12_fu_2398_p4;
wire   [22:0] trunc_ln151_fu_2408_p1;
wire   [0:0] icmp_ln151_1_fu_2418_p2;
wire   [0:0] icmp_ln151_fu_2412_p2;
wire   [0:0] or_ln151_fu_2424_p2;
wire   [0:0] grp_fu_1564_p2;
wire   [0:0] and_ln151_fu_2430_p2;
wire   [31:0] bitcast_ln151_1_fu_2444_p1;
wire   [7:0] tmp_14_fu_2448_p4;
wire   [22:0] trunc_ln151_1_fu_2458_p1;
wire   [0:0] icmp_ln151_3_fu_2468_p2;
wire   [0:0] icmp_ln151_2_fu_2462_p2;
wire   [0:0] or_ln151_1_fu_2474_p2;
wire   [0:0] and_ln151_1_fu_2480_p2;
wire   [31:0] bitcast_ln151_2_fu_2494_p1;
wire   [7:0] tmp_16_fu_2498_p4;
wire   [22:0] trunc_ln151_2_fu_2508_p1;
wire   [0:0] icmp_ln151_5_fu_2518_p2;
wire   [0:0] icmp_ln151_4_fu_2512_p2;
wire   [0:0] or_ln151_2_fu_2524_p2;
wire   [0:0] and_ln151_2_fu_2530_p2;
wire   [31:0] bitcast_ln151_3_fu_2544_p1;
wire   [7:0] tmp_18_fu_2548_p4;
wire   [22:0] trunc_ln151_3_fu_2558_p1;
wire   [0:0] icmp_ln151_7_fu_2568_p2;
wire   [0:0] icmp_ln151_6_fu_2562_p2;
wire   [0:0] or_ln151_3_fu_2574_p2;
wire   [0:0] and_ln151_3_fu_2580_p2;
wire   [31:0] bitcast_ln151_4_fu_2594_p1;
wire   [7:0] tmp_20_fu_2598_p4;
wire   [22:0] trunc_ln151_4_fu_2608_p1;
wire   [0:0] icmp_ln151_9_fu_2618_p2;
wire   [0:0] icmp_ln151_8_fu_2612_p2;
wire   [0:0] or_ln151_4_fu_2624_p2;
wire   [0:0] and_ln151_4_fu_2630_p2;
wire   [31:0] bitcast_ln151_5_fu_2644_p1;
wire   [7:0] tmp_22_fu_2648_p4;
wire   [22:0] trunc_ln151_5_fu_2658_p1;
wire   [0:0] icmp_ln151_11_fu_2668_p2;
wire   [0:0] icmp_ln151_10_fu_2662_p2;
wire   [0:0] or_ln151_5_fu_2674_p2;
wire   [0:0] and_ln151_5_fu_2680_p2;
wire   [31:0] bitcast_ln151_6_fu_2694_p1;
wire   [7:0] tmp_24_fu_2698_p4;
wire   [22:0] trunc_ln151_6_fu_2708_p1;
wire   [0:0] icmp_ln151_13_fu_2718_p2;
wire   [0:0] icmp_ln151_12_fu_2712_p2;
wire   [0:0] or_ln151_6_fu_2724_p2;
wire   [0:0] and_ln151_6_fu_2730_p2;
wire   [31:0] bitcast_ln151_7_fu_2744_p1;
wire   [7:0] tmp_26_fu_2748_p4;
wire   [22:0] trunc_ln151_7_fu_2758_p1;
wire   [0:0] icmp_ln151_15_fu_2768_p2;
wire   [0:0] icmp_ln151_14_fu_2762_p2;
wire   [0:0] or_ln151_7_fu_2774_p2;
wire   [0:0] and_ln151_7_fu_2780_p2;
wire   [31:0] bitcast_ln151_8_fu_2794_p1;
wire   [7:0] tmp_28_fu_2798_p4;
wire   [22:0] trunc_ln151_8_fu_2808_p1;
wire   [0:0] icmp_ln151_17_fu_2818_p2;
wire   [0:0] icmp_ln151_16_fu_2812_p2;
wire   [0:0] or_ln151_8_fu_2824_p2;
wire   [0:0] and_ln151_8_fu_2830_p2;
wire   [31:0] bitcast_ln151_9_fu_2844_p1;
wire   [7:0] tmp_30_fu_2848_p4;
wire   [22:0] trunc_ln151_9_fu_2858_p1;
wire   [0:0] icmp_ln151_19_fu_2868_p2;
wire   [0:0] icmp_ln151_18_fu_2862_p2;
wire   [0:0] or_ln151_9_fu_2874_p2;
wire   [0:0] and_ln151_9_fu_2880_p2;
wire   [31:0] bitcast_ln151_10_fu_2894_p1;
wire   [7:0] tmp_32_fu_2898_p4;
wire   [22:0] trunc_ln151_10_fu_2908_p1;
wire   [0:0] icmp_ln151_21_fu_2918_p2;
wire   [0:0] icmp_ln151_20_fu_2912_p2;
wire   [0:0] or_ln151_10_fu_2924_p2;
wire   [0:0] and_ln151_10_fu_2930_p2;
wire   [31:0] bitcast_ln151_11_fu_2944_p1;
wire   [7:0] tmp_34_fu_2948_p4;
wire   [22:0] trunc_ln151_11_fu_2958_p1;
wire   [0:0] icmp_ln151_23_fu_2968_p2;
wire   [0:0] icmp_ln151_22_fu_2962_p2;
wire   [0:0] or_ln151_11_fu_2974_p2;
wire   [0:0] and_ln151_11_fu_2980_p2;
wire   [31:0] bitcast_ln151_12_fu_2994_p1;
wire   [7:0] tmp_36_fu_2997_p4;
wire   [22:0] trunc_ln151_12_fu_3007_p1;
wire   [0:0] icmp_ln151_25_fu_3017_p2;
wire   [0:0] icmp_ln151_24_fu_3011_p2;
wire   [0:0] or_ln151_12_fu_3023_p2;
wire   [0:0] and_ln151_12_fu_3029_p2;
reg    grp_fu_1560_ce;
reg    grp_fu_1564_ce;
reg    ap_block_pp0_stage1_11001;
reg    ap_block_pp0_stage2_11001;
reg    ap_block_pp0_stage3_11001;
reg    ap_block_pp0_stage4_11001;
wire    ap_block_pp0_stage5_00001_grp0;
wire    ap_block_pp0_stage6_00001_grp0;
wire    ap_block_pp0_stage7_00001_grp0;
wire    ap_block_pp0_stage8_00001_grp0;
wire    ap_block_pp0_stage9_00001_grp0;
wire    ap_block_pp0_stage10_00001_grp0;
wire    ap_block_pp0_stage11_00001_grp0;
wire    ap_block_pp0_stage12_00001_grp0;
wire    ap_block_pp0_stage0_00001_grp0;
wire    ap_block_pp0_stage1_00001_grp0;
wire    ap_block_pp0_stage2_00001_grp0;
wire    ap_block_pp0_stage3_00001_grp0;
wire    ap_block_pp0_stage4_00001_grp0;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [12:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [3:0] tmp_fu_1609_p1;
wire   [3:0] tmp_fu_1609_p3;
wire   [3:0] tmp_fu_1609_p5;
wire   [3:0] tmp_fu_1609_p7;
wire   [3:0] tmp_fu_1609_p9;
wire   [3:0] tmp_fu_1609_p11;
wire   [3:0] tmp_fu_1609_p13;
wire   [3:0] tmp_fu_1609_p15;
wire  signed [3:0] tmp_fu_1609_p17;
wire  signed [3:0] tmp_fu_1609_p19;
wire  signed [3:0] tmp_fu_1609_p21;
wire  signed [3:0] tmp_fu_1609_p23;
wire  signed [3:0] tmp_fu_1609_p25;
wire   [3:0] tmp_1_fu_1669_p1;
wire   [3:0] tmp_1_fu_1669_p3;
wire   [3:0] tmp_1_fu_1669_p5;
wire   [3:0] tmp_1_fu_1669_p7;
wire   [3:0] tmp_1_fu_1669_p9;
wire   [3:0] tmp_1_fu_1669_p11;
wire   [3:0] tmp_1_fu_1669_p13;
wire   [3:0] tmp_1_fu_1669_p15;
wire  signed [3:0] tmp_1_fu_1669_p17;
wire  signed [3:0] tmp_1_fu_1669_p19;
wire  signed [3:0] tmp_1_fu_1669_p21;
wire  signed [3:0] tmp_1_fu_1669_p23;
wire  signed [3:0] tmp_1_fu_1669_p25;
wire   [3:0] tmp_2_fu_1729_p1;
wire   [3:0] tmp_2_fu_1729_p3;
wire   [3:0] tmp_2_fu_1729_p5;
wire   [3:0] tmp_2_fu_1729_p7;
wire   [3:0] tmp_2_fu_1729_p9;
wire   [3:0] tmp_2_fu_1729_p11;
wire   [3:0] tmp_2_fu_1729_p13;
wire   [3:0] tmp_2_fu_1729_p15;
wire  signed [3:0] tmp_2_fu_1729_p17;
wire  signed [3:0] tmp_2_fu_1729_p19;
wire  signed [3:0] tmp_2_fu_1729_p21;
wire  signed [3:0] tmp_2_fu_1729_p23;
wire  signed [3:0] tmp_2_fu_1729_p25;
wire   [3:0] tmp_3_fu_1789_p1;
wire   [3:0] tmp_3_fu_1789_p3;
wire   [3:0] tmp_3_fu_1789_p5;
wire   [3:0] tmp_3_fu_1789_p7;
wire   [3:0] tmp_3_fu_1789_p9;
wire   [3:0] tmp_3_fu_1789_p11;
wire   [3:0] tmp_3_fu_1789_p13;
wire   [3:0] tmp_3_fu_1789_p15;
wire  signed [3:0] tmp_3_fu_1789_p17;
wire  signed [3:0] tmp_3_fu_1789_p19;
wire  signed [3:0] tmp_3_fu_1789_p21;
wire  signed [3:0] tmp_3_fu_1789_p23;
wire  signed [3:0] tmp_3_fu_1789_p25;
wire   [3:0] tmp_4_fu_1849_p1;
wire   [3:0] tmp_4_fu_1849_p3;
wire   [3:0] tmp_4_fu_1849_p5;
wire   [3:0] tmp_4_fu_1849_p7;
wire   [3:0] tmp_4_fu_1849_p9;
wire   [3:0] tmp_4_fu_1849_p11;
wire   [3:0] tmp_4_fu_1849_p13;
wire   [3:0] tmp_4_fu_1849_p15;
wire  signed [3:0] tmp_4_fu_1849_p17;
wire  signed [3:0] tmp_4_fu_1849_p19;
wire  signed [3:0] tmp_4_fu_1849_p21;
wire  signed [3:0] tmp_4_fu_1849_p23;
wire  signed [3:0] tmp_4_fu_1849_p25;
wire   [3:0] tmp_5_fu_1909_p1;
wire   [3:0] tmp_5_fu_1909_p3;
wire   [3:0] tmp_5_fu_1909_p5;
wire   [3:0] tmp_5_fu_1909_p7;
wire   [3:0] tmp_5_fu_1909_p9;
wire   [3:0] tmp_5_fu_1909_p11;
wire   [3:0] tmp_5_fu_1909_p13;
wire   [3:0] tmp_5_fu_1909_p15;
wire  signed [3:0] tmp_5_fu_1909_p17;
wire  signed [3:0] tmp_5_fu_1909_p19;
wire  signed [3:0] tmp_5_fu_1909_p21;
wire  signed [3:0] tmp_5_fu_1909_p23;
wire  signed [3:0] tmp_5_fu_1909_p25;
wire   [3:0] tmp_6_fu_1969_p1;
wire   [3:0] tmp_6_fu_1969_p3;
wire   [3:0] tmp_6_fu_1969_p5;
wire   [3:0] tmp_6_fu_1969_p7;
wire   [3:0] tmp_6_fu_1969_p9;
wire   [3:0] tmp_6_fu_1969_p11;
wire   [3:0] tmp_6_fu_1969_p13;
wire   [3:0] tmp_6_fu_1969_p15;
wire  signed [3:0] tmp_6_fu_1969_p17;
wire  signed [3:0] tmp_6_fu_1969_p19;
wire  signed [3:0] tmp_6_fu_1969_p21;
wire  signed [3:0] tmp_6_fu_1969_p23;
wire  signed [3:0] tmp_6_fu_1969_p25;
wire   [3:0] tmp_7_fu_2029_p1;
wire   [3:0] tmp_7_fu_2029_p3;
wire   [3:0] tmp_7_fu_2029_p5;
wire   [3:0] tmp_7_fu_2029_p7;
wire   [3:0] tmp_7_fu_2029_p9;
wire   [3:0] tmp_7_fu_2029_p11;
wire   [3:0] tmp_7_fu_2029_p13;
wire   [3:0] tmp_7_fu_2029_p15;
wire  signed [3:0] tmp_7_fu_2029_p17;
wire  signed [3:0] tmp_7_fu_2029_p19;
wire  signed [3:0] tmp_7_fu_2029_p21;
wire  signed [3:0] tmp_7_fu_2029_p23;
wire  signed [3:0] tmp_7_fu_2029_p25;
wire   [3:0] tmp_8_fu_2089_p1;
wire   [3:0] tmp_8_fu_2089_p3;
wire   [3:0] tmp_8_fu_2089_p5;
wire   [3:0] tmp_8_fu_2089_p7;
wire   [3:0] tmp_8_fu_2089_p9;
wire   [3:0] tmp_8_fu_2089_p11;
wire   [3:0] tmp_8_fu_2089_p13;
wire   [3:0] tmp_8_fu_2089_p15;
wire  signed [3:0] tmp_8_fu_2089_p17;
wire  signed [3:0] tmp_8_fu_2089_p19;
wire  signed [3:0] tmp_8_fu_2089_p21;
wire  signed [3:0] tmp_8_fu_2089_p23;
wire  signed [3:0] tmp_8_fu_2089_p25;
wire   [3:0] tmp_9_fu_2149_p1;
wire   [3:0] tmp_9_fu_2149_p3;
wire   [3:0] tmp_9_fu_2149_p5;
wire   [3:0] tmp_9_fu_2149_p7;
wire   [3:0] tmp_9_fu_2149_p9;
wire   [3:0] tmp_9_fu_2149_p11;
wire   [3:0] tmp_9_fu_2149_p13;
wire   [3:0] tmp_9_fu_2149_p15;
wire  signed [3:0] tmp_9_fu_2149_p17;
wire  signed [3:0] tmp_9_fu_2149_p19;
wire  signed [3:0] tmp_9_fu_2149_p21;
wire  signed [3:0] tmp_9_fu_2149_p23;
wire  signed [3:0] tmp_9_fu_2149_p25;
wire   [3:0] tmp_s_fu_2209_p1;
wire   [3:0] tmp_s_fu_2209_p3;
wire   [3:0] tmp_s_fu_2209_p5;
wire   [3:0] tmp_s_fu_2209_p7;
wire   [3:0] tmp_s_fu_2209_p9;
wire   [3:0] tmp_s_fu_2209_p11;
wire   [3:0] tmp_s_fu_2209_p13;
wire   [3:0] tmp_s_fu_2209_p15;
wire  signed [3:0] tmp_s_fu_2209_p17;
wire  signed [3:0] tmp_s_fu_2209_p19;
wire  signed [3:0] tmp_s_fu_2209_p21;
wire  signed [3:0] tmp_s_fu_2209_p23;
wire  signed [3:0] tmp_s_fu_2209_p25;
wire   [3:0] tmp_10_fu_2269_p1;
wire   [3:0] tmp_10_fu_2269_p3;
wire   [3:0] tmp_10_fu_2269_p5;
wire   [3:0] tmp_10_fu_2269_p7;
wire   [3:0] tmp_10_fu_2269_p9;
wire   [3:0] tmp_10_fu_2269_p11;
wire   [3:0] tmp_10_fu_2269_p13;
wire   [3:0] tmp_10_fu_2269_p15;
wire  signed [3:0] tmp_10_fu_2269_p17;
wire  signed [3:0] tmp_10_fu_2269_p19;
wire  signed [3:0] tmp_10_fu_2269_p21;
wire  signed [3:0] tmp_10_fu_2269_p23;
wire  signed [3:0] tmp_10_fu_2269_p25;
wire   [3:0] tmp_11_fu_2329_p1;
wire   [3:0] tmp_11_fu_2329_p3;
wire   [3:0] tmp_11_fu_2329_p5;
wire   [3:0] tmp_11_fu_2329_p7;
wire   [3:0] tmp_11_fu_2329_p9;
wire   [3:0] tmp_11_fu_2329_p11;
wire   [3:0] tmp_11_fu_2329_p13;
wire   [3:0] tmp_11_fu_2329_p15;
wire  signed [3:0] tmp_11_fu_2329_p17;
wire  signed [3:0] tmp_11_fu_2329_p19;
wire  signed [3:0] tmp_11_fu_2329_p21;
wire  signed [3:0] tmp_11_fu_2329_p23;
wire  signed [3:0] tmp_11_fu_2329_p25;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_block_pp0_stage4_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage6_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage8_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage10_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage12_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage1_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage5_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage7_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage9_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage11_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage0_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage2_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage3_subdone_grp0_done_reg = 1'b0;
#0 i_1_fu_426 = 4'd0;
#0 ap_done_reg = 1'b0;
end

conv3_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U1823(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1564_p0),
    .din1(32'd0),
    .ce(grp_fu_1564_ce),
    .opcode(5'd2),
    .dout(grp_fu_1564_p2)
);

(* dissolve_hierarchy = "yes" *) conv3_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U1824(
    .din0(add1804613_reload),
    .din1(add180_14626_reload),
    .din2(add180_24639_reload),
    .din3(add180_34652_reload),
    .din4(add180_44665_reload),
    .din5(add180_54678_reload),
    .din6(add180_64691_reload),
    .din7(add180_74704_reload),
    .din8(add180_84717_reload),
    .din9(add180_94730_reload),
    .din10(add180_104743_reload),
    .din11(add180_114756_reload),
    .din12(add180_124769_reload),
    .def(tmp_fu_1609_p27),
    .sel(ap_sig_allocacmp_i),
    .dout(tmp_fu_1609_p29)
);

(* dissolve_hierarchy = "yes" *) conv3_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U1825(
    .din0(add180_138784614_reload),
    .din1(add180_1_14627_reload),
    .din2(add180_2_14640_reload),
    .din3(add180_3_14653_reload),
    .din4(add180_4_14666_reload),
    .din5(add180_5_14679_reload),
    .din6(add180_6_14692_reload),
    .din7(add180_7_14705_reload),
    .din8(add180_8_14718_reload),
    .din9(add180_9_14731_reload),
    .din10(add180_10_14744_reload),
    .din11(add180_11_14757_reload),
    .din12(add180_12_14770_reload),
    .def(tmp_1_fu_1669_p27),
    .sel(ap_sig_allocacmp_i),
    .dout(tmp_1_fu_1669_p29)
);

(* dissolve_hierarchy = "yes" *) conv3_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U1826(
    .din0(add180_238954615_reload),
    .din1(add180_1_24628_reload),
    .din2(add180_2_24641_reload),
    .din3(add180_3_24654_reload),
    .din4(add180_4_24667_reload),
    .din5(add180_5_24680_reload),
    .din6(add180_6_24693_reload),
    .din7(add180_7_24706_reload),
    .din8(add180_8_24719_reload),
    .din9(add180_9_24732_reload),
    .din10(add180_10_24745_reload),
    .din11(add180_11_24758_reload),
    .din12(add180_12_24771_reload),
    .def(tmp_2_fu_1729_p27),
    .sel(ap_sig_allocacmp_i),
    .dout(tmp_2_fu_1729_p29)
);

(* dissolve_hierarchy = "yes" *) conv3_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U1827(
    .din0(add180_339124616_reload),
    .din1(add180_1_34629_reload),
    .din2(add180_2_34642_reload),
    .din3(add180_3_34655_reload),
    .din4(add180_4_34668_reload),
    .din5(add180_5_34681_reload),
    .din6(add180_6_34694_reload),
    .din7(add180_7_34707_reload),
    .din8(add180_8_34720_reload),
    .din9(add180_9_34733_reload),
    .din10(add180_10_34746_reload),
    .din11(add180_11_34759_reload),
    .din12(add180_12_34772_reload),
    .def(tmp_3_fu_1789_p27),
    .sel(ap_sig_allocacmp_i),
    .dout(tmp_3_fu_1789_p29)
);

(* dissolve_hierarchy = "yes" *) conv3_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U1828(
    .din0(add180_439294617_reload),
    .din1(add180_1_44630_reload),
    .din2(add180_2_44643_reload),
    .din3(add180_3_44656_reload),
    .din4(add180_4_44669_reload),
    .din5(add180_5_44682_reload),
    .din6(add180_6_44695_reload),
    .din7(add180_7_44708_reload),
    .din8(add180_8_44721_reload),
    .din9(add180_9_44734_reload),
    .din10(add180_10_44747_reload),
    .din11(add180_11_44760_reload),
    .din12(add180_12_44773_reload),
    .def(tmp_4_fu_1849_p27),
    .sel(ap_sig_allocacmp_i),
    .dout(tmp_4_fu_1849_p29)
);

(* dissolve_hierarchy = "yes" *) conv3_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U1829(
    .din0(add180_539464618_reload),
    .din1(add180_1_54631_reload),
    .din2(add180_2_54644_reload),
    .din3(add180_3_54657_reload),
    .din4(add180_4_54670_reload),
    .din5(add180_5_54683_reload),
    .din6(add180_6_54696_reload),
    .din7(add180_7_54709_reload),
    .din8(add180_8_54722_reload),
    .din9(add180_9_54735_reload),
    .din10(add180_10_54748_reload),
    .din11(add180_11_54761_reload),
    .din12(add180_12_54774_reload),
    .def(tmp_5_fu_1909_p27),
    .sel(ap_sig_allocacmp_i),
    .dout(tmp_5_fu_1909_p29)
);

(* dissolve_hierarchy = "yes" *) conv3_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U1830(
    .din0(add180_639634619_reload),
    .din1(add180_1_64632_reload),
    .din2(add180_2_64645_reload),
    .din3(add180_3_64658_reload),
    .din4(add180_4_64671_reload),
    .din5(add180_5_64684_reload),
    .din6(add180_6_64697_reload),
    .din7(add180_7_64710_reload),
    .din8(add180_8_64723_reload),
    .din9(add180_9_64736_reload),
    .din10(add180_10_64749_reload),
    .din11(add180_11_64762_reload),
    .din12(add180_12_64775_reload),
    .def(tmp_6_fu_1969_p27),
    .sel(ap_sig_allocacmp_i),
    .dout(tmp_6_fu_1969_p29)
);

(* dissolve_hierarchy = "yes" *) conv3_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U1831(
    .din0(add180_739804620_reload),
    .din1(add180_1_74633_reload),
    .din2(add180_2_74646_reload),
    .din3(add180_3_74659_reload),
    .din4(add180_4_74672_reload),
    .din5(add180_5_74685_reload),
    .din6(add180_6_74698_reload),
    .din7(add180_7_74711_reload),
    .din8(add180_8_74724_reload),
    .din9(add180_9_74737_reload),
    .din10(add180_10_74750_reload),
    .din11(add180_11_74763_reload),
    .din12(add180_12_74776_reload),
    .def(tmp_7_fu_2029_p27),
    .sel(ap_sig_allocacmp_i),
    .dout(tmp_7_fu_2029_p29)
);

(* dissolve_hierarchy = "yes" *) conv3_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U1832(
    .din0(add180_839974621_reload),
    .din1(add180_1_84634_reload),
    .din2(add180_2_84647_reload),
    .din3(add180_3_84660_reload),
    .din4(add180_4_84673_reload),
    .din5(add180_5_84686_reload),
    .din6(add180_6_84699_reload),
    .din7(add180_7_84712_reload),
    .din8(add180_8_84725_reload),
    .din9(add180_9_84738_reload),
    .din10(add180_10_84751_reload),
    .din11(add180_11_84764_reload),
    .din12(add180_12_84777_reload),
    .def(tmp_8_fu_2089_p27),
    .sel(ap_sig_allocacmp_i),
    .dout(tmp_8_fu_2089_p29)
);

(* dissolve_hierarchy = "yes" *) conv3_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U1833(
    .din0(add180_940144622_reload),
    .din1(add180_1_94635_reload),
    .din2(add180_2_94648_reload),
    .din3(add180_3_94661_reload),
    .din4(add180_4_94674_reload),
    .din5(add180_5_94687_reload),
    .din6(add180_6_94700_reload),
    .din7(add180_7_94713_reload),
    .din8(add180_8_94726_reload),
    .din9(add180_9_94739_reload),
    .din10(add180_10_94752_reload),
    .din11(add180_11_94765_reload),
    .din12(add180_12_94778_reload),
    .def(tmp_9_fu_2149_p27),
    .sel(ap_sig_allocacmp_i),
    .dout(tmp_9_fu_2149_p29)
);

(* dissolve_hierarchy = "yes" *) conv3_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U1834(
    .din0(add180_1040314623_reload),
    .din1(add180_1_104636_reload),
    .din2(add180_2_104649_reload),
    .din3(add180_3_104662_reload),
    .din4(add180_4_104675_reload),
    .din5(add180_5_104688_reload),
    .din6(add180_6_104701_reload),
    .din7(add180_7_104714_reload),
    .din8(add180_8_104727_reload),
    .din9(add180_9_104740_reload),
    .din10(add180_10_104753_reload),
    .din11(add180_11_104766_reload),
    .din12(add180_12_104779_reload),
    .def(tmp_s_fu_2209_p27),
    .sel(ap_sig_allocacmp_i),
    .dout(tmp_s_fu_2209_p29)
);

(* dissolve_hierarchy = "yes" *) conv3_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U1835(
    .din0(add180_1140484624_reload),
    .din1(add180_1_114637_reload),
    .din2(add180_2_114650_reload),
    .din3(add180_3_114663_reload),
    .din4(add180_4_114676_reload),
    .din5(add180_5_114689_reload),
    .din6(add180_6_114702_reload),
    .din7(add180_7_114715_reload),
    .din8(add180_8_114728_reload),
    .din9(add180_9_114741_reload),
    .din10(add180_10_114754_reload),
    .din11(add180_11_114767_reload),
    .din12(add180_12_114780_reload),
    .def(tmp_10_fu_2269_p27),
    .sel(ap_sig_allocacmp_i),
    .dout(tmp_10_fu_2269_p29)
);

(* dissolve_hierarchy = "yes" *) conv3_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U1836(
    .din0(add180_1240654625_reload),
    .din1(add180_1_124638_reload),
    .din2(add180_2_124651_reload),
    .din3(add180_3_124664_reload),
    .din4(add180_4_124677_reload),
    .din5(add180_5_124690_reload),
    .din6(add180_6_124703_reload),
    .din7(add180_7_124716_reload),
    .din8(add180_8_124729_reload),
    .din9(add180_9_124742_reload),
    .din10(add180_10_124755_reload),
    .din11(add180_11_124768_reload),
    .din12(add180_12_124790_reload),
    .def(tmp_11_fu_2329_p27),
    .sel(ap_sig_allocacmp_i),
    .dout(tmp_11_fu_2329_p29)
);

conv3_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage6),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage0_subdone_grp0)) begin
                ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage10_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage10)) begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_block_pp0_stage10_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage10_subdone_grp0)) begin
                ap_block_pp0_stage10_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage11_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage11)) begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_block_pp0_stage11_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage11_subdone_grp0)) begin
                ap_block_pp0_stage11_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage12_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage12)) begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_block_pp0_stage12_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage12_subdone_grp0)) begin
                ap_block_pp0_stage12_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone_grp0)) begin
                ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage2_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage2)) begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_block_pp0_stage2_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage2_subdone_grp0)) begin
                ap_block_pp0_stage2_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage3_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage3)) begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_block_pp0_stage3_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage3_subdone_grp0)) begin
                ap_block_pp0_stage3_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage4_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage4)) begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_block_pp0_stage4_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage4_subdone_grp0)) begin
                ap_block_pp0_stage4_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage5_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage5)) begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_block_pp0_stage5_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage5_subdone_grp0)) begin
                ap_block_pp0_stage5_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage6_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage6)) begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_block_pp0_stage6_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage6_subdone_grp0)) begin
                ap_block_pp0_stage6_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage7_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage7)) begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_block_pp0_stage7_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage7_subdone_grp0)) begin
                ap_block_pp0_stage7_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage8_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage8)) begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_block_pp0_stage8_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage8_subdone_grp0)) begin
                ap_block_pp0_stage8_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage9_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage9)) begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_block_pp0_stage9_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage9_subdone_grp0)) begin
                ap_block_pp0_stage9_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage6_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage6)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_subdone))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((icmp_ln144_fu_1591_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_1_fu_426 <= add_ln144_fu_1597_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_1_fu_426 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln144_reg_3055 <= icmp_ln144_fu_1591_p2;
        tmp_10_reg_3131 <= tmp_10_fu_2269_p29;
        tmp_11_reg_3136 <= tmp_11_fu_2329_p29;
        tmp_1_reg_3081 <= tmp_1_fu_1669_p29;
        tmp_2_reg_3086 <= tmp_2_fu_1729_p29;
        tmp_3_reg_3091 <= tmp_3_fu_1789_p29;
        tmp_4_reg_3096 <= tmp_4_fu_1849_p29;
        tmp_5_reg_3101 <= tmp_5_fu_1909_p29;
        tmp_6_reg_3106 <= tmp_6_fu_1969_p29;
        tmp_7_reg_3111 <= tmp_7_fu_2029_p29;
        tmp_8_reg_3116 <= tmp_8_fu_2089_p29;
        tmp_9_reg_3121 <= tmp_9_fu_2149_p29;
        tmp_reg_3076 <= tmp_fu_1609_p29;
        tmp_s_reg_3126 <= tmp_s_fu_2209_p29;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage3_11001_grp0))) begin
        out_12_reg_3191 <= grp_fu_10957_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage6_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage6_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage4_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage4_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage10_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage10_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage8_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage8_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage12_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage12_11001_grp0)))) begin
        reg_1569 <= grp_fu_10957_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage2_11001_grp0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage5_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage5_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage11_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage11_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage9_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage9_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage7_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage7_11001_grp0)))) begin
        reg_1574 <= grp_fu_10957_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage3_11001_grp0))) begin
        select_ln144_10_reg_3197 <= select_ln144_10_fu_2936_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage4_11001_grp0))) begin
        select_ln144_11_reg_3202 <= select_ln144_11_fu_2986_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage5_11001_grp0))) begin
        select_ln144_12_reg_3207 <= select_ln144_12_fu_3035_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage7_11001_grp0))) begin
        select_ln144_1_reg_3146 <= select_ln144_1_fu_2486_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage8_11001_grp0))) begin
        select_ln144_2_reg_3151 <= select_ln144_2_fu_2536_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage9_11001_grp0))) begin
        select_ln144_3_reg_3156 <= select_ln144_3_fu_2586_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage10_11001_grp0))) begin
        select_ln144_4_reg_3161 <= select_ln144_4_fu_2636_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage11_11001_grp0))) begin
        select_ln144_5_reg_3166 <= select_ln144_5_fu_2686_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage12_11001_grp0))) begin
        select_ln144_6_reg_3171 <= select_ln144_6_fu_2736_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0))) begin
        select_ln144_7_reg_3176 <= select_ln144_7_fu_2786_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0))) begin
        select_ln144_8_reg_3181 <= select_ln144_8_fu_2836_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage2_11001_grp0))) begin
        select_ln144_9_reg_3186 <= select_ln144_9_fu_2886_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage6_11001_grp0))) begin
        select_ln144_reg_3141 <= select_ln144_fu_2436_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage6) & (icmp_ln144_reg_3055 == 1'd1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage6_subdone))) begin
        ap_condition_exit_pp0_iter0_stage6 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage6_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage12_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i = 4'd0;
    end else begin
        ap_sig_allocacmp_i = i_1_fu_426;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_grp13)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_grp12)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_grp11)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_grp10)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_grp9)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_grp8)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_grp7)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (icmp_ln144_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage11_grp5)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (icmp_ln144_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage10_grp4)) 
    | ((1'b1 == ap_CS_fsm_pp0_stage9) & (icmp_ln144_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage9_grp3)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (icmp_ln144_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage8_grp2)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (icmp_ln144_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage7_grp1)) | ((1'b1 == ap_CS_fsm_pp0_stage12) & (icmp_ln144_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage12_grp6)))) begin
        gmem0_blk_n_W = m_axi_gmem0_0_WREADY;
    end else begin
        gmem0_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage6_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage5_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage4_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage3_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage2_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage11_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_subdone_grp0_done_reg) & (1'b0 == 
    ap_block_pp0_stage10_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage9_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage8_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage7_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage12_11001_grp0)))) begin
        grp_fu_1560_ce = 1'b1;
    end else begin
        grp_fu_1560_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_grp0))) begin
        grp_fu_1560_p0 = tmp_11_reg_3136;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage12_grp0))) begin
        grp_fu_1560_p0 = tmp_10_reg_3131;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage11_grp0))) begin
        grp_fu_1560_p0 = tmp_s_reg_3126;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage10_grp0))) begin
        grp_fu_1560_p0 = tmp_9_reg_3121;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage9_grp0))) begin
        grp_fu_1560_p0 = tmp_8_reg_3116;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage8_grp0))) begin
        grp_fu_1560_p0 = tmp_7_reg_3111;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage7_grp0))) begin
        grp_fu_1560_p0 = tmp_6_reg_3106;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage6_grp0))) begin
        grp_fu_1560_p0 = tmp_5_reg_3101;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage5_grp0))) begin
        grp_fu_1560_p0 = tmp_4_reg_3096;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage4_grp0))) begin
        grp_fu_1560_p0 = tmp_3_reg_3091;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage3_grp0))) begin
        grp_fu_1560_p0 = tmp_2_reg_3086;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_grp0))) begin
        grp_fu_1560_p0 = tmp_1_reg_3081;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_grp0))) begin
        grp_fu_1560_p0 = tmp_reg_3076;
    end else begin
        grp_fu_1560_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage6_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage5_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage4_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage3_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage2_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage11_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_subdone_grp0_done_reg) & (1'b0 == 
    ap_block_pp0_stage10_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage9_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage8_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage7_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage12_11001_grp0)))) begin
        grp_fu_1564_ce = 1'b1;
    end else begin
        grp_fu_1564_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_grp0))) begin
        grp_fu_1564_p0 = out_12_reg_3191;
    end else if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_grp0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage6_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage10_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage8_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage12_grp0)))) begin
        grp_fu_1564_p0 = reg_1574;
    end else if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_grp0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage5_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage11_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage9_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage7_grp0)))) begin
        grp_fu_1564_p0 = reg_1569;
    end else begin
        grp_fu_1564_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_01001_grp13))) begin
        m_axi_gmem0_0_WDATA = select_ln144_12_reg_3207;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_01001_grp12))) begin
        m_axi_gmem0_0_WDATA = select_ln144_11_reg_3202;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_01001_grp11))) begin
        m_axi_gmem0_0_WDATA = select_ln144_10_reg_3197;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_01001_grp10))) begin
        m_axi_gmem0_0_WDATA = select_ln144_9_reg_3186;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_01001_grp9))) begin
        m_axi_gmem0_0_WDATA = select_ln144_8_reg_3181;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_01001_grp8))) begin
        m_axi_gmem0_0_WDATA = select_ln144_7_reg_3176;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001_grp7))) begin
        m_axi_gmem0_0_WDATA = select_ln144_6_reg_3171;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage12) & (icmp_ln144_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage12_01001_grp6))) begin
        m_axi_gmem0_0_WDATA = select_ln144_5_reg_3166;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage11) & (icmp_ln144_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage11_01001_grp5))) begin
        m_axi_gmem0_0_WDATA = select_ln144_4_reg_3161;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage10) & (icmp_ln144_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage10_01001_grp4))) begin
        m_axi_gmem0_0_WDATA = select_ln144_3_reg_3156;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage9) & (icmp_ln144_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage9_01001_grp3))) begin
        m_axi_gmem0_0_WDATA = select_ln144_2_reg_3151;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage8) & (icmp_ln144_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage8_01001_grp2))) begin
        m_axi_gmem0_0_WDATA = select_ln144_1_reg_3146;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage7) & (icmp_ln144_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage7_01001_grp1))) begin
        m_axi_gmem0_0_WDATA = select_ln144_reg_3141;
    end else begin
        m_axi_gmem0_0_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001_grp13)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001_grp12)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001_grp11)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001_grp10)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001_grp9)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001_grp8)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_grp7)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (icmp_ln144_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage11_11001_grp5)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (icmp_ln144_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg 
    == 1'b1) & (1'b0 == ap_block_pp0_stage10_11001_grp4)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (icmp_ln144_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage9_11001_grp3)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (icmp_ln144_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage8_11001_grp2)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (icmp_ln144_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001_grp1)) | ((1'b1 == ap_CS_fsm_pp0_stage12) & (icmp_ln144_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage12_11001_grp6)))) begin
        m_axi_gmem0_0_WVALID = 1'b1;
    end else begin
        m_axi_gmem0_0_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage6)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln144_fu_1597_p2 = (ap_sig_allocacmp_i + 4'd1);

assign and_ln151_10_fu_2930_p2 = (or_ln151_10_fu_2924_p2 & grp_fu_1564_p2);

assign and_ln151_11_fu_2980_p2 = (or_ln151_11_fu_2974_p2 & grp_fu_1564_p2);

assign and_ln151_12_fu_3029_p2 = (or_ln151_12_fu_3023_p2 & grp_fu_1564_p2);

assign and_ln151_1_fu_2480_p2 = (or_ln151_1_fu_2474_p2 & grp_fu_1564_p2);

assign and_ln151_2_fu_2530_p2 = (or_ln151_2_fu_2524_p2 & grp_fu_1564_p2);

assign and_ln151_3_fu_2580_p2 = (or_ln151_3_fu_2574_p2 & grp_fu_1564_p2);

assign and_ln151_4_fu_2630_p2 = (or_ln151_4_fu_2624_p2 & grp_fu_1564_p2);

assign and_ln151_5_fu_2680_p2 = (or_ln151_5_fu_2674_p2 & grp_fu_1564_p2);

assign and_ln151_6_fu_2730_p2 = (or_ln151_6_fu_2724_p2 & grp_fu_1564_p2);

assign and_ln151_7_fu_2780_p2 = (or_ln151_7_fu_2774_p2 & grp_fu_1564_p2);

assign and_ln151_8_fu_2830_p2 = (or_ln151_8_fu_2824_p2 & grp_fu_1564_p2);

assign and_ln151_9_fu_2880_p2 = (or_ln151_9_fu_2874_p2 & grp_fu_1564_p2);

assign and_ln151_fu_2430_p2 = (or_ln151_fu_2424_p2 & grp_fu_1564_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001_grp7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage0_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001_grp7 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage0_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_grp7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage0_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_01001_grp4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage10_11001_grp4 = ((1'b1 == ap_block_state11_io_grp4) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage10_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_grp4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage10_subdone = ((1'b1 == ap_block_state11_io_grp4) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage10_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_01001_grp5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage11_11001_grp5 = ((1'b1 == ap_block_state12_io_grp5) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage11_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_grp5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage11_subdone = ((1'b1 == ap_block_state12_io_grp5) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage11_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_01001_grp6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage12_11001_grp6 = ((1'b1 == ap_block_state13_io_grp6) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage12_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_grp6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage12_subdone = ((1'b1 == ap_block_state13_io_grp6) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage12_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001_grp8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage1_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001_grp8 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage1_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_grp8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage1_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_01001_grp9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage2_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001_grp9 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage2_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_grp9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage2_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_01001_grp10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage3_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001_grp10 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage3_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_grp10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage3_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_01001_grp11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage4_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001_grp11 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage4_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_grp11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage4_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_01001_grp12 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001_grp12 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage5_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_grp12 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_subdone = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage5_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_01001_grp13 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_11001_grp13 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage6_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_grp13 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_subdone = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage6_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_01001_grp1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_11001_grp1 = ((1'b1 == ap_block_state8_io_grp1) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage7_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_subdone = ((1'b1 == ap_block_state8_io_grp1) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage7_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_01001_grp2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage8_11001_grp2 = ((1'b1 == ap_block_state9_io_grp2) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage8_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_grp2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage8_subdone = ((1'b1 == ap_block_state9_io_grp2) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage8_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_01001_grp3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage9_11001_grp3 = ((1'b1 == ap_block_state10_io_grp3) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage9_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_grp3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage9_subdone = ((1'b1 == ap_block_state10_io_grp3) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage9_subdone_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state10_io_grp3 = ((m_axi_gmem0_0_WREADY == 1'b0) & (icmp_ln144_reg_3055 == 1'd0));
end

always @ (*) begin
    ap_block_state11_io_grp4 = ((m_axi_gmem0_0_WREADY == 1'b0) & (icmp_ln144_reg_3055 == 1'd0));
end

always @ (*) begin
    ap_block_state12_io_grp5 = ((m_axi_gmem0_0_WREADY == 1'b0) & (icmp_ln144_reg_3055 == 1'd0));
end

always @ (*) begin
    ap_block_state13_io_grp6 = ((m_axi_gmem0_0_WREADY == 1'b0) & (icmp_ln144_reg_3055 == 1'd0));
end

always @ (*) begin
    ap_block_state8_io_grp1 = ((m_axi_gmem0_0_WREADY == 1'b0) & (icmp_ln144_reg_3055 == 1'd0));
end

always @ (*) begin
    ap_block_state9_io_grp2 = ((m_axi_gmem0_0_WREADY == 1'b0) & (icmp_ln144_reg_3055 == 1'd0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage6;

assign ap_ready = ap_ready_sig;

assign bitcast_ln151_10_fu_2894_p1 = reg_1569;

assign bitcast_ln151_11_fu_2944_p1 = reg_1574;

assign bitcast_ln151_12_fu_2994_p1 = out_12_reg_3191;

assign bitcast_ln151_1_fu_2444_p1 = reg_1574;

assign bitcast_ln151_2_fu_2494_p1 = reg_1569;

assign bitcast_ln151_3_fu_2544_p1 = reg_1574;

assign bitcast_ln151_4_fu_2594_p1 = reg_1569;

assign bitcast_ln151_5_fu_2644_p1 = reg_1574;

assign bitcast_ln151_6_fu_2694_p1 = reg_1569;

assign bitcast_ln151_7_fu_2744_p1 = reg_1574;

assign bitcast_ln151_8_fu_2794_p1 = reg_1569;

assign bitcast_ln151_9_fu_2844_p1 = reg_1574;

assign bitcast_ln151_fu_2394_p1 = reg_1569;

assign grp_fu_10957_p_ce = grp_fu_1560_ce;

assign grp_fu_10957_p_din0 = grp_fu_1560_p0;

assign grp_fu_10957_p_din1 = empty;

assign grp_fu_10957_p_opcode = 2'd0;

assign icmp_ln144_fu_1591_p2 = ((ap_sig_allocacmp_i == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln151_10_fu_2662_p2 = ((tmp_22_fu_2648_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln151_11_fu_2668_p2 = ((trunc_ln151_5_fu_2658_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln151_12_fu_2712_p2 = ((tmp_24_fu_2698_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln151_13_fu_2718_p2 = ((trunc_ln151_6_fu_2708_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln151_14_fu_2762_p2 = ((tmp_26_fu_2748_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln151_15_fu_2768_p2 = ((trunc_ln151_7_fu_2758_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln151_16_fu_2812_p2 = ((tmp_28_fu_2798_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln151_17_fu_2818_p2 = ((trunc_ln151_8_fu_2808_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln151_18_fu_2862_p2 = ((tmp_30_fu_2848_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln151_19_fu_2868_p2 = ((trunc_ln151_9_fu_2858_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln151_1_fu_2418_p2 = ((trunc_ln151_fu_2408_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln151_20_fu_2912_p2 = ((tmp_32_fu_2898_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln151_21_fu_2918_p2 = ((trunc_ln151_10_fu_2908_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln151_22_fu_2962_p2 = ((tmp_34_fu_2948_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln151_23_fu_2968_p2 = ((trunc_ln151_11_fu_2958_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln151_24_fu_3011_p2 = ((tmp_36_fu_2997_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln151_25_fu_3017_p2 = ((trunc_ln151_12_fu_3007_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln151_2_fu_2462_p2 = ((tmp_14_fu_2448_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln151_3_fu_2468_p2 = ((trunc_ln151_1_fu_2458_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln151_4_fu_2512_p2 = ((tmp_16_fu_2498_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln151_5_fu_2518_p2 = ((trunc_ln151_2_fu_2508_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln151_6_fu_2562_p2 = ((tmp_18_fu_2548_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln151_7_fu_2568_p2 = ((trunc_ln151_3_fu_2558_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln151_8_fu_2612_p2 = ((tmp_20_fu_2598_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln151_9_fu_2618_p2 = ((trunc_ln151_4_fu_2608_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln151_fu_2412_p2 = ((tmp_12_fu_2398_p4 != 8'd255) ? 1'b1 : 1'b0);

assign m_axi_gmem0_0_ARADDR = 64'd0;

assign m_axi_gmem0_0_ARBURST = 2'd0;

assign m_axi_gmem0_0_ARCACHE = 4'd0;

assign m_axi_gmem0_0_ARID = 1'd0;

assign m_axi_gmem0_0_ARLEN = 32'd0;

assign m_axi_gmem0_0_ARLOCK = 2'd0;

assign m_axi_gmem0_0_ARPROT = 3'd0;

assign m_axi_gmem0_0_ARQOS = 4'd0;

assign m_axi_gmem0_0_ARREGION = 4'd0;

assign m_axi_gmem0_0_ARSIZE = 3'd0;

assign m_axi_gmem0_0_ARUSER = 1'd0;

assign m_axi_gmem0_0_ARVALID = 1'b0;

assign m_axi_gmem0_0_AWADDR = 64'd0;

assign m_axi_gmem0_0_AWBURST = 2'd0;

assign m_axi_gmem0_0_AWCACHE = 4'd0;

assign m_axi_gmem0_0_AWID = 1'd0;

assign m_axi_gmem0_0_AWLEN = 32'd0;

assign m_axi_gmem0_0_AWLOCK = 2'd0;

assign m_axi_gmem0_0_AWPROT = 3'd0;

assign m_axi_gmem0_0_AWQOS = 4'd0;

assign m_axi_gmem0_0_AWREGION = 4'd0;

assign m_axi_gmem0_0_AWSIZE = 3'd0;

assign m_axi_gmem0_0_AWUSER = 1'd0;

assign m_axi_gmem0_0_AWVALID = 1'b0;

assign m_axi_gmem0_0_BREADY = 1'b0;

assign m_axi_gmem0_0_RREADY = 1'b0;

assign m_axi_gmem0_0_WID = 1'd0;

assign m_axi_gmem0_0_WLAST = 1'b0;

assign m_axi_gmem0_0_WSTRB = 4'd15;

assign m_axi_gmem0_0_WUSER = 1'd0;

assign or_ln151_10_fu_2924_p2 = (icmp_ln151_21_fu_2918_p2 | icmp_ln151_20_fu_2912_p2);

assign or_ln151_11_fu_2974_p2 = (icmp_ln151_23_fu_2968_p2 | icmp_ln151_22_fu_2962_p2);

assign or_ln151_12_fu_3023_p2 = (icmp_ln151_25_fu_3017_p2 | icmp_ln151_24_fu_3011_p2);

assign or_ln151_1_fu_2474_p2 = (icmp_ln151_3_fu_2468_p2 | icmp_ln151_2_fu_2462_p2);

assign or_ln151_2_fu_2524_p2 = (icmp_ln151_5_fu_2518_p2 | icmp_ln151_4_fu_2512_p2);

assign or_ln151_3_fu_2574_p2 = (icmp_ln151_7_fu_2568_p2 | icmp_ln151_6_fu_2562_p2);

assign or_ln151_4_fu_2624_p2 = (icmp_ln151_9_fu_2618_p2 | icmp_ln151_8_fu_2612_p2);

assign or_ln151_5_fu_2674_p2 = (icmp_ln151_11_fu_2668_p2 | icmp_ln151_10_fu_2662_p2);

assign or_ln151_6_fu_2724_p2 = (icmp_ln151_13_fu_2718_p2 | icmp_ln151_12_fu_2712_p2);

assign or_ln151_7_fu_2774_p2 = (icmp_ln151_15_fu_2768_p2 | icmp_ln151_14_fu_2762_p2);

assign or_ln151_8_fu_2824_p2 = (icmp_ln151_17_fu_2818_p2 | icmp_ln151_16_fu_2812_p2);

assign or_ln151_9_fu_2874_p2 = (icmp_ln151_19_fu_2868_p2 | icmp_ln151_18_fu_2862_p2);

assign or_ln151_fu_2424_p2 = (icmp_ln151_fu_2412_p2 | icmp_ln151_1_fu_2418_p2);

assign select_ln144_10_fu_2936_p3 = ((and_ln151_10_fu_2930_p2[0:0] == 1'b1) ? bitcast_ln151_10_fu_2894_p1 : 32'd0);

assign select_ln144_11_fu_2986_p3 = ((and_ln151_11_fu_2980_p2[0:0] == 1'b1) ? bitcast_ln151_11_fu_2944_p1 : 32'd0);

assign select_ln144_12_fu_3035_p3 = ((and_ln151_12_fu_3029_p2[0:0] == 1'b1) ? bitcast_ln151_12_fu_2994_p1 : 32'd0);

assign select_ln144_1_fu_2486_p3 = ((and_ln151_1_fu_2480_p2[0:0] == 1'b1) ? bitcast_ln151_1_fu_2444_p1 : 32'd0);

assign select_ln144_2_fu_2536_p3 = ((and_ln151_2_fu_2530_p2[0:0] == 1'b1) ? bitcast_ln151_2_fu_2494_p1 : 32'd0);

assign select_ln144_3_fu_2586_p3 = ((and_ln151_3_fu_2580_p2[0:0] == 1'b1) ? bitcast_ln151_3_fu_2544_p1 : 32'd0);

assign select_ln144_4_fu_2636_p3 = ((and_ln151_4_fu_2630_p2[0:0] == 1'b1) ? bitcast_ln151_4_fu_2594_p1 : 32'd0);

assign select_ln144_5_fu_2686_p3 = ((and_ln151_5_fu_2680_p2[0:0] == 1'b1) ? bitcast_ln151_5_fu_2644_p1 : 32'd0);

assign select_ln144_6_fu_2736_p3 = ((and_ln151_6_fu_2730_p2[0:0] == 1'b1) ? bitcast_ln151_6_fu_2694_p1 : 32'd0);

assign select_ln144_7_fu_2786_p3 = ((and_ln151_7_fu_2780_p2[0:0] == 1'b1) ? bitcast_ln151_7_fu_2744_p1 : 32'd0);

assign select_ln144_8_fu_2836_p3 = ((and_ln151_8_fu_2830_p2[0:0] == 1'b1) ? bitcast_ln151_8_fu_2794_p1 : 32'd0);

assign select_ln144_9_fu_2886_p3 = ((and_ln151_9_fu_2880_p2[0:0] == 1'b1) ? bitcast_ln151_9_fu_2844_p1 : 32'd0);

assign select_ln144_fu_2436_p3 = ((and_ln151_fu_2430_p2[0:0] == 1'b1) ? bitcast_ln151_fu_2394_p1 : 32'd0);

assign tmp_10_fu_2269_p27 = 'bx;

assign tmp_11_fu_2329_p27 = 'bx;

assign tmp_12_fu_2398_p4 = {{bitcast_ln151_fu_2394_p1[30:23]}};

assign tmp_14_fu_2448_p4 = {{bitcast_ln151_1_fu_2444_p1[30:23]}};

assign tmp_16_fu_2498_p4 = {{bitcast_ln151_2_fu_2494_p1[30:23]}};

assign tmp_18_fu_2548_p4 = {{bitcast_ln151_3_fu_2544_p1[30:23]}};

assign tmp_1_fu_1669_p27 = 'bx;

assign tmp_20_fu_2598_p4 = {{bitcast_ln151_4_fu_2594_p1[30:23]}};

assign tmp_22_fu_2648_p4 = {{bitcast_ln151_5_fu_2644_p1[30:23]}};

assign tmp_24_fu_2698_p4 = {{bitcast_ln151_6_fu_2694_p1[30:23]}};

assign tmp_26_fu_2748_p4 = {{bitcast_ln151_7_fu_2744_p1[30:23]}};

assign tmp_28_fu_2798_p4 = {{bitcast_ln151_8_fu_2794_p1[30:23]}};

assign tmp_2_fu_1729_p27 = 'bx;

assign tmp_30_fu_2848_p4 = {{bitcast_ln151_9_fu_2844_p1[30:23]}};

assign tmp_32_fu_2898_p4 = {{bitcast_ln151_10_fu_2894_p1[30:23]}};

assign tmp_34_fu_2948_p4 = {{bitcast_ln151_11_fu_2944_p1[30:23]}};

assign tmp_36_fu_2997_p4 = {{bitcast_ln151_12_fu_2994_p1[30:23]}};

assign tmp_3_fu_1789_p27 = 'bx;

assign tmp_4_fu_1849_p27 = 'bx;

assign tmp_5_fu_1909_p27 = 'bx;

assign tmp_6_fu_1969_p27 = 'bx;

assign tmp_7_fu_2029_p27 = 'bx;

assign tmp_8_fu_2089_p27 = 'bx;

assign tmp_9_fu_2149_p27 = 'bx;

assign tmp_fu_1609_p27 = 'bx;

assign tmp_s_fu_2209_p27 = 'bx;

assign trunc_ln151_10_fu_2908_p1 = bitcast_ln151_10_fu_2894_p1[22:0];

assign trunc_ln151_11_fu_2958_p1 = bitcast_ln151_11_fu_2944_p1[22:0];

assign trunc_ln151_12_fu_3007_p1 = bitcast_ln151_12_fu_2994_p1[22:0];

assign trunc_ln151_1_fu_2458_p1 = bitcast_ln151_1_fu_2444_p1[22:0];

assign trunc_ln151_2_fu_2508_p1 = bitcast_ln151_2_fu_2494_p1[22:0];

assign trunc_ln151_3_fu_2558_p1 = bitcast_ln151_3_fu_2544_p1[22:0];

assign trunc_ln151_4_fu_2608_p1 = bitcast_ln151_4_fu_2594_p1[22:0];

assign trunc_ln151_5_fu_2658_p1 = bitcast_ln151_5_fu_2644_p1[22:0];

assign trunc_ln151_6_fu_2708_p1 = bitcast_ln151_6_fu_2694_p1[22:0];

assign trunc_ln151_7_fu_2758_p1 = bitcast_ln151_7_fu_2744_p1[22:0];

assign trunc_ln151_8_fu_2808_p1 = bitcast_ln151_8_fu_2794_p1[22:0];

assign trunc_ln151_9_fu_2858_p1 = bitcast_ln151_9_fu_2844_p1[22:0];

assign trunc_ln151_fu_2408_p1 = bitcast_ln151_fu_2394_p1[22:0];

endmodule //conv3_conv3_Pipeline_M1
