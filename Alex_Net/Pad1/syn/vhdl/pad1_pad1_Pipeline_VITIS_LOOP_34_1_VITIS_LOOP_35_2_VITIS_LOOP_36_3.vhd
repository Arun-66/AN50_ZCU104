-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pad1_pad1_Pipeline_VITIS_LOOP_34_1_VITIS_LOOP_35_2_VITIS_LOOP_36_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    pad : IN STD_LOGIC_VECTOR (31 downto 0);
    sub : IN STD_LOGIC_VECTOR (31 downto 0);
    empty : IN STD_LOGIC_VECTOR (16 downto 0);
    inp_img_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    inp_img_ce0 : OUT STD_LOGIC;
    inp_img_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_img_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    out_img_ce0 : OUT STD_LOGIC;
    out_img_we0 : OUT STD_LOGIC;
    out_img_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of pad1_pad1_Pipeline_VITIS_LOOP_34_1_VITIS_LOOP_35_2_VITIS_LOOP_36_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv10_3C1 : STD_LOGIC_VECTOR (9 downto 0) := "1111000001";
    constant ap_const_lv17_1685F : STD_LOGIC_VECTOR (16 downto 0) := "10110100001011111";
    constant ap_const_lv17_3C1 : STD_LOGIC_VECTOR (16 downto 0) := "00000001111000001";
    constant ap_const_lv17_2D9 : STD_LOGIC_VECTOR (16 downto 0) := "00000001011011001";
    constant ap_const_lv17_1B : STD_LOGIC_VECTOR (16 downto 0) := "00000000000011011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln34_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal icmp_ln3521_reg_140 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3620_reg_151 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_mid2_fu_250_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_mid2_reg_548 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_mid2_reg_548_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_fu_258_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_553 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_553_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_553_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln34_fu_266_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal or_ln39_1_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_1_reg_565 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_1_reg_565_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_1_reg_565_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_1_reg_565_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_570 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_reg_575 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_580 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln36_fu_412_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln45_fu_435_p2 : STD_LOGIC_VECTOR (16 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln45_fu_435_p2 : signal is "no";
    signal add_ln45_reg_590 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_phi_mux_icmp_ln3521_phi_fu_144_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_icmp_ln3620_phi_fu_155_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln45_1_fu_444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten1215_fu_72 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal add_ln34_1_fu_352_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal c16_fu_76 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal c_fu_230_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten17_fu_80 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal select_ln35_1_fu_344_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal i18_fu_84 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal j19_fu_88 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal j_fu_332_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln3422_fu_92 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln34_fu_370_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal inp_img_ce0_local : STD_LOGIC;
    signal out_img_we0_local : STD_LOGIC;
    signal empty_11_fu_453_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_img_ce0_local : STD_LOGIC;
    signal xor_ln34_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_fu_210_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln34_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_5_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln35_fu_238_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln35_2_fu_274_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln36_1_fu_294_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln39_1_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp9_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln39_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_2_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln35_1_fu_338_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_fu_418_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln35_1_fu_415_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_8_fu_425_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_461_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_cast8_fu_431_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln45_1_fu_440_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_478_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_470_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln45_1_fu_440_p2 : STD_LOGIC_VECTOR (16 downto 0);
    attribute use_dsp48 of add_ln45_1_fu_440_p2 : signal is "no";
    signal grp_fu_461_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_461_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_461_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_470_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_470_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_478_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_478_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_478_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal grp_fu_478_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component pad1_mac_muladd_10ns_7ns_5ns_17_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component pad1_mac_mul_sub_10ns_7ns_17ns_17_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component pad1_ama_submuladd_5ns_17ns_5ns_5ns_17_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        din3 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component pad1_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_10ns_7ns_5ns_17_4_1_U1 : component pad1_mac_muladd_10ns_7ns_5ns_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 7,
        din2_WIDTH => 5,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_461_p0,
        din1 => grp_fu_461_p1,
        din2 => grp_fu_461_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_461_p3);

    mac_mul_sub_10ns_7ns_17ns_17_4_1_U2 : component pad1_mac_mul_sub_10ns_7ns_17ns_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 7,
        din2_WIDTH => 17,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_470_p0,
        din1 => grp_fu_470_p1,
        din2 => empty,
        ce => ap_const_logic_1,
        dout => grp_fu_470_p3);

    ama_submuladd_5ns_17ns_5ns_5ns_17_4_1_U3 : component pad1_ama_submuladd_5ns_17ns_5ns_5ns_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 5,
        din1_WIDTH => 17,
        din2_WIDTH => 5,
        din3_WIDTH => 5,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_478_p0,
        din1 => empty,
        din2 => grp_fu_478_p2,
        din3 => grp_fu_478_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_478_p4);

    flow_control_loop_pipe_sequential_init_U : component pad1_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    add_ln3422_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add_ln3422_fu_92 <= ap_const_lv7_1;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    add_ln3422_fu_92 <= add_ln34_fu_370_p2;
                end if;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_0))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    c16_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    c16_fu_76 <= ap_const_lv7_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    c16_fu_76 <= c_fu_230_p3;
                end if;
            end if; 
        end if;
    end process;

    i18_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i18_fu_84 <= ap_const_lv5_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    i18_fu_84 <= i_fu_258_p3;
                end if;
            end if; 
        end if;
    end process;

    icmp_ln3521_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln34_reg_580 = ap_const_lv1_0))) then 
                icmp_ln3521_reg_140 <= icmp_ln35_reg_575;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                icmp_ln3521_reg_140 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    icmp_ln3620_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln34_reg_580 = ap_const_lv1_0))) then 
                icmp_ln3620_reg_151 <= icmp_ln36_reg_570;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                icmp_ln3620_reg_151 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    indvar_flatten1215_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten1215_fu_72 <= ap_const_lv17_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    indvar_flatten1215_fu_72 <= add_ln34_1_fu_352_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten17_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten17_fu_80 <= ap_const_lv10_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    indvar_flatten17_fu_80 <= select_ln35_1_fu_344_p3;
                end if;
            end if; 
        end if;
    end process;

    j19_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j19_fu_88 <= ap_const_lv5_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    j19_fu_88 <= j_fu_332_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln45_reg_590 <= add_ln45_fu_435_p2;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                i_reg_553_pp0_iter2_reg <= i_reg_553;
                i_reg_553_pp0_iter3_reg <= i_reg_553_pp0_iter2_reg;
                j_mid2_reg_548_pp0_iter2_reg <= j_mid2_reg_548;
                or_ln39_1_reg_565_pp0_iter2_reg <= or_ln39_1_reg_565;
                or_ln39_1_reg_565_pp0_iter3_reg <= or_ln39_1_reg_565_pp0_iter2_reg;
                or_ln39_1_reg_565_pp0_iter4_reg <= or_ln39_1_reg_565_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                i_reg_553 <= i_fu_258_p3;
                icmp_ln34_reg_580 <= icmp_ln34_fu_376_p2;
                j_mid2_reg_548 <= j_mid2_fu_250_p3;
                or_ln39_1_reg_565 <= or_ln39_1_fu_326_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln35_reg_575 <= icmp_ln35_fu_364_p2;
                icmp_ln36_reg_570 <= icmp_ln36_fu_358_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln34_1_fu_352_p2 <= std_logic_vector(unsigned(indvar_flatten1215_fu_72) + unsigned(ap_const_lv17_1));
    add_ln34_fu_370_p2 <= std_logic_vector(unsigned(c_fu_230_p3) + unsigned(ap_const_lv7_1));
    add_ln35_1_fu_338_p2 <= std_logic_vector(unsigned(indvar_flatten17_fu_80) + unsigned(ap_const_lv10_1));
    add_ln35_fu_238_p2 <= std_logic_vector(unsigned(select_ln34_fu_210_p3) + unsigned(ap_const_lv5_1));
    add_ln45_1_fu_440_p0 <= grp_fu_478_p4;
    add_ln45_1_fu_440_p2 <= std_logic_vector(signed(add_ln45_1_fu_440_p0) + signed(grp_fu_470_p3));
    add_ln45_fu_435_p2 <= std_logic_vector(unsigned(grp_fu_461_p3) + unsigned(p_cast8_fu_431_p1));
    and_ln34_fu_224_p2 <= (xor_ln34_fu_218_p2 and ap_phi_mux_icmp_ln3620_phi_fu_155_p4);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln34_fu_376_p2)
    begin
        if (((icmp_ln34_fu_376_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_phi_mux_icmp_ln3521_phi_fu_144_p4_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln3521_reg_140, icmp_ln35_reg_575, icmp_ln34_reg_580, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln34_reg_580 = ap_const_lv1_0))) then 
            ap_phi_mux_icmp_ln3521_phi_fu_144_p4 <= icmp_ln35_reg_575;
        else 
            ap_phi_mux_icmp_ln3521_phi_fu_144_p4 <= icmp_ln3521_reg_140;
        end if; 
    end process;


    ap_phi_mux_icmp_ln3620_phi_fu_155_p4_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln3620_reg_151, icmp_ln36_reg_570, icmp_ln34_reg_580, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln34_reg_580 = ap_const_lv1_0))) then 
            ap_phi_mux_icmp_ln3620_phi_fu_155_p4 <= icmp_ln36_reg_570;
        else 
            ap_phi_mux_icmp_ln3620_phi_fu_155_p4 <= icmp_ln3620_reg_151;
        end if; 
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_230_p3 <= 
        add_ln3422_fu_92 when (ap_phi_mux_icmp_ln3521_phi_fu_144_p4(0) = '1') else 
        c16_fu_76;
    cmp9_fu_278_p2 <= "1" when (signed(zext_ln35_2_fu_274_p1) < signed(pad)) else "0";
    empty_11_fu_453_p3 <= 
        ap_const_lv32_0 when (or_ln39_1_reg_565_pp0_iter4_reg(0) = '1') else 
        inp_img_q0;
    empty_5_fu_244_p2 <= (ap_phi_mux_icmp_ln3521_phi_fu_144_p4 or and_ln34_fu_224_p2);
    empty_8_fu_425_p2 <= std_logic_vector(unsigned(p_shl_fu_418_p3) - unsigned(zext_ln35_1_fu_415_p1));
    grp_fu_461_p0 <= ap_const_lv17_3C1(10 - 1 downto 0);
    grp_fu_461_p1 <= zext_ln34_fu_266_p1(7 - 1 downto 0);
    grp_fu_461_p2 <= zext_ln36_fu_412_p1(5 - 1 downto 0);
    grp_fu_470_p0 <= ap_const_lv17_2D9(10 - 1 downto 0);
    grp_fu_470_p1 <= zext_ln34_fu_266_p1(7 - 1 downto 0);
    grp_fu_478_p0 <= grp_fu_478_p00(5 - 1 downto 0);
    grp_fu_478_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_258_p3),17));
    grp_fu_478_p2 <= ap_const_lv17_1B(5 - 1 downto 0);
    grp_fu_478_p3 <= zext_ln36_fu_412_p1(5 - 1 downto 0);
    i_fu_258_p3 <= 
        add_ln35_fu_238_p2 when (and_ln34_fu_224_p2(0) = '1') else 
        select_ln34_fu_210_p3;
    icmp_ln34_fu_376_p2 <= "1" when (indvar_flatten1215_fu_72 = ap_const_lv17_1685F) else "0";
    icmp_ln35_fu_364_p2 <= "1" when (select_ln35_1_fu_344_p3 = ap_const_lv10_3C1) else "0";
    icmp_ln36_fu_358_p2 <= "1" when (j_fu_332_p2 = ap_const_lv5_1F) else "0";
    icmp_ln39_1_fu_303_p2 <= "1" when (signed(zext_ln36_1_fu_294_p1) < signed(sub)) else "0";
    icmp_ln39_fu_298_p2 <= "1" when (signed(zext_ln36_1_fu_294_p1) < signed(pad)) else "0";
    inp_img_address0 <= zext_ln45_1_fu_444_p1(17 - 1 downto 0);
    inp_img_ce0 <= inp_img_ce0_local;

    inp_img_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            inp_img_ce0_local <= ap_const_logic_1;
        else 
            inp_img_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_332_p2 <= std_logic_vector(unsigned(j_mid2_fu_250_p3) + unsigned(ap_const_lv5_1));
    j_mid2_fu_250_p3 <= 
        ap_const_lv5_0 when (empty_5_fu_244_p2(0) = '1') else 
        j19_fu_88;
    or_ln39_1_fu_326_p2 <= (or_ln39_fu_314_p2 or or_ln39_2_fu_320_p2);
    or_ln39_2_fu_320_p2 <= (xor_ln39_fu_308_p2 or icmp_ln39_fu_298_p2);
    or_ln39_fu_314_p2 <= (rev_fu_288_p2 or cmp9_fu_278_p2);
    out_img_address0 <= zext_ln45_fu_449_p1(17 - 1 downto 0);
    out_img_ce0 <= out_img_ce0_local;

    out_img_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            out_img_ce0_local <= ap_const_logic_1;
        else 
            out_img_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_img_d0 <= empty_11_fu_453_p3;
    out_img_we0 <= out_img_we0_local;

    out_img_we0_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            out_img_we0_local <= ap_const_logic_1;
        else 
            out_img_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    p_cast8_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_8_fu_425_p2),17));
    p_shl_fu_418_p3 <= (i_reg_553_pp0_iter3_reg & ap_const_lv5_0);
    rev_fu_288_p2 <= (slt_fu_283_p2 xor ap_const_lv1_1);
    select_ln34_fu_210_p3 <= 
        ap_const_lv5_0 when (ap_phi_mux_icmp_ln3521_phi_fu_144_p4(0) = '1') else 
        i18_fu_84;
    select_ln35_1_fu_344_p3 <= 
        ap_const_lv10_1 when (ap_phi_mux_icmp_ln3521_phi_fu_144_p4(0) = '1') else 
        add_ln35_1_fu_338_p2;
    slt_fu_283_p2 <= "1" when (signed(zext_ln35_2_fu_274_p1) < signed(sub)) else "0";
    xor_ln34_fu_218_p2 <= (ap_phi_mux_icmp_ln3521_phi_fu_144_p4 xor ap_const_lv1_1);
    xor_ln39_fu_308_p2 <= (icmp_ln39_1_fu_303_p2 xor ap_const_lv1_1);
    zext_ln34_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_fu_230_p3),17));
    zext_ln35_1_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_553_pp0_iter3_reg),10));
    zext_ln35_2_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_258_p3),32));
    zext_ln36_1_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_fu_250_p3),32));
    zext_ln36_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_reg_548_pp0_iter2_reg),17));
    zext_ln45_1_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln45_1_fu_440_p2),64));
    zext_ln45_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln45_reg_590),64));
end behav;
