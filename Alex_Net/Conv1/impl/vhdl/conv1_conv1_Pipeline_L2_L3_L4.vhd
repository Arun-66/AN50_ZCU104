-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv1_conv1_Pipeline_L2_L3_L4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_0_AWREADY : IN STD_LOGIC;
    m_axi_gmem_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_WVALID : OUT STD_LOGIC;
    m_axi_gmem_0_WREADY : IN STD_LOGIC;
    m_axi_gmem_0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_WLAST : OUT STD_LOGIC;
    m_axi_gmem_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_0_ARREADY : IN STD_LOGIC;
    m_axi_gmem_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_RVALID : IN STD_LOGIC;
    m_axi_gmem_0_RREADY : OUT STD_LOGIC;
    m_axi_gmem_0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_0_RLAST : IN STD_LOGIC;
    m_axi_gmem_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_BVALID : IN STD_LOGIC;
    m_axi_gmem_0_BREADY : OUT STD_LOGIC;
    m_axi_gmem_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    line_buffer_3D_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    line_buffer_3D_ce0 : OUT STD_LOGIC;
    line_buffer_3D_we0 : OUT STD_LOGIC;
    line_buffer_3D_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    line_buffer_3D_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    line_buffer_3D_1_ce0 : OUT STD_LOGIC;
    line_buffer_3D_1_we0 : OUT STD_LOGIC;
    line_buffer_3D_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    line_buffer_3D_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    line_buffer_3D_2_ce0 : OUT STD_LOGIC;
    line_buffer_3D_2_we0 : OUT STD_LOGIC;
    line_buffer_3D_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    line_buffer_3D_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    line_buffer_3D_3_ce0 : OUT STD_LOGIC;
    line_buffer_3D_3_we0 : OUT STD_LOGIC;
    line_buffer_3D_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    line_buffer_3D_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    line_buffer_3D_4_ce0 : OUT STD_LOGIC;
    line_buffer_3D_4_we0 : OUT STD_LOGIC;
    line_buffer_3D_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    line_buffer_3D_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    line_buffer_3D_5_ce0 : OUT STD_LOGIC;
    line_buffer_3D_5_we0 : OUT STD_LOGIC;
    line_buffer_3D_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    line_buffer_3D_6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    line_buffer_3D_6_ce0 : OUT STD_LOGIC;
    line_buffer_3D_6_we0 : OUT STD_LOGIC;
    line_buffer_3D_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    inp_img : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of conv1_conv1_Pipeline_L2_L3_L4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_635 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000011000110101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv13_129F : STD_LOGIC_VECTOR (12 downto 0) := "1001010011111";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv11_635 : STD_LOGIC_VECTOR (10 downto 0) := "11000110101";
    constant ap_const_lv8_E3 : STD_LOGIC_VECTOR (7 downto 0) := "11100011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv20_32524 : STD_LOGIC_VECTOR (19 downto 0) := "00110010010100100100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv10_E3 : STD_LOGIC_VECTOR (9 downto 0) := "0011100011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal first_iter_0_reg_564 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_1_mid2_reg_556 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op73_readreq_state3 : BOOLEAN;
    signal ap_block_state3_io_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone_grp1_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage0_subdone_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_subdone_grp2_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage0_subdone_grp2 : BOOLEAN;
    signal icmp_ln91_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0_grp2 : BOOLEAN;
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage0_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln91_1_fu_339_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln91_1_reg_546 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln91_1_reg_546_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln91_1_reg_546_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln91_1_reg_546_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln91_1_reg_546_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln91_1_reg_546_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln91_1_reg_546_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal j_mid2_fu_359_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_mid2_reg_551 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_mid2_reg_551_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal j_mid2_reg_551_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal j_mid2_reg_551_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal j_mid2_reg_551_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal j_mid2_reg_551_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal j_mid2_reg_551_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal j_mid2_reg_551_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal j_mid2_reg_551_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal first_iter_1_mid2_fu_367_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln93_fu_375_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln93_reg_560 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln93_reg_560_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln93_reg_560_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln93_reg_560_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln93_reg_560_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln93_reg_560_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln93_reg_560_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln93_reg_560_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln93_reg_560_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln93_reg_560_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal first_iter_0_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_reg_568 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone_grp0_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage0_subdone_grp0 : BOOLEAN;
    signal bitcast_ln98_fu_479_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln98_reg_584 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001_grp2 : BOOLEAN;
    signal zext_ln98_2_fu_483_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_grp0 : BOOLEAN;
    signal sext_ln93_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_grp1 : BOOLEAN;
    signal j_fu_108 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal add_ln95_fu_428_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_112 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal indvar_flatten_fu_116 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal select_ln93_1_fu_440_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal c_fu_120 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal indvar_flatten20_fu_124 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal add_ln91_2_fu_274_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal line_buffer_3D_5_we0_local : STD_LOGIC;
    signal line_buffer_3D_5_ce0_local : STD_LOGIC;
    signal line_buffer_3D_4_we0_local : STD_LOGIC;
    signal line_buffer_3D_4_ce0_local : STD_LOGIC;
    signal line_buffer_3D_3_we0_local : STD_LOGIC;
    signal line_buffer_3D_3_ce0_local : STD_LOGIC;
    signal line_buffer_3D_2_we0_local : STD_LOGIC;
    signal line_buffer_3D_2_ce0_local : STD_LOGIC;
    signal line_buffer_3D_1_we0_local : STD_LOGIC;
    signal line_buffer_3D_1_ce0_local : STD_LOGIC;
    signal line_buffer_3D_we0_local : STD_LOGIC;
    signal line_buffer_3D_ce0_local : STD_LOGIC;
    signal line_buffer_3D_6_we0_local : STD_LOGIC;
    signal line_buffer_3D_6_ce0_local : STD_LOGIC;
    signal icmp_ln93_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_129_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln91_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln91_1_fu_289_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln91_fu_301_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln91_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_37_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln91_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln93_fu_347_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln91_fu_393_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln91_fu_393_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln91_fu_393_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln91_1_fu_399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln91_fu_403_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_408_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln93_1_fu_434_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_493_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_493_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_493_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_493_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_493_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal grp_fu_493_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_493_p20 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln91_fu_393_p00 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component conv1_mul_2ns_19ns_20_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component conv1_mac_muladd_8ns_2ns_8ns_10_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component conv1_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_2ns_19ns_20_1_1_U1 : component conv1_mul_2ns_19ns_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 19,
        dout_WIDTH => 20)
    port map (
        din0 => mul_ln91_fu_393_p0,
        din1 => mul_ln91_fu_393_p1,
        dout => mul_ln91_fu_393_p2);

    mac_muladd_8ns_2ns_8ns_10_4_1_U2 : component conv1_mac_muladd_8ns_2ns_8ns_10_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 8,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_493_p0,
        din1 => grp_fu_493_p1,
        din2 => grp_fu_493_p2,
        ce => grp_fu_493_ce,
        dout => grp_fu_493_p3);

    flow_control_loop_pipe_sequential_init_U : component conv1_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_block_pp0_stage0_subdone_grp0_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage0_subdone_grp0_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_block_pp0_stage0_subdone_grp0_done_reg <= ap_const_boolean_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0)) then 
                    ap_block_pp0_stage0_subdone_grp0_done_reg <= ap_const_boolean_1;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage0_subdone_grp1_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage0_subdone_grp1_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_block_pp0_stage0_subdone_grp1_done_reg <= ap_const_boolean_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1)) then 
                    ap_block_pp0_stage0_subdone_grp1_done_reg <= ap_const_boolean_1;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage0_subdone_grp2_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage0_subdone_grp2_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_block_pp0_stage0_subdone_grp2_done_reg <= ap_const_boolean_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp2)) then 
                    ap_block_pp0_stage0_subdone_grp2_done_reg <= ap_const_boolean_1;
                end if; 
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    c_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    c_fu_120 <= ap_const_lv2_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln91_fu_268_p2 = ap_const_lv1_0))) then 
                    c_fu_120 <= select_ln91_1_fu_339_p3;
                end if;
            end if; 
        end if;
    end process;

    i_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_112 <= ap_const_lv4_4;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln91_fu_268_p2 = ap_const_lv1_0))) then 
                    i_fu_112 <= select_ln93_fu_375_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten20_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten20_fu_124 <= ap_const_lv13_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln91_fu_268_p2 = ap_const_lv1_0))) then 
                    indvar_flatten20_fu_124 <= add_ln91_2_fu_274_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_116 <= ap_const_lv11_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln91_fu_268_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_116 <= select_ln93_1_fu_440_p3;
                end if;
            end if; 
        end if;
    end process;

    j_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_108 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln91_fu_268_p2 = ap_const_lv1_0))) then 
                    j_fu_108 <= add_ln95_fu_428_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                j_mid2_reg_551_pp0_iter2_reg <= j_mid2_reg_551;
                j_mid2_reg_551_pp0_iter3_reg <= j_mid2_reg_551_pp0_iter2_reg;
                j_mid2_reg_551_pp0_iter4_reg <= j_mid2_reg_551_pp0_iter3_reg;
                j_mid2_reg_551_pp0_iter5_reg <= j_mid2_reg_551_pp0_iter4_reg;
                j_mid2_reg_551_pp0_iter6_reg <= j_mid2_reg_551_pp0_iter5_reg;
                j_mid2_reg_551_pp0_iter7_reg <= j_mid2_reg_551_pp0_iter6_reg;
                j_mid2_reg_551_pp0_iter8_reg <= j_mid2_reg_551_pp0_iter7_reg;
                j_mid2_reg_551_pp0_iter9_reg <= j_mid2_reg_551_pp0_iter8_reg;
                select_ln91_1_reg_546_pp0_iter2_reg <= select_ln91_1_reg_546;
                select_ln91_1_reg_546_pp0_iter3_reg <= select_ln91_1_reg_546_pp0_iter2_reg;
                select_ln91_1_reg_546_pp0_iter4_reg <= select_ln91_1_reg_546_pp0_iter3_reg;
                select_ln91_1_reg_546_pp0_iter5_reg <= select_ln91_1_reg_546_pp0_iter4_reg;
                select_ln91_1_reg_546_pp0_iter6_reg <= select_ln91_1_reg_546_pp0_iter5_reg;
                select_ln91_1_reg_546_pp0_iter7_reg <= select_ln91_1_reg_546_pp0_iter6_reg;
                select_ln93_reg_560_pp0_iter10_reg <= select_ln93_reg_560_pp0_iter9_reg;
                select_ln93_reg_560_pp0_iter2_reg <= select_ln93_reg_560;
                select_ln93_reg_560_pp0_iter3_reg <= select_ln93_reg_560_pp0_iter2_reg;
                select_ln93_reg_560_pp0_iter4_reg <= select_ln93_reg_560_pp0_iter3_reg;
                select_ln93_reg_560_pp0_iter5_reg <= select_ln93_reg_560_pp0_iter4_reg;
                select_ln93_reg_560_pp0_iter6_reg <= select_ln93_reg_560_pp0_iter5_reg;
                select_ln93_reg_560_pp0_iter7_reg <= select_ln93_reg_560_pp0_iter6_reg;
                select_ln93_reg_560_pp0_iter8_reg <= select_ln93_reg_560_pp0_iter7_reg;
                select_ln93_reg_560_pp0_iter9_reg <= select_ln93_reg_560_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                first_iter_0_reg_564 <= first_iter_0_fu_383_p2;
                first_iter_1_mid2_reg_556 <= first_iter_1_mid2_fu_367_p3;
                gmem_addr_reg_568 <= sext_ln93_fu_418_p1;
                j_mid2_reg_551 <= j_mid2_fu_359_p3;
                select_ln91_1_reg_546 <= select_ln91_1_fu_339_p3;
                select_ln93_reg_560 <= select_ln93_fu_375_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp2_done_reg))) then
                bitcast_ln98_reg_584 <= bitcast_ln98_fu_479_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln91_1_fu_289_p2 <= std_logic_vector(unsigned(c_fu_120) + unsigned(ap_const_lv2_1));
    add_ln91_2_fu_274_p2 <= std_logic_vector(unsigned(indvar_flatten20_fu_124) + unsigned(ap_const_lv13_1));
    add_ln91_fu_403_p2 <= std_logic_vector(unsigned(zext_ln91_1_fu_399_p1) + unsigned(inp_img));
    add_ln93_1_fu_434_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_116) + unsigned(ap_const_lv11_1));
    add_ln93_fu_347_p2 <= std_logic_vector(unsigned(select_ln91_fu_301_p3) + unsigned(ap_const_lv4_1));
    add_ln95_fu_428_p2 <= std_logic_vector(unsigned(j_mid2_fu_359_p3) + unsigned(ap_const_lv8_1));
    and_ln91_fu_333_p2 <= (xor_ln91_fu_321_p2 and icmp_ln95_fu_327_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter10, m_axi_gmem_0_RVALID, ap_block_state3_io_grp1, ap_block_pp0_stage0_subdone_grp1_done_reg, ap_block_pp0_stage0_subdone_grp2_done_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((m_axi_gmem_0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp2_done_reg)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io_grp1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1_done_reg)));
    end process;

        ap_block_pp0_stage0_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_grp1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state3_io_grp1, ap_block_pp0_stage0_subdone_grp1_done_reg)
    begin
                ap_block_pp0_stage0_11001_grp1 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io_grp1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1_done_reg));
    end process;


    ap_block_pp0_stage0_11001_grp2_assign_proc : process(ap_enable_reg_pp0_iter10, m_axi_gmem_0_RVALID, ap_block_pp0_stage0_subdone_grp2_done_reg)
    begin
                ap_block_pp0_stage0_11001_grp2 <= ((m_axi_gmem_0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp2_done_reg));
    end process;

        ap_block_pp0_stage0_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_grp2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter10, m_axi_gmem_0_RVALID, ap_block_state3_io_grp1, ap_block_pp0_stage0_subdone_grp1_done_reg, ap_block_pp0_stage0_subdone_grp2_done_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((m_axi_gmem_0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp2_done_reg)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io_grp1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1_done_reg)));
    end process;

        ap_block_pp0_stage0_subdone_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_grp1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state3_io_grp1, ap_block_pp0_stage0_subdone_grp1_done_reg)
    begin
                ap_block_pp0_stage0_subdone_grp1 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io_grp1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1_done_reg));
    end process;


    ap_block_pp0_stage0_subdone_grp2_assign_proc : process(ap_enable_reg_pp0_iter10, m_axi_gmem_0_RVALID, ap_block_pp0_stage0_subdone_grp2_done_reg)
    begin
                ap_block_pp0_stage0_subdone_grp2 <= ((m_axi_gmem_0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp2_done_reg));
    end process;


    ap_block_state3_io_grp1_assign_proc : process(m_axi_gmem_0_ARREADY, ap_predicate_op73_readreq_state3)
    begin
                ap_block_state3_io_grp1 <= ((m_axi_gmem_0_ARREADY = ap_const_logic_0) and (ap_predicate_op73_readreq_state3 = ap_const_boolean_1));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln91_fu_268_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln91_fu_268_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter10_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_predicate_op73_readreq_state3_assign_proc : process(first_iter_0_reg_564, first_iter_1_mid2_reg_556)
    begin
                ap_predicate_op73_readreq_state3 <= ((first_iter_1_mid2_reg_556 = ap_const_lv1_1) and (first_iter_0_reg_564 = ap_const_lv1_1));
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln98_fu_479_p1 <= m_axi_gmem_0_RDATA;
    empty_37_fu_353_p2 <= (icmp_ln93_fu_295_p2 or and_ln91_fu_333_p2);
    first_iter_0_fu_383_p2 <= "1" when (j_mid2_fu_359_p3 = ap_const_lv8_0) else "0";
    first_iter_129_fu_309_p2 <= "1" when (i_fu_112 = ap_const_lv4_4) else "0";
    first_iter_1_mid2_fu_367_p3 <= 
        ap_const_lv1_0 when (and_ln91_fu_333_p2(0) = '1') else 
        or_ln91_fu_315_p2;

    gmem_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_gmem_0_ARREADY, ap_predicate_op73_readreq_state3, ap_block_pp0_stage0_subdone_grp1_done_reg, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1_done_reg) and (ap_predicate_op73_readreq_state3 = ap_const_boolean_1))) then 
            gmem_blk_n_AR <= m_axi_gmem_0_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter10, m_axi_gmem_0_RVALID, ap_block_pp0_stage0_subdone_grp2_done_reg, ap_block_pp0_stage0_grp2)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp2_done_reg))) then 
            gmem_blk_n_R <= m_axi_gmem_0_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_493_ce_assign_proc : process(ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0))) then 
            grp_fu_493_ce <= ap_const_logic_1;
        else 
            grp_fu_493_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_493_p0 <= ap_const_lv10_E3(8 - 1 downto 0);
    grp_fu_493_p1 <= grp_fu_493_p10(2 - 1 downto 0);
    grp_fu_493_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln91_1_reg_546_pp0_iter7_reg),10));
    grp_fu_493_p2 <= grp_fu_493_p20(8 - 1 downto 0);
    grp_fu_493_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_reg_551_pp0_iter9_reg),10));
    icmp_ln91_fu_268_p2 <= "1" when (indvar_flatten20_fu_124 = ap_const_lv13_129F) else "0";
    icmp_ln93_fu_295_p2 <= "1" when (indvar_flatten_fu_116 = ap_const_lv11_635) else "0";
    icmp_ln95_fu_327_p2 <= "1" when (j_fu_108 = ap_const_lv8_E3) else "0";
    j_mid2_fu_359_p3 <= 
        ap_const_lv8_0 when (empty_37_fu_353_p2(0) = '1') else 
        j_fu_108;
    line_buffer_3D_1_address0 <= zext_ln98_2_fu_483_p1(10 - 1 downto 0);
    line_buffer_3D_1_ce0 <= line_buffer_3D_1_ce0_local;

    line_buffer_3D_1_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0))) then 
            line_buffer_3D_1_ce0_local <= ap_const_logic_1;
        else 
            line_buffer_3D_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_3D_1_d0 <= bitcast_ln98_reg_584;
    line_buffer_3D_1_we0 <= line_buffer_3D_1_we0_local;

    line_buffer_3D_1_we0_local_assign_proc : process(ap_enable_reg_pp0_iter11, select_ln93_reg_560_pp0_iter10_reg, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (select_ln93_reg_560_pp0_iter10_reg = ap_const_lv4_5) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0))) then 
            line_buffer_3D_1_we0_local <= ap_const_logic_1;
        else 
            line_buffer_3D_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_3D_2_address0 <= zext_ln98_2_fu_483_p1(10 - 1 downto 0);
    line_buffer_3D_2_ce0 <= line_buffer_3D_2_ce0_local;

    line_buffer_3D_2_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0))) then 
            line_buffer_3D_2_ce0_local <= ap_const_logic_1;
        else 
            line_buffer_3D_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_3D_2_d0 <= bitcast_ln98_reg_584;
    line_buffer_3D_2_we0 <= line_buffer_3D_2_we0_local;

    line_buffer_3D_2_we0_local_assign_proc : process(ap_enable_reg_pp0_iter11, select_ln93_reg_560_pp0_iter10_reg, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (select_ln93_reg_560_pp0_iter10_reg = ap_const_lv4_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0))) then 
            line_buffer_3D_2_we0_local <= ap_const_logic_1;
        else 
            line_buffer_3D_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_3D_3_address0 <= zext_ln98_2_fu_483_p1(10 - 1 downto 0);
    line_buffer_3D_3_ce0 <= line_buffer_3D_3_ce0_local;

    line_buffer_3D_3_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0))) then 
            line_buffer_3D_3_ce0_local <= ap_const_logic_1;
        else 
            line_buffer_3D_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_3D_3_d0 <= bitcast_ln98_reg_584;
    line_buffer_3D_3_we0 <= line_buffer_3D_3_we0_local;

    line_buffer_3D_3_we0_local_assign_proc : process(ap_enable_reg_pp0_iter11, select_ln93_reg_560_pp0_iter10_reg, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (select_ln93_reg_560_pp0_iter10_reg = ap_const_lv4_7) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0))) then 
            line_buffer_3D_3_we0_local <= ap_const_logic_1;
        else 
            line_buffer_3D_3_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_3D_4_address0 <= zext_ln98_2_fu_483_p1(10 - 1 downto 0);
    line_buffer_3D_4_ce0 <= line_buffer_3D_4_ce0_local;

    line_buffer_3D_4_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0))) then 
            line_buffer_3D_4_ce0_local <= ap_const_logic_1;
        else 
            line_buffer_3D_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_3D_4_d0 <= bitcast_ln98_reg_584;
    line_buffer_3D_4_we0 <= line_buffer_3D_4_we0_local;

    line_buffer_3D_4_we0_local_assign_proc : process(ap_enable_reg_pp0_iter11, select_ln93_reg_560_pp0_iter10_reg, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (select_ln93_reg_560_pp0_iter10_reg = ap_const_lv4_8) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0))) then 
            line_buffer_3D_4_we0_local <= ap_const_logic_1;
        else 
            line_buffer_3D_4_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_3D_5_address0 <= zext_ln98_2_fu_483_p1(10 - 1 downto 0);
    line_buffer_3D_5_ce0 <= line_buffer_3D_5_ce0_local;

    line_buffer_3D_5_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0))) then 
            line_buffer_3D_5_ce0_local <= ap_const_logic_1;
        else 
            line_buffer_3D_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_3D_5_d0 <= bitcast_ln98_reg_584;
    line_buffer_3D_5_we0 <= line_buffer_3D_5_we0_local;

    line_buffer_3D_5_we0_local_assign_proc : process(ap_enable_reg_pp0_iter11, select_ln93_reg_560_pp0_iter10_reg, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (select_ln93_reg_560_pp0_iter10_reg = ap_const_lv4_9) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0))) then 
            line_buffer_3D_5_we0_local <= ap_const_logic_1;
        else 
            line_buffer_3D_5_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_3D_6_address0 <= zext_ln98_2_fu_483_p1(10 - 1 downto 0);
    line_buffer_3D_6_ce0 <= line_buffer_3D_6_ce0_local;

    line_buffer_3D_6_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0))) then 
            line_buffer_3D_6_ce0_local <= ap_const_logic_1;
        else 
            line_buffer_3D_6_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_3D_6_d0 <= bitcast_ln98_reg_584;
    line_buffer_3D_6_we0 <= line_buffer_3D_6_we0_local;

    line_buffer_3D_6_we0_local_assign_proc : process(ap_enable_reg_pp0_iter11, select_ln93_reg_560_pp0_iter10_reg, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if ((not((select_ln93_reg_560_pp0_iter10_reg = ap_const_lv4_4)) and not((select_ln93_reg_560_pp0_iter10_reg = ap_const_lv4_5)) and not((select_ln93_reg_560_pp0_iter10_reg = ap_const_lv4_6)) and not((select_ln93_reg_560_pp0_iter10_reg = ap_const_lv4_7)) and not((select_ln93_reg_560_pp0_iter10_reg = ap_const_lv4_8)) and not((select_ln93_reg_560_pp0_iter10_reg = ap_const_lv4_9)) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0))) then 
            line_buffer_3D_6_we0_local <= ap_const_logic_1;
        else 
            line_buffer_3D_6_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_3D_address0 <= zext_ln98_2_fu_483_p1(10 - 1 downto 0);
    line_buffer_3D_ce0 <= line_buffer_3D_ce0_local;

    line_buffer_3D_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0))) then 
            line_buffer_3D_ce0_local <= ap_const_logic_1;
        else 
            line_buffer_3D_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_3D_d0 <= bitcast_ln98_reg_584;
    line_buffer_3D_we0 <= line_buffer_3D_we0_local;

    line_buffer_3D_we0_local_assign_proc : process(ap_enable_reg_pp0_iter11, select_ln93_reg_560_pp0_iter10_reg, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (select_ln93_reg_560_pp0_iter10_reg = ap_const_lv4_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0))) then 
            line_buffer_3D_we0_local <= ap_const_logic_1;
        else 
            line_buffer_3D_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_0_ARADDR <= gmem_addr_reg_568;
    m_axi_gmem_0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_0_ARID <= ap_const_lv1_0;
    m_axi_gmem_0_ARLEN <= ap_const_lv64_635(32 - 1 downto 0);
    m_axi_gmem_0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_0_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_0_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op73_readreq_state3, ap_block_pp0_stage0_subdone_grp1_done_reg, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1_done_reg) and (ap_predicate_op73_readreq_state3 = ap_const_boolean_1))) then 
            m_axi_gmem_0_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_0_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_0_AWID <= ap_const_lv1_0;
    m_axi_gmem_0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_0_AWVALID <= ap_const_logic_0;
    m_axi_gmem_0_BREADY <= ap_const_logic_0;

    m_axi_gmem_0_RREADY_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_subdone_grp2_done_reg, ap_block_pp0_stage0_11001_grp2)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp2_done_reg))) then 
            m_axi_gmem_0_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_0_WDATA <= ap_const_lv32_0;
    m_axi_gmem_0_WID <= ap_const_lv1_0;
    m_axi_gmem_0_WLAST <= ap_const_logic_0;
    m_axi_gmem_0_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_0_WUSER <= ap_const_lv1_0;
    m_axi_gmem_0_WVALID <= ap_const_logic_0;
    mul_ln91_fu_393_p0 <= mul_ln91_fu_393_p00(2 - 1 downto 0);
    mul_ln91_fu_393_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln91_1_fu_339_p3),20));
    mul_ln91_fu_393_p1 <= ap_const_lv20_32524(19 - 1 downto 0);
    or_ln91_fu_315_p2 <= (icmp_ln93_fu_295_p2 or first_iter_129_fu_309_p2);
    select_ln91_1_fu_339_p3 <= 
        add_ln91_1_fu_289_p2 when (icmp_ln93_fu_295_p2(0) = '1') else 
        c_fu_120;
    select_ln91_fu_301_p3 <= 
        ap_const_lv4_4 when (icmp_ln93_fu_295_p2(0) = '1') else 
        i_fu_112;
    select_ln93_1_fu_440_p3 <= 
        ap_const_lv11_1 when (icmp_ln93_fu_295_p2(0) = '1') else 
        add_ln93_1_fu_434_p2;
    select_ln93_fu_375_p3 <= 
        add_ln93_fu_347_p2 when (and_ln91_fu_333_p2(0) = '1') else 
        select_ln91_fu_301_p3;
        sext_ln93_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_408_p4),64));

    trunc_ln_fu_408_p4 <= add_ln91_fu_403_p2(63 downto 2);
    xor_ln91_fu_321_p2 <= (icmp_ln93_fu_295_p2 xor ap_const_lv1_1);
    zext_ln91_1_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln91_fu_393_p2),64));
    zext_ln98_2_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_493_p3),64));
end behav;
