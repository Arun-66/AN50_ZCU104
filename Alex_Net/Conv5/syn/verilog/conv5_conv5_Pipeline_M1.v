// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module conv5_conv5_Pipeline_M1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem0_0_AWVALID,
        m_axi_gmem0_0_AWREADY,
        m_axi_gmem0_0_AWADDR,
        m_axi_gmem0_0_AWID,
        m_axi_gmem0_0_AWLEN,
        m_axi_gmem0_0_AWSIZE,
        m_axi_gmem0_0_AWBURST,
        m_axi_gmem0_0_AWLOCK,
        m_axi_gmem0_0_AWCACHE,
        m_axi_gmem0_0_AWPROT,
        m_axi_gmem0_0_AWQOS,
        m_axi_gmem0_0_AWREGION,
        m_axi_gmem0_0_AWUSER,
        m_axi_gmem0_0_WVALID,
        m_axi_gmem0_0_WREADY,
        m_axi_gmem0_0_WDATA,
        m_axi_gmem0_0_WSTRB,
        m_axi_gmem0_0_WLAST,
        m_axi_gmem0_0_WID,
        m_axi_gmem0_0_WUSER,
        m_axi_gmem0_0_ARVALID,
        m_axi_gmem0_0_ARREADY,
        m_axi_gmem0_0_ARADDR,
        m_axi_gmem0_0_ARID,
        m_axi_gmem0_0_ARLEN,
        m_axi_gmem0_0_ARSIZE,
        m_axi_gmem0_0_ARBURST,
        m_axi_gmem0_0_ARLOCK,
        m_axi_gmem0_0_ARCACHE,
        m_axi_gmem0_0_ARPROT,
        m_axi_gmem0_0_ARQOS,
        m_axi_gmem0_0_ARREGION,
        m_axi_gmem0_0_ARUSER,
        m_axi_gmem0_0_RVALID,
        m_axi_gmem0_0_RREADY,
        m_axi_gmem0_0_RDATA,
        m_axi_gmem0_0_RLAST,
        m_axi_gmem0_0_RID,
        m_axi_gmem0_0_RFIFONUM,
        m_axi_gmem0_0_RUSER,
        m_axi_gmem0_0_RRESP,
        m_axi_gmem0_0_BVALID,
        m_axi_gmem0_0_BREADY,
        m_axi_gmem0_0_BRESP,
        m_axi_gmem0_0_BID,
        m_axi_gmem0_0_BUSER,
        sext_ln76,
        add1809235_reload,
        add180_19248_reload,
        add180_29261_reload,
        add180_39274_reload,
        add180_49287_reload,
        add180_59300_reload,
        add180_69313_reload,
        add180_79326_reload,
        add180_89339_reload,
        add180_99352_reload,
        add180_109365_reload,
        add180_119378_reload,
        add180_129391_reload,
        empty,
        add180_182579236_reload,
        add180_1_19249_reload,
        add180_2_19262_reload,
        add180_3_19275_reload,
        add180_4_19288_reload,
        add180_5_19301_reload,
        add180_6_19314_reload,
        add180_7_19327_reload,
        add180_8_19340_reload,
        add180_9_19353_reload,
        add180_10_19366_reload,
        add180_11_19379_reload,
        add180_12_19392_reload,
        add180_282749237_reload,
        add180_1_29250_reload,
        add180_2_29263_reload,
        add180_3_29276_reload,
        add180_4_29289_reload,
        add180_5_29302_reload,
        add180_6_29315_reload,
        add180_7_29328_reload,
        add180_8_29341_reload,
        add180_9_29354_reload,
        add180_10_29367_reload,
        add180_11_29380_reload,
        add180_12_29393_reload,
        add180_382919238_reload,
        add180_1_39251_reload,
        add180_2_39264_reload,
        add180_3_39277_reload,
        add180_4_39290_reload,
        add180_5_39303_reload,
        add180_6_39316_reload,
        add180_7_39329_reload,
        add180_8_39342_reload,
        add180_9_39355_reload,
        add180_10_39368_reload,
        add180_11_39381_reload,
        add180_12_39394_reload,
        add180_483089239_reload,
        add180_1_49252_reload,
        add180_2_49265_reload,
        add180_3_49278_reload,
        add180_4_49291_reload,
        add180_5_49304_reload,
        add180_6_49317_reload,
        add180_7_49330_reload,
        add180_8_49343_reload,
        add180_9_49356_reload,
        add180_10_49369_reload,
        add180_11_49382_reload,
        add180_12_49395_reload,
        add180_583259240_reload,
        add180_1_59253_reload,
        add180_2_59266_reload,
        add180_3_59279_reload,
        add180_4_59292_reload,
        add180_5_59305_reload,
        add180_6_59318_reload,
        add180_7_59331_reload,
        add180_8_59344_reload,
        add180_9_59357_reload,
        add180_10_59370_reload,
        add180_11_59383_reload,
        add180_12_59396_reload,
        add180_683429241_reload,
        add180_1_69254_reload,
        add180_2_69267_reload,
        add180_3_69280_reload,
        add180_4_69293_reload,
        add180_5_69306_reload,
        add180_6_69319_reload,
        add180_7_69332_reload,
        add180_8_69345_reload,
        add180_9_69358_reload,
        add180_10_69371_reload,
        add180_11_69384_reload,
        add180_12_69397_reload,
        add180_783599242_reload,
        add180_1_79255_reload,
        add180_2_79268_reload,
        add180_3_79281_reload,
        add180_4_79294_reload,
        add180_5_79307_reload,
        add180_6_79320_reload,
        add180_7_79333_reload,
        add180_8_79346_reload,
        add180_9_79359_reload,
        add180_10_79372_reload,
        add180_11_79385_reload,
        add180_12_79398_reload,
        add180_883769243_reload,
        add180_1_89256_reload,
        add180_2_89269_reload,
        add180_3_89282_reload,
        add180_4_89295_reload,
        add180_5_89308_reload,
        add180_6_89321_reload,
        add180_7_89334_reload,
        add180_8_89347_reload,
        add180_9_89360_reload,
        add180_10_89373_reload,
        add180_11_89386_reload,
        add180_12_89399_reload,
        add180_983939244_reload,
        add180_1_99257_reload,
        add180_2_99270_reload,
        add180_3_99283_reload,
        add180_4_99296_reload,
        add180_5_99309_reload,
        add180_6_99322_reload,
        add180_7_99335_reload,
        add180_8_99348_reload,
        add180_9_99361_reload,
        add180_10_99374_reload,
        add180_11_99387_reload,
        add180_12_99400_reload,
        add180_1084109245_reload,
        add180_1_109258_reload,
        add180_2_109271_reload,
        add180_3_109284_reload,
        add180_4_109297_reload,
        add180_5_109310_reload,
        add180_6_109323_reload,
        add180_7_109336_reload,
        add180_8_109349_reload,
        add180_9_109362_reload,
        add180_10_109375_reload,
        add180_11_109388_reload,
        add180_12_109401_reload,
        add180_1184279246_reload,
        add180_1_119259_reload,
        add180_2_119272_reload,
        add180_3_119285_reload,
        add180_4_119298_reload,
        add180_5_119311_reload,
        add180_6_119324_reload,
        add180_7_119337_reload,
        add180_8_119350_reload,
        add180_9_119363_reload,
        add180_10_119376_reload,
        add180_11_119389_reload,
        add180_12_119402_reload,
        add180_1284449247_reload,
        add180_1_129260_reload,
        add180_2_129273_reload,
        add180_3_129286_reload,
        add180_4_129299_reload,
        add180_5_129312_reload,
        add180_6_129325_reload,
        add180_7_129338_reload,
        add180_8_129351_reload,
        add180_9_129364_reload,
        add180_10_129377_reload,
        add180_11_129390_reload,
        add180_12_129412_reload,
        grp_fu_22809_p_din0,
        grp_fu_22809_p_din1,
        grp_fu_22809_p_opcode,
        grp_fu_22809_p_dout0,
        grp_fu_22809_p_ce,
        grp_fu_26821_p_din0,
        grp_fu_26821_p_din1,
        grp_fu_26821_p_opcode,
        grp_fu_26821_p_dout0,
        grp_fu_26821_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 13'd1;
parameter    ap_ST_fsm_pp0_stage1 = 13'd2;
parameter    ap_ST_fsm_pp0_stage2 = 13'd4;
parameter    ap_ST_fsm_pp0_stage3 = 13'd8;
parameter    ap_ST_fsm_pp0_stage4 = 13'd16;
parameter    ap_ST_fsm_pp0_stage5 = 13'd32;
parameter    ap_ST_fsm_pp0_stage6 = 13'd64;
parameter    ap_ST_fsm_pp0_stage7 = 13'd128;
parameter    ap_ST_fsm_pp0_stage8 = 13'd256;
parameter    ap_ST_fsm_pp0_stage9 = 13'd512;
parameter    ap_ST_fsm_pp0_stage10 = 13'd1024;
parameter    ap_ST_fsm_pp0_stage11 = 13'd2048;
parameter    ap_ST_fsm_pp0_stage12 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem0_0_AWVALID;
input   m_axi_gmem0_0_AWREADY;
output  [63:0] m_axi_gmem0_0_AWADDR;
output  [0:0] m_axi_gmem0_0_AWID;
output  [31:0] m_axi_gmem0_0_AWLEN;
output  [2:0] m_axi_gmem0_0_AWSIZE;
output  [1:0] m_axi_gmem0_0_AWBURST;
output  [1:0] m_axi_gmem0_0_AWLOCK;
output  [3:0] m_axi_gmem0_0_AWCACHE;
output  [2:0] m_axi_gmem0_0_AWPROT;
output  [3:0] m_axi_gmem0_0_AWQOS;
output  [3:0] m_axi_gmem0_0_AWREGION;
output  [0:0] m_axi_gmem0_0_AWUSER;
output   m_axi_gmem0_0_WVALID;
input   m_axi_gmem0_0_WREADY;
output  [31:0] m_axi_gmem0_0_WDATA;
output  [3:0] m_axi_gmem0_0_WSTRB;
output   m_axi_gmem0_0_WLAST;
output  [0:0] m_axi_gmem0_0_WID;
output  [0:0] m_axi_gmem0_0_WUSER;
output   m_axi_gmem0_0_ARVALID;
input   m_axi_gmem0_0_ARREADY;
output  [63:0] m_axi_gmem0_0_ARADDR;
output  [0:0] m_axi_gmem0_0_ARID;
output  [31:0] m_axi_gmem0_0_ARLEN;
output  [2:0] m_axi_gmem0_0_ARSIZE;
output  [1:0] m_axi_gmem0_0_ARBURST;
output  [1:0] m_axi_gmem0_0_ARLOCK;
output  [3:0] m_axi_gmem0_0_ARCACHE;
output  [2:0] m_axi_gmem0_0_ARPROT;
output  [3:0] m_axi_gmem0_0_ARQOS;
output  [3:0] m_axi_gmem0_0_ARREGION;
output  [0:0] m_axi_gmem0_0_ARUSER;
input   m_axi_gmem0_0_RVALID;
output   m_axi_gmem0_0_RREADY;
input  [31:0] m_axi_gmem0_0_RDATA;
input   m_axi_gmem0_0_RLAST;
input  [0:0] m_axi_gmem0_0_RID;
input  [8:0] m_axi_gmem0_0_RFIFONUM;
input  [0:0] m_axi_gmem0_0_RUSER;
input  [1:0] m_axi_gmem0_0_RRESP;
input   m_axi_gmem0_0_BVALID;
output   m_axi_gmem0_0_BREADY;
input  [1:0] m_axi_gmem0_0_BRESP;
input  [0:0] m_axi_gmem0_0_BID;
input  [0:0] m_axi_gmem0_0_BUSER;
input  [61:0] sext_ln76;
input  [31:0] add1809235_reload;
input  [31:0] add180_19248_reload;
input  [31:0] add180_29261_reload;
input  [31:0] add180_39274_reload;
input  [31:0] add180_49287_reload;
input  [31:0] add180_59300_reload;
input  [31:0] add180_69313_reload;
input  [31:0] add180_79326_reload;
input  [31:0] add180_89339_reload;
input  [31:0] add180_99352_reload;
input  [31:0] add180_109365_reload;
input  [31:0] add180_119378_reload;
input  [31:0] add180_129391_reload;
input  [31:0] empty;
input  [31:0] add180_182579236_reload;
input  [31:0] add180_1_19249_reload;
input  [31:0] add180_2_19262_reload;
input  [31:0] add180_3_19275_reload;
input  [31:0] add180_4_19288_reload;
input  [31:0] add180_5_19301_reload;
input  [31:0] add180_6_19314_reload;
input  [31:0] add180_7_19327_reload;
input  [31:0] add180_8_19340_reload;
input  [31:0] add180_9_19353_reload;
input  [31:0] add180_10_19366_reload;
input  [31:0] add180_11_19379_reload;
input  [31:0] add180_12_19392_reload;
input  [31:0] add180_282749237_reload;
input  [31:0] add180_1_29250_reload;
input  [31:0] add180_2_29263_reload;
input  [31:0] add180_3_29276_reload;
input  [31:0] add180_4_29289_reload;
input  [31:0] add180_5_29302_reload;
input  [31:0] add180_6_29315_reload;
input  [31:0] add180_7_29328_reload;
input  [31:0] add180_8_29341_reload;
input  [31:0] add180_9_29354_reload;
input  [31:0] add180_10_29367_reload;
input  [31:0] add180_11_29380_reload;
input  [31:0] add180_12_29393_reload;
input  [31:0] add180_382919238_reload;
input  [31:0] add180_1_39251_reload;
input  [31:0] add180_2_39264_reload;
input  [31:0] add180_3_39277_reload;
input  [31:0] add180_4_39290_reload;
input  [31:0] add180_5_39303_reload;
input  [31:0] add180_6_39316_reload;
input  [31:0] add180_7_39329_reload;
input  [31:0] add180_8_39342_reload;
input  [31:0] add180_9_39355_reload;
input  [31:0] add180_10_39368_reload;
input  [31:0] add180_11_39381_reload;
input  [31:0] add180_12_39394_reload;
input  [31:0] add180_483089239_reload;
input  [31:0] add180_1_49252_reload;
input  [31:0] add180_2_49265_reload;
input  [31:0] add180_3_49278_reload;
input  [31:0] add180_4_49291_reload;
input  [31:0] add180_5_49304_reload;
input  [31:0] add180_6_49317_reload;
input  [31:0] add180_7_49330_reload;
input  [31:0] add180_8_49343_reload;
input  [31:0] add180_9_49356_reload;
input  [31:0] add180_10_49369_reload;
input  [31:0] add180_11_49382_reload;
input  [31:0] add180_12_49395_reload;
input  [31:0] add180_583259240_reload;
input  [31:0] add180_1_59253_reload;
input  [31:0] add180_2_59266_reload;
input  [31:0] add180_3_59279_reload;
input  [31:0] add180_4_59292_reload;
input  [31:0] add180_5_59305_reload;
input  [31:0] add180_6_59318_reload;
input  [31:0] add180_7_59331_reload;
input  [31:0] add180_8_59344_reload;
input  [31:0] add180_9_59357_reload;
input  [31:0] add180_10_59370_reload;
input  [31:0] add180_11_59383_reload;
input  [31:0] add180_12_59396_reload;
input  [31:0] add180_683429241_reload;
input  [31:0] add180_1_69254_reload;
input  [31:0] add180_2_69267_reload;
input  [31:0] add180_3_69280_reload;
input  [31:0] add180_4_69293_reload;
input  [31:0] add180_5_69306_reload;
input  [31:0] add180_6_69319_reload;
input  [31:0] add180_7_69332_reload;
input  [31:0] add180_8_69345_reload;
input  [31:0] add180_9_69358_reload;
input  [31:0] add180_10_69371_reload;
input  [31:0] add180_11_69384_reload;
input  [31:0] add180_12_69397_reload;
input  [31:0] add180_783599242_reload;
input  [31:0] add180_1_79255_reload;
input  [31:0] add180_2_79268_reload;
input  [31:0] add180_3_79281_reload;
input  [31:0] add180_4_79294_reload;
input  [31:0] add180_5_79307_reload;
input  [31:0] add180_6_79320_reload;
input  [31:0] add180_7_79333_reload;
input  [31:0] add180_8_79346_reload;
input  [31:0] add180_9_79359_reload;
input  [31:0] add180_10_79372_reload;
input  [31:0] add180_11_79385_reload;
input  [31:0] add180_12_79398_reload;
input  [31:0] add180_883769243_reload;
input  [31:0] add180_1_89256_reload;
input  [31:0] add180_2_89269_reload;
input  [31:0] add180_3_89282_reload;
input  [31:0] add180_4_89295_reload;
input  [31:0] add180_5_89308_reload;
input  [31:0] add180_6_89321_reload;
input  [31:0] add180_7_89334_reload;
input  [31:0] add180_8_89347_reload;
input  [31:0] add180_9_89360_reload;
input  [31:0] add180_10_89373_reload;
input  [31:0] add180_11_89386_reload;
input  [31:0] add180_12_89399_reload;
input  [31:0] add180_983939244_reload;
input  [31:0] add180_1_99257_reload;
input  [31:0] add180_2_99270_reload;
input  [31:0] add180_3_99283_reload;
input  [31:0] add180_4_99296_reload;
input  [31:0] add180_5_99309_reload;
input  [31:0] add180_6_99322_reload;
input  [31:0] add180_7_99335_reload;
input  [31:0] add180_8_99348_reload;
input  [31:0] add180_9_99361_reload;
input  [31:0] add180_10_99374_reload;
input  [31:0] add180_11_99387_reload;
input  [31:0] add180_12_99400_reload;
input  [31:0] add180_1084109245_reload;
input  [31:0] add180_1_109258_reload;
input  [31:0] add180_2_109271_reload;
input  [31:0] add180_3_109284_reload;
input  [31:0] add180_4_109297_reload;
input  [31:0] add180_5_109310_reload;
input  [31:0] add180_6_109323_reload;
input  [31:0] add180_7_109336_reload;
input  [31:0] add180_8_109349_reload;
input  [31:0] add180_9_109362_reload;
input  [31:0] add180_10_109375_reload;
input  [31:0] add180_11_109388_reload;
input  [31:0] add180_12_109401_reload;
input  [31:0] add180_1184279246_reload;
input  [31:0] add180_1_119259_reload;
input  [31:0] add180_2_119272_reload;
input  [31:0] add180_3_119285_reload;
input  [31:0] add180_4_119298_reload;
input  [31:0] add180_5_119311_reload;
input  [31:0] add180_6_119324_reload;
input  [31:0] add180_7_119337_reload;
input  [31:0] add180_8_119350_reload;
input  [31:0] add180_9_119363_reload;
input  [31:0] add180_10_119376_reload;
input  [31:0] add180_11_119389_reload;
input  [31:0] add180_12_119402_reload;
input  [31:0] add180_1284449247_reload;
input  [31:0] add180_1_129260_reload;
input  [31:0] add180_2_129273_reload;
input  [31:0] add180_3_129286_reload;
input  [31:0] add180_4_129299_reload;
input  [31:0] add180_5_129312_reload;
input  [31:0] add180_6_129325_reload;
input  [31:0] add180_7_129338_reload;
input  [31:0] add180_8_129351_reload;
input  [31:0] add180_9_129364_reload;
input  [31:0] add180_10_129377_reload;
input  [31:0] add180_11_129390_reload;
input  [31:0] add180_12_129412_reload;
output  [31:0] grp_fu_22809_p_din0;
output  [31:0] grp_fu_22809_p_din1;
output  [1:0] grp_fu_22809_p_opcode;
input  [31:0] grp_fu_22809_p_dout0;
output   grp_fu_22809_p_ce;
output  [31:0] grp_fu_26821_p_din0;
output  [31:0] grp_fu_26821_p_din1;
output  [4:0] grp_fu_26821_p_opcode;
input  [0:0] grp_fu_26821_p_dout0;
output   grp_fu_26821_p_ce;

reg ap_idle;
reg m_axi_gmem0_0_WVALID;
reg[31:0] m_axi_gmem0_0_WDATA;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage6;
reg    ap_block_pp0_stage6_subdone;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [0:0] icmp_ln135_reg_3055;
reg    ap_condition_exit_pp0_iter0_stage6;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage12;
reg    ap_block_state13_io_grp6;
reg    ap_block_pp0_stage12_subdone;
reg    gmem0_blk_n_W;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7_grp1;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_pp0_stage8_grp2;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_pp0_stage9_grp3;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_pp0_stage10_grp4;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_pp0_stage11_grp5;
wire    ap_block_pp0_stage12_grp6;
wire    ap_block_pp0_stage0_grp7;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_grp8;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_grp9;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3_grp10;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4_grp11;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5_grp12;
wire    ap_block_pp0_stage6_grp13;
reg   [31:0] reg_1569;
wire    ap_block_pp0_stage4_11001_grp0;
reg    ap_block_pp0_stage4_subdone_grp0_done_reg;
wire    ap_block_pp0_stage4_subdone_grp0;
reg    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage6_11001_grp0;
reg    ap_block_pp0_stage6_subdone_grp0_done_reg;
wire    ap_block_pp0_stage6_subdone_grp0;
wire    ap_block_pp0_stage8_11001_grp0;
reg    ap_block_pp0_stage8_subdone_grp0_done_reg;
wire    ap_block_pp0_stage8_subdone_grp0;
reg    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage10_11001_grp0;
reg    ap_block_pp0_stage10_subdone_grp0_done_reg;
wire    ap_block_pp0_stage10_subdone_grp0;
reg    ap_block_pp0_stage10_subdone;
wire    ap_block_pp0_stage12_11001_grp0;
reg    ap_block_pp0_stage12_subdone_grp0_done_reg;
wire    ap_block_pp0_stage12_subdone_grp0;
wire    ap_block_pp0_stage1_11001_grp0;
reg    ap_block_pp0_stage1_subdone_grp0_done_reg;
wire    ap_block_pp0_stage1_subdone_grp0;
reg    ap_block_pp0_stage1_subdone;
reg   [31:0] reg_1574;
wire    ap_block_pp0_stage5_11001_grp0;
reg    ap_block_pp0_stage5_subdone_grp0_done_reg;
wire    ap_block_pp0_stage5_subdone_grp0;
reg    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage7_11001_grp0;
reg    ap_block_pp0_stage7_subdone_grp0_done_reg;
wire    ap_block_pp0_stage7_subdone_grp0;
reg    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage9_11001_grp0;
reg    ap_block_pp0_stage9_subdone_grp0_done_reg;
wire    ap_block_pp0_stage9_subdone_grp0;
reg    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage11_11001_grp0;
reg    ap_block_pp0_stage11_subdone_grp0_done_reg;
wire    ap_block_pp0_stage11_subdone_grp0;
reg    ap_block_pp0_stage11_subdone;
wire    ap_block_pp0_stage0_11001_grp0;
reg    ap_block_pp0_stage0_subdone_grp0_done_reg;
wire    ap_block_pp0_stage0_subdone_grp0;
reg    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage2_11001_grp0;
reg    ap_block_pp0_stage2_subdone_grp0_done_reg;
wire    ap_block_pp0_stage2_subdone_grp0;
reg    ap_block_pp0_stage2_subdone;
wire   [0:0] icmp_ln135_fu_1591_p2;
reg    ap_block_pp0_stage0_11001;
reg    ap_block_pp0_stage0_11001_grp7;
wire   [31:0] tmp_fu_1609_p29;
reg   [31:0] tmp_reg_3076;
wire   [31:0] tmp_1_fu_1669_p29;
reg   [31:0] tmp_1_reg_3081;
wire   [31:0] tmp_2_fu_1729_p29;
reg   [31:0] tmp_2_reg_3086;
wire   [31:0] tmp_3_fu_1789_p29;
reg   [31:0] tmp_3_reg_3091;
wire   [31:0] tmp_4_fu_1849_p29;
reg   [31:0] tmp_4_reg_3096;
wire   [31:0] tmp_5_fu_1909_p29;
reg   [31:0] tmp_5_reg_3101;
wire   [31:0] tmp_6_fu_1969_p29;
reg   [31:0] tmp_6_reg_3106;
wire   [31:0] tmp_7_fu_2029_p29;
reg   [31:0] tmp_7_reg_3111;
wire   [31:0] tmp_8_fu_2089_p29;
reg   [31:0] tmp_8_reg_3116;
wire   [31:0] tmp_9_fu_2149_p29;
reg   [31:0] tmp_9_reg_3121;
wire   [31:0] tmp_s_fu_2209_p29;
reg   [31:0] tmp_s_reg_3126;
wire   [31:0] tmp_10_fu_2269_p29;
reg   [31:0] tmp_10_reg_3131;
wire   [31:0] tmp_11_fu_2329_p29;
reg   [31:0] tmp_11_reg_3136;
wire   [31:0] select_ln135_fu_2436_p3;
reg   [31:0] select_ln135_reg_3141;
wire   [31:0] select_ln135_1_fu_2486_p3;
reg   [31:0] select_ln135_1_reg_3146;
wire   [31:0] select_ln135_2_fu_2536_p3;
reg   [31:0] select_ln135_2_reg_3151;
wire   [31:0] select_ln135_3_fu_2586_p3;
reg   [31:0] select_ln135_3_reg_3156;
wire   [31:0] select_ln135_4_fu_2636_p3;
reg   [31:0] select_ln135_4_reg_3161;
wire   [31:0] select_ln135_5_fu_2686_p3;
reg   [31:0] select_ln135_5_reg_3166;
wire   [31:0] select_ln135_6_fu_2736_p3;
reg   [31:0] select_ln135_6_reg_3171;
wire   [31:0] select_ln135_7_fu_2786_p3;
reg   [31:0] select_ln135_7_reg_3176;
wire   [31:0] select_ln135_8_fu_2836_p3;
reg   [31:0] select_ln135_8_reg_3181;
wire   [31:0] select_ln135_9_fu_2886_p3;
reg   [31:0] select_ln135_9_reg_3186;
reg   [31:0] out_15_reg_3191;
wire    ap_block_pp0_stage3_11001_grp0;
reg    ap_block_pp0_stage3_subdone_grp0_done_reg;
wire    ap_block_pp0_stage3_subdone_grp0;
reg    ap_block_pp0_stage3_subdone;
wire   [31:0] select_ln135_10_fu_2936_p3;
reg   [31:0] select_ln135_10_reg_3197;
wire   [31:0] select_ln135_11_fu_2986_p3;
reg   [31:0] select_ln135_11_reg_3202;
wire   [31:0] select_ln135_12_fu_3035_p3;
reg   [31:0] select_ln135_12_reg_3207;
reg    ap_block_state8_io_grp1;
reg    ap_block_pp0_stage7_11001_grp1;
wire    ap_block_pp0_stage7_01001_grp1;
reg    ap_block_state9_io_grp2;
reg    ap_block_pp0_stage8_11001_grp2;
wire    ap_block_pp0_stage8_01001_grp2;
reg    ap_block_state10_io_grp3;
reg    ap_block_pp0_stage9_11001_grp3;
wire    ap_block_pp0_stage9_01001_grp3;
reg    ap_block_state11_io_grp4;
reg    ap_block_pp0_stage10_11001_grp4;
wire    ap_block_pp0_stage10_01001_grp4;
reg    ap_block_state12_io_grp5;
reg    ap_block_pp0_stage11_11001_grp5;
wire    ap_block_pp0_stage11_01001_grp5;
reg    ap_block_pp0_stage12_11001_grp6;
wire    ap_block_pp0_stage12_01001_grp6;
wire    ap_block_pp0_stage0_01001_grp7;
reg    ap_block_pp0_stage1_11001_grp8;
wire    ap_block_pp0_stage1_01001_grp8;
reg    ap_block_pp0_stage2_11001_grp9;
wire    ap_block_pp0_stage2_01001_grp9;
reg    ap_block_pp0_stage3_11001_grp10;
wire    ap_block_pp0_stage3_01001_grp10;
reg    ap_block_pp0_stage4_11001_grp11;
wire    ap_block_pp0_stage4_01001_grp11;
reg    ap_block_pp0_stage5_11001_grp12;
wire    ap_block_pp0_stage5_01001_grp12;
reg    ap_block_pp0_stage6_11001_grp13;
wire    ap_block_pp0_stage6_01001_grp13;
reg   [3:0] i_2_fu_426;
wire   [3:0] add_ln135_fu_1597_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i;
wire    ap_block_pp0_stage0;
reg   [31:0] grp_fu_1560_p0;
wire    ap_block_pp0_stage1_grp0;
wire    ap_block_pp0_stage2_grp0;
wire    ap_block_pp0_stage3_grp0;
wire    ap_block_pp0_stage4_grp0;
wire    ap_block_pp0_stage5_grp0;
wire    ap_block_pp0_stage6_grp0;
wire    ap_block_pp0_stage7_grp0;
wire    ap_block_pp0_stage8_grp0;
wire    ap_block_pp0_stage9_grp0;
wire    ap_block_pp0_stage10_grp0;
wire    ap_block_pp0_stage11_grp0;
wire    ap_block_pp0_stage12_grp0;
wire    ap_block_pp0_stage0_grp0;
reg   [31:0] grp_fu_1564_p0;
wire   [31:0] tmp_fu_1609_p27;
wire   [31:0] tmp_1_fu_1669_p27;
wire   [31:0] tmp_2_fu_1729_p27;
wire   [31:0] tmp_3_fu_1789_p27;
wire   [31:0] tmp_4_fu_1849_p27;
wire   [31:0] tmp_5_fu_1909_p27;
wire   [31:0] tmp_6_fu_1969_p27;
wire   [31:0] tmp_7_fu_2029_p27;
wire   [31:0] tmp_8_fu_2089_p27;
wire   [31:0] tmp_9_fu_2149_p27;
wire   [31:0] tmp_s_fu_2209_p27;
wire   [31:0] tmp_10_fu_2269_p27;
wire   [31:0] tmp_11_fu_2329_p27;
wire   [31:0] bitcast_ln142_fu_2394_p1;
wire   [7:0] tmp_25_fu_2398_p4;
wire   [22:0] trunc_ln142_fu_2408_p1;
wire   [0:0] icmp_ln142_1_fu_2418_p2;
wire   [0:0] icmp_ln142_fu_2412_p2;
wire   [0:0] or_ln142_fu_2424_p2;
wire   [0:0] and_ln142_fu_2430_p2;
wire   [31:0] bitcast_ln142_1_fu_2444_p1;
wire   [7:0] tmp_27_fu_2448_p4;
wire   [22:0] trunc_ln142_1_fu_2458_p1;
wire   [0:0] icmp_ln142_3_fu_2468_p2;
wire   [0:0] icmp_ln142_2_fu_2462_p2;
wire   [0:0] or_ln142_1_fu_2474_p2;
wire   [0:0] and_ln142_1_fu_2480_p2;
wire   [31:0] bitcast_ln142_2_fu_2494_p1;
wire   [7:0] tmp_29_fu_2498_p4;
wire   [22:0] trunc_ln142_2_fu_2508_p1;
wire   [0:0] icmp_ln142_5_fu_2518_p2;
wire   [0:0] icmp_ln142_4_fu_2512_p2;
wire   [0:0] or_ln142_2_fu_2524_p2;
wire   [0:0] and_ln142_2_fu_2530_p2;
wire   [31:0] bitcast_ln142_3_fu_2544_p1;
wire   [7:0] tmp_31_fu_2548_p4;
wire   [22:0] trunc_ln142_3_fu_2558_p1;
wire   [0:0] icmp_ln142_7_fu_2568_p2;
wire   [0:0] icmp_ln142_6_fu_2562_p2;
wire   [0:0] or_ln142_3_fu_2574_p2;
wire   [0:0] and_ln142_3_fu_2580_p2;
wire   [31:0] bitcast_ln142_4_fu_2594_p1;
wire   [7:0] tmp_33_fu_2598_p4;
wire   [22:0] trunc_ln142_4_fu_2608_p1;
wire   [0:0] icmp_ln142_9_fu_2618_p2;
wire   [0:0] icmp_ln142_8_fu_2612_p2;
wire   [0:0] or_ln142_4_fu_2624_p2;
wire   [0:0] and_ln142_4_fu_2630_p2;
wire   [31:0] bitcast_ln142_5_fu_2644_p1;
wire   [7:0] tmp_35_fu_2648_p4;
wire   [22:0] trunc_ln142_5_fu_2658_p1;
wire   [0:0] icmp_ln142_11_fu_2668_p2;
wire   [0:0] icmp_ln142_10_fu_2662_p2;
wire   [0:0] or_ln142_5_fu_2674_p2;
wire   [0:0] and_ln142_5_fu_2680_p2;
wire   [31:0] bitcast_ln142_6_fu_2694_p1;
wire   [7:0] tmp_37_fu_2698_p4;
wire   [22:0] trunc_ln142_6_fu_2708_p1;
wire   [0:0] icmp_ln142_13_fu_2718_p2;
wire   [0:0] icmp_ln142_12_fu_2712_p2;
wire   [0:0] or_ln142_6_fu_2724_p2;
wire   [0:0] and_ln142_6_fu_2730_p2;
wire   [31:0] bitcast_ln142_7_fu_2744_p1;
wire   [7:0] tmp_39_fu_2748_p4;
wire   [22:0] trunc_ln142_7_fu_2758_p1;
wire   [0:0] icmp_ln142_15_fu_2768_p2;
wire   [0:0] icmp_ln142_14_fu_2762_p2;
wire   [0:0] or_ln142_7_fu_2774_p2;
wire   [0:0] and_ln142_7_fu_2780_p2;
wire   [31:0] bitcast_ln142_8_fu_2794_p1;
wire   [7:0] tmp_41_fu_2798_p4;
wire   [22:0] trunc_ln142_8_fu_2808_p1;
wire   [0:0] icmp_ln142_17_fu_2818_p2;
wire   [0:0] icmp_ln142_16_fu_2812_p2;
wire   [0:0] or_ln142_8_fu_2824_p2;
wire   [0:0] and_ln142_8_fu_2830_p2;
wire   [31:0] bitcast_ln142_9_fu_2844_p1;
wire   [7:0] tmp_43_fu_2848_p4;
wire   [22:0] trunc_ln142_9_fu_2858_p1;
wire   [0:0] icmp_ln142_19_fu_2868_p2;
wire   [0:0] icmp_ln142_18_fu_2862_p2;
wire   [0:0] or_ln142_9_fu_2874_p2;
wire   [0:0] and_ln142_9_fu_2880_p2;
wire   [31:0] bitcast_ln142_10_fu_2894_p1;
wire   [7:0] tmp_45_fu_2898_p4;
wire   [22:0] trunc_ln142_10_fu_2908_p1;
wire   [0:0] icmp_ln142_21_fu_2918_p2;
wire   [0:0] icmp_ln142_20_fu_2912_p2;
wire   [0:0] or_ln142_10_fu_2924_p2;
wire   [0:0] and_ln142_10_fu_2930_p2;
wire   [31:0] bitcast_ln142_11_fu_2944_p1;
wire   [7:0] tmp_47_fu_2948_p4;
wire   [22:0] trunc_ln142_11_fu_2958_p1;
wire   [0:0] icmp_ln142_23_fu_2968_p2;
wire   [0:0] icmp_ln142_22_fu_2962_p2;
wire   [0:0] or_ln142_11_fu_2974_p2;
wire   [0:0] and_ln142_11_fu_2980_p2;
wire   [31:0] bitcast_ln142_12_fu_2994_p1;
wire   [7:0] tmp_49_fu_2997_p4;
wire   [22:0] trunc_ln142_12_fu_3007_p1;
wire   [0:0] icmp_ln142_25_fu_3017_p2;
wire   [0:0] icmp_ln142_24_fu_3011_p2;
wire   [0:0] or_ln142_12_fu_3023_p2;
wire   [0:0] and_ln142_12_fu_3029_p2;
reg    grp_fu_1560_ce;
reg    grp_fu_1564_ce;
reg    ap_block_pp0_stage1_11001;
reg    ap_block_pp0_stage2_11001;
reg    ap_block_pp0_stage3_11001;
reg    ap_block_pp0_stage4_11001;
wire    ap_block_pp0_stage5_00001_grp0;
wire    ap_block_pp0_stage6_00001_grp0;
wire    ap_block_pp0_stage7_00001_grp0;
wire    ap_block_pp0_stage8_00001_grp0;
wire    ap_block_pp0_stage9_00001_grp0;
wire    ap_block_pp0_stage10_00001_grp0;
wire    ap_block_pp0_stage11_00001_grp0;
wire    ap_block_pp0_stage12_00001_grp0;
wire    ap_block_pp0_stage0_00001_grp0;
wire    ap_block_pp0_stage1_00001_grp0;
wire    ap_block_pp0_stage2_00001_grp0;
wire    ap_block_pp0_stage3_00001_grp0;
wire    ap_block_pp0_stage4_00001_grp0;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [12:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [3:0] tmp_fu_1609_p1;
wire   [3:0] tmp_fu_1609_p3;
wire   [3:0] tmp_fu_1609_p5;
wire   [3:0] tmp_fu_1609_p7;
wire   [3:0] tmp_fu_1609_p9;
wire   [3:0] tmp_fu_1609_p11;
wire   [3:0] tmp_fu_1609_p13;
wire   [3:0] tmp_fu_1609_p15;
wire  signed [3:0] tmp_fu_1609_p17;
wire  signed [3:0] tmp_fu_1609_p19;
wire  signed [3:0] tmp_fu_1609_p21;
wire  signed [3:0] tmp_fu_1609_p23;
wire  signed [3:0] tmp_fu_1609_p25;
wire   [3:0] tmp_1_fu_1669_p1;
wire   [3:0] tmp_1_fu_1669_p3;
wire   [3:0] tmp_1_fu_1669_p5;
wire   [3:0] tmp_1_fu_1669_p7;
wire   [3:0] tmp_1_fu_1669_p9;
wire   [3:0] tmp_1_fu_1669_p11;
wire   [3:0] tmp_1_fu_1669_p13;
wire   [3:0] tmp_1_fu_1669_p15;
wire  signed [3:0] tmp_1_fu_1669_p17;
wire  signed [3:0] tmp_1_fu_1669_p19;
wire  signed [3:0] tmp_1_fu_1669_p21;
wire  signed [3:0] tmp_1_fu_1669_p23;
wire  signed [3:0] tmp_1_fu_1669_p25;
wire   [3:0] tmp_2_fu_1729_p1;
wire   [3:0] tmp_2_fu_1729_p3;
wire   [3:0] tmp_2_fu_1729_p5;
wire   [3:0] tmp_2_fu_1729_p7;
wire   [3:0] tmp_2_fu_1729_p9;
wire   [3:0] tmp_2_fu_1729_p11;
wire   [3:0] tmp_2_fu_1729_p13;
wire   [3:0] tmp_2_fu_1729_p15;
wire  signed [3:0] tmp_2_fu_1729_p17;
wire  signed [3:0] tmp_2_fu_1729_p19;
wire  signed [3:0] tmp_2_fu_1729_p21;
wire  signed [3:0] tmp_2_fu_1729_p23;
wire  signed [3:0] tmp_2_fu_1729_p25;
wire   [3:0] tmp_3_fu_1789_p1;
wire   [3:0] tmp_3_fu_1789_p3;
wire   [3:0] tmp_3_fu_1789_p5;
wire   [3:0] tmp_3_fu_1789_p7;
wire   [3:0] tmp_3_fu_1789_p9;
wire   [3:0] tmp_3_fu_1789_p11;
wire   [3:0] tmp_3_fu_1789_p13;
wire   [3:0] tmp_3_fu_1789_p15;
wire  signed [3:0] tmp_3_fu_1789_p17;
wire  signed [3:0] tmp_3_fu_1789_p19;
wire  signed [3:0] tmp_3_fu_1789_p21;
wire  signed [3:0] tmp_3_fu_1789_p23;
wire  signed [3:0] tmp_3_fu_1789_p25;
wire   [3:0] tmp_4_fu_1849_p1;
wire   [3:0] tmp_4_fu_1849_p3;
wire   [3:0] tmp_4_fu_1849_p5;
wire   [3:0] tmp_4_fu_1849_p7;
wire   [3:0] tmp_4_fu_1849_p9;
wire   [3:0] tmp_4_fu_1849_p11;
wire   [3:0] tmp_4_fu_1849_p13;
wire   [3:0] tmp_4_fu_1849_p15;
wire  signed [3:0] tmp_4_fu_1849_p17;
wire  signed [3:0] tmp_4_fu_1849_p19;
wire  signed [3:0] tmp_4_fu_1849_p21;
wire  signed [3:0] tmp_4_fu_1849_p23;
wire  signed [3:0] tmp_4_fu_1849_p25;
wire   [3:0] tmp_5_fu_1909_p1;
wire   [3:0] tmp_5_fu_1909_p3;
wire   [3:0] tmp_5_fu_1909_p5;
wire   [3:0] tmp_5_fu_1909_p7;
wire   [3:0] tmp_5_fu_1909_p9;
wire   [3:0] tmp_5_fu_1909_p11;
wire   [3:0] tmp_5_fu_1909_p13;
wire   [3:0] tmp_5_fu_1909_p15;
wire  signed [3:0] tmp_5_fu_1909_p17;
wire  signed [3:0] tmp_5_fu_1909_p19;
wire  signed [3:0] tmp_5_fu_1909_p21;
wire  signed [3:0] tmp_5_fu_1909_p23;
wire  signed [3:0] tmp_5_fu_1909_p25;
wire   [3:0] tmp_6_fu_1969_p1;
wire   [3:0] tmp_6_fu_1969_p3;
wire   [3:0] tmp_6_fu_1969_p5;
wire   [3:0] tmp_6_fu_1969_p7;
wire   [3:0] tmp_6_fu_1969_p9;
wire   [3:0] tmp_6_fu_1969_p11;
wire   [3:0] tmp_6_fu_1969_p13;
wire   [3:0] tmp_6_fu_1969_p15;
wire  signed [3:0] tmp_6_fu_1969_p17;
wire  signed [3:0] tmp_6_fu_1969_p19;
wire  signed [3:0] tmp_6_fu_1969_p21;
wire  signed [3:0] tmp_6_fu_1969_p23;
wire  signed [3:0] tmp_6_fu_1969_p25;
wire   [3:0] tmp_7_fu_2029_p1;
wire   [3:0] tmp_7_fu_2029_p3;
wire   [3:0] tmp_7_fu_2029_p5;
wire   [3:0] tmp_7_fu_2029_p7;
wire   [3:0] tmp_7_fu_2029_p9;
wire   [3:0] tmp_7_fu_2029_p11;
wire   [3:0] tmp_7_fu_2029_p13;
wire   [3:0] tmp_7_fu_2029_p15;
wire  signed [3:0] tmp_7_fu_2029_p17;
wire  signed [3:0] tmp_7_fu_2029_p19;
wire  signed [3:0] tmp_7_fu_2029_p21;
wire  signed [3:0] tmp_7_fu_2029_p23;
wire  signed [3:0] tmp_7_fu_2029_p25;
wire   [3:0] tmp_8_fu_2089_p1;
wire   [3:0] tmp_8_fu_2089_p3;
wire   [3:0] tmp_8_fu_2089_p5;
wire   [3:0] tmp_8_fu_2089_p7;
wire   [3:0] tmp_8_fu_2089_p9;
wire   [3:0] tmp_8_fu_2089_p11;
wire   [3:0] tmp_8_fu_2089_p13;
wire   [3:0] tmp_8_fu_2089_p15;
wire  signed [3:0] tmp_8_fu_2089_p17;
wire  signed [3:0] tmp_8_fu_2089_p19;
wire  signed [3:0] tmp_8_fu_2089_p21;
wire  signed [3:0] tmp_8_fu_2089_p23;
wire  signed [3:0] tmp_8_fu_2089_p25;
wire   [3:0] tmp_9_fu_2149_p1;
wire   [3:0] tmp_9_fu_2149_p3;
wire   [3:0] tmp_9_fu_2149_p5;
wire   [3:0] tmp_9_fu_2149_p7;
wire   [3:0] tmp_9_fu_2149_p9;
wire   [3:0] tmp_9_fu_2149_p11;
wire   [3:0] tmp_9_fu_2149_p13;
wire   [3:0] tmp_9_fu_2149_p15;
wire  signed [3:0] tmp_9_fu_2149_p17;
wire  signed [3:0] tmp_9_fu_2149_p19;
wire  signed [3:0] tmp_9_fu_2149_p21;
wire  signed [3:0] tmp_9_fu_2149_p23;
wire  signed [3:0] tmp_9_fu_2149_p25;
wire   [3:0] tmp_s_fu_2209_p1;
wire   [3:0] tmp_s_fu_2209_p3;
wire   [3:0] tmp_s_fu_2209_p5;
wire   [3:0] tmp_s_fu_2209_p7;
wire   [3:0] tmp_s_fu_2209_p9;
wire   [3:0] tmp_s_fu_2209_p11;
wire   [3:0] tmp_s_fu_2209_p13;
wire   [3:0] tmp_s_fu_2209_p15;
wire  signed [3:0] tmp_s_fu_2209_p17;
wire  signed [3:0] tmp_s_fu_2209_p19;
wire  signed [3:0] tmp_s_fu_2209_p21;
wire  signed [3:0] tmp_s_fu_2209_p23;
wire  signed [3:0] tmp_s_fu_2209_p25;
wire   [3:0] tmp_10_fu_2269_p1;
wire   [3:0] tmp_10_fu_2269_p3;
wire   [3:0] tmp_10_fu_2269_p5;
wire   [3:0] tmp_10_fu_2269_p7;
wire   [3:0] tmp_10_fu_2269_p9;
wire   [3:0] tmp_10_fu_2269_p11;
wire   [3:0] tmp_10_fu_2269_p13;
wire   [3:0] tmp_10_fu_2269_p15;
wire  signed [3:0] tmp_10_fu_2269_p17;
wire  signed [3:0] tmp_10_fu_2269_p19;
wire  signed [3:0] tmp_10_fu_2269_p21;
wire  signed [3:0] tmp_10_fu_2269_p23;
wire  signed [3:0] tmp_10_fu_2269_p25;
wire   [3:0] tmp_11_fu_2329_p1;
wire   [3:0] tmp_11_fu_2329_p3;
wire   [3:0] tmp_11_fu_2329_p5;
wire   [3:0] tmp_11_fu_2329_p7;
wire   [3:0] tmp_11_fu_2329_p9;
wire   [3:0] tmp_11_fu_2329_p11;
wire   [3:0] tmp_11_fu_2329_p13;
wire   [3:0] tmp_11_fu_2329_p15;
wire  signed [3:0] tmp_11_fu_2329_p17;
wire  signed [3:0] tmp_11_fu_2329_p19;
wire  signed [3:0] tmp_11_fu_2329_p21;
wire  signed [3:0] tmp_11_fu_2329_p23;
wire  signed [3:0] tmp_11_fu_2329_p25;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_block_pp0_stage4_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage6_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage8_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage10_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage12_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage1_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage5_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage7_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage9_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage11_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage0_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage2_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage3_subdone_grp0_done_reg = 1'b0;
#0 i_2_fu_426 = 4'd0;
#0 ap_done_reg = 1'b0;
end

(* dissolve_hierarchy = "yes" *) conv5_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U1823(
    .din0(add1809235_reload),
    .din1(add180_19248_reload),
    .din2(add180_29261_reload),
    .din3(add180_39274_reload),
    .din4(add180_49287_reload),
    .din5(add180_59300_reload),
    .din6(add180_69313_reload),
    .din7(add180_79326_reload),
    .din8(add180_89339_reload),
    .din9(add180_99352_reload),
    .din10(add180_109365_reload),
    .din11(add180_119378_reload),
    .din12(add180_129391_reload),
    .def(tmp_fu_1609_p27),
    .sel(ap_sig_allocacmp_i),
    .dout(tmp_fu_1609_p29)
);

(* dissolve_hierarchy = "yes" *) conv5_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U1824(
    .din0(add180_182579236_reload),
    .din1(add180_1_19249_reload),
    .din2(add180_2_19262_reload),
    .din3(add180_3_19275_reload),
    .din4(add180_4_19288_reload),
    .din5(add180_5_19301_reload),
    .din6(add180_6_19314_reload),
    .din7(add180_7_19327_reload),
    .din8(add180_8_19340_reload),
    .din9(add180_9_19353_reload),
    .din10(add180_10_19366_reload),
    .din11(add180_11_19379_reload),
    .din12(add180_12_19392_reload),
    .def(tmp_1_fu_1669_p27),
    .sel(ap_sig_allocacmp_i),
    .dout(tmp_1_fu_1669_p29)
);

(* dissolve_hierarchy = "yes" *) conv5_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U1825(
    .din0(add180_282749237_reload),
    .din1(add180_1_29250_reload),
    .din2(add180_2_29263_reload),
    .din3(add180_3_29276_reload),
    .din4(add180_4_29289_reload),
    .din5(add180_5_29302_reload),
    .din6(add180_6_29315_reload),
    .din7(add180_7_29328_reload),
    .din8(add180_8_29341_reload),
    .din9(add180_9_29354_reload),
    .din10(add180_10_29367_reload),
    .din11(add180_11_29380_reload),
    .din12(add180_12_29393_reload),
    .def(tmp_2_fu_1729_p27),
    .sel(ap_sig_allocacmp_i),
    .dout(tmp_2_fu_1729_p29)
);

(* dissolve_hierarchy = "yes" *) conv5_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U1826(
    .din0(add180_382919238_reload),
    .din1(add180_1_39251_reload),
    .din2(add180_2_39264_reload),
    .din3(add180_3_39277_reload),
    .din4(add180_4_39290_reload),
    .din5(add180_5_39303_reload),
    .din6(add180_6_39316_reload),
    .din7(add180_7_39329_reload),
    .din8(add180_8_39342_reload),
    .din9(add180_9_39355_reload),
    .din10(add180_10_39368_reload),
    .din11(add180_11_39381_reload),
    .din12(add180_12_39394_reload),
    .def(tmp_3_fu_1789_p27),
    .sel(ap_sig_allocacmp_i),
    .dout(tmp_3_fu_1789_p29)
);

(* dissolve_hierarchy = "yes" *) conv5_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U1827(
    .din0(add180_483089239_reload),
    .din1(add180_1_49252_reload),
    .din2(add180_2_49265_reload),
    .din3(add180_3_49278_reload),
    .din4(add180_4_49291_reload),
    .din5(add180_5_49304_reload),
    .din6(add180_6_49317_reload),
    .din7(add180_7_49330_reload),
    .din8(add180_8_49343_reload),
    .din9(add180_9_49356_reload),
    .din10(add180_10_49369_reload),
    .din11(add180_11_49382_reload),
    .din12(add180_12_49395_reload),
    .def(tmp_4_fu_1849_p27),
    .sel(ap_sig_allocacmp_i),
    .dout(tmp_4_fu_1849_p29)
);

(* dissolve_hierarchy = "yes" *) conv5_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U1828(
    .din0(add180_583259240_reload),
    .din1(add180_1_59253_reload),
    .din2(add180_2_59266_reload),
    .din3(add180_3_59279_reload),
    .din4(add180_4_59292_reload),
    .din5(add180_5_59305_reload),
    .din6(add180_6_59318_reload),
    .din7(add180_7_59331_reload),
    .din8(add180_8_59344_reload),
    .din9(add180_9_59357_reload),
    .din10(add180_10_59370_reload),
    .din11(add180_11_59383_reload),
    .din12(add180_12_59396_reload),
    .def(tmp_5_fu_1909_p27),
    .sel(ap_sig_allocacmp_i),
    .dout(tmp_5_fu_1909_p29)
);

(* dissolve_hierarchy = "yes" *) conv5_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U1829(
    .din0(add180_683429241_reload),
    .din1(add180_1_69254_reload),
    .din2(add180_2_69267_reload),
    .din3(add180_3_69280_reload),
    .din4(add180_4_69293_reload),
    .din5(add180_5_69306_reload),
    .din6(add180_6_69319_reload),
    .din7(add180_7_69332_reload),
    .din8(add180_8_69345_reload),
    .din9(add180_9_69358_reload),
    .din10(add180_10_69371_reload),
    .din11(add180_11_69384_reload),
    .din12(add180_12_69397_reload),
    .def(tmp_6_fu_1969_p27),
    .sel(ap_sig_allocacmp_i),
    .dout(tmp_6_fu_1969_p29)
);

(* dissolve_hierarchy = "yes" *) conv5_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U1830(
    .din0(add180_783599242_reload),
    .din1(add180_1_79255_reload),
    .din2(add180_2_79268_reload),
    .din3(add180_3_79281_reload),
    .din4(add180_4_79294_reload),
    .din5(add180_5_79307_reload),
    .din6(add180_6_79320_reload),
    .din7(add180_7_79333_reload),
    .din8(add180_8_79346_reload),
    .din9(add180_9_79359_reload),
    .din10(add180_10_79372_reload),
    .din11(add180_11_79385_reload),
    .din12(add180_12_79398_reload),
    .def(tmp_7_fu_2029_p27),
    .sel(ap_sig_allocacmp_i),
    .dout(tmp_7_fu_2029_p29)
);

(* dissolve_hierarchy = "yes" *) conv5_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U1831(
    .din0(add180_883769243_reload),
    .din1(add180_1_89256_reload),
    .din2(add180_2_89269_reload),
    .din3(add180_3_89282_reload),
    .din4(add180_4_89295_reload),
    .din5(add180_5_89308_reload),
    .din6(add180_6_89321_reload),
    .din7(add180_7_89334_reload),
    .din8(add180_8_89347_reload),
    .din9(add180_9_89360_reload),
    .din10(add180_10_89373_reload),
    .din11(add180_11_89386_reload),
    .din12(add180_12_89399_reload),
    .def(tmp_8_fu_2089_p27),
    .sel(ap_sig_allocacmp_i),
    .dout(tmp_8_fu_2089_p29)
);

(* dissolve_hierarchy = "yes" *) conv5_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U1832(
    .din0(add180_983939244_reload),
    .din1(add180_1_99257_reload),
    .din2(add180_2_99270_reload),
    .din3(add180_3_99283_reload),
    .din4(add180_4_99296_reload),
    .din5(add180_5_99309_reload),
    .din6(add180_6_99322_reload),
    .din7(add180_7_99335_reload),
    .din8(add180_8_99348_reload),
    .din9(add180_9_99361_reload),
    .din10(add180_10_99374_reload),
    .din11(add180_11_99387_reload),
    .din12(add180_12_99400_reload),
    .def(tmp_9_fu_2149_p27),
    .sel(ap_sig_allocacmp_i),
    .dout(tmp_9_fu_2149_p29)
);

(* dissolve_hierarchy = "yes" *) conv5_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U1833(
    .din0(add180_1084109245_reload),
    .din1(add180_1_109258_reload),
    .din2(add180_2_109271_reload),
    .din3(add180_3_109284_reload),
    .din4(add180_4_109297_reload),
    .din5(add180_5_109310_reload),
    .din6(add180_6_109323_reload),
    .din7(add180_7_109336_reload),
    .din8(add180_8_109349_reload),
    .din9(add180_9_109362_reload),
    .din10(add180_10_109375_reload),
    .din11(add180_11_109388_reload),
    .din12(add180_12_109401_reload),
    .def(tmp_s_fu_2209_p27),
    .sel(ap_sig_allocacmp_i),
    .dout(tmp_s_fu_2209_p29)
);

(* dissolve_hierarchy = "yes" *) conv5_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U1834(
    .din0(add180_1184279246_reload),
    .din1(add180_1_119259_reload),
    .din2(add180_2_119272_reload),
    .din3(add180_3_119285_reload),
    .din4(add180_4_119298_reload),
    .din5(add180_5_119311_reload),
    .din6(add180_6_119324_reload),
    .din7(add180_7_119337_reload),
    .din8(add180_8_119350_reload),
    .din9(add180_9_119363_reload),
    .din10(add180_10_119376_reload),
    .din11(add180_11_119389_reload),
    .din12(add180_12_119402_reload),
    .def(tmp_10_fu_2269_p27),
    .sel(ap_sig_allocacmp_i),
    .dout(tmp_10_fu_2269_p29)
);

(* dissolve_hierarchy = "yes" *) conv5_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U1835(
    .din0(add180_1284449247_reload),
    .din1(add180_1_129260_reload),
    .din2(add180_2_129273_reload),
    .din3(add180_3_129286_reload),
    .din4(add180_4_129299_reload),
    .din5(add180_5_129312_reload),
    .din6(add180_6_129325_reload),
    .din7(add180_7_129338_reload),
    .din8(add180_8_129351_reload),
    .din9(add180_9_129364_reload),
    .din10(add180_10_129377_reload),
    .din11(add180_11_129390_reload),
    .din12(add180_12_129412_reload),
    .def(tmp_11_fu_2329_p27),
    .sel(ap_sig_allocacmp_i),
    .dout(tmp_11_fu_2329_p29)
);

conv5_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage6),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage0_subdone_grp0)) begin
                ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage10_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage10)) begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_block_pp0_stage10_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage10_subdone_grp0)) begin
                ap_block_pp0_stage10_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage11_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage11)) begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_block_pp0_stage11_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage11_subdone_grp0)) begin
                ap_block_pp0_stage11_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage12_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage12)) begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_block_pp0_stage12_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage12_subdone_grp0)) begin
                ap_block_pp0_stage12_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone_grp0)) begin
                ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage2_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage2)) begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_block_pp0_stage2_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage2_subdone_grp0)) begin
                ap_block_pp0_stage2_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage3_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage3)) begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_block_pp0_stage3_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage3_subdone_grp0)) begin
                ap_block_pp0_stage3_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage4_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage4)) begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_block_pp0_stage4_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage4_subdone_grp0)) begin
                ap_block_pp0_stage4_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage5_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage5)) begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_block_pp0_stage5_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage5_subdone_grp0)) begin
                ap_block_pp0_stage5_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage6_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage6)) begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_block_pp0_stage6_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage6_subdone_grp0)) begin
                ap_block_pp0_stage6_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage7_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage7)) begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_block_pp0_stage7_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage7_subdone_grp0)) begin
                ap_block_pp0_stage7_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage8_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage8)) begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_block_pp0_stage8_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage8_subdone_grp0)) begin
                ap_block_pp0_stage8_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage9_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage9)) begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_block_pp0_stage9_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage9_subdone_grp0)) begin
                ap_block_pp0_stage9_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage6_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage6)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_subdone))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((icmp_ln135_fu_1591_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_2_fu_426 <= add_ln135_fu_1597_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_2_fu_426 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln135_reg_3055 <= icmp_ln135_fu_1591_p2;
        tmp_10_reg_3131 <= tmp_10_fu_2269_p29;
        tmp_11_reg_3136 <= tmp_11_fu_2329_p29;
        tmp_1_reg_3081 <= tmp_1_fu_1669_p29;
        tmp_2_reg_3086 <= tmp_2_fu_1729_p29;
        tmp_3_reg_3091 <= tmp_3_fu_1789_p29;
        tmp_4_reg_3096 <= tmp_4_fu_1849_p29;
        tmp_5_reg_3101 <= tmp_5_fu_1909_p29;
        tmp_6_reg_3106 <= tmp_6_fu_1969_p29;
        tmp_7_reg_3111 <= tmp_7_fu_2029_p29;
        tmp_8_reg_3116 <= tmp_8_fu_2089_p29;
        tmp_9_reg_3121 <= tmp_9_fu_2149_p29;
        tmp_reg_3076 <= tmp_fu_1609_p29;
        tmp_s_reg_3126 <= tmp_s_fu_2209_p29;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage3_11001_grp0))) begin
        out_15_reg_3191 <= grp_fu_22809_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage6_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage6_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage4_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage4_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage10_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage10_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage8_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage8_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage12_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage12_11001_grp0)))) begin
        reg_1569 <= grp_fu_22809_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage2_11001_grp0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage5_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage5_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage11_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage11_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage9_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage9_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage7_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage7_11001_grp0)))) begin
        reg_1574 <= grp_fu_22809_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage3_11001_grp0))) begin
        select_ln135_10_reg_3197 <= select_ln135_10_fu_2936_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage4_11001_grp0))) begin
        select_ln135_11_reg_3202 <= select_ln135_11_fu_2986_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage5_11001_grp0))) begin
        select_ln135_12_reg_3207 <= select_ln135_12_fu_3035_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage7_11001_grp0))) begin
        select_ln135_1_reg_3146 <= select_ln135_1_fu_2486_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage8_11001_grp0))) begin
        select_ln135_2_reg_3151 <= select_ln135_2_fu_2536_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage9_11001_grp0))) begin
        select_ln135_3_reg_3156 <= select_ln135_3_fu_2586_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage10_11001_grp0))) begin
        select_ln135_4_reg_3161 <= select_ln135_4_fu_2636_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage11_11001_grp0))) begin
        select_ln135_5_reg_3166 <= select_ln135_5_fu_2686_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage12_11001_grp0))) begin
        select_ln135_6_reg_3171 <= select_ln135_6_fu_2736_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0))) begin
        select_ln135_7_reg_3176 <= select_ln135_7_fu_2786_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0))) begin
        select_ln135_8_reg_3181 <= select_ln135_8_fu_2836_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage2_11001_grp0))) begin
        select_ln135_9_reg_3186 <= select_ln135_9_fu_2886_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage6_11001_grp0))) begin
        select_ln135_reg_3141 <= select_ln135_fu_2436_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage6) & (icmp_ln135_reg_3055 == 1'd1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage6_subdone))) begin
        ap_condition_exit_pp0_iter0_stage6 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage6_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage12_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i = 4'd0;
    end else begin
        ap_sig_allocacmp_i = i_2_fu_426;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_grp13)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_grp12)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_grp11)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_grp10)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_grp9)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_grp8)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_grp7)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (icmp_ln135_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage11_grp5)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (icmp_ln135_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage10_grp4)) 
    | ((1'b1 == ap_CS_fsm_pp0_stage9) & (icmp_ln135_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage9_grp3)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (icmp_ln135_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage8_grp2)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (icmp_ln135_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage7_grp1)) | ((1'b1 == ap_CS_fsm_pp0_stage12) & (icmp_ln135_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage12_grp6)))) begin
        gmem0_blk_n_W = m_axi_gmem0_0_WREADY;
    end else begin
        gmem0_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage6_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage5_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage4_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage3_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage2_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage11_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_subdone_grp0_done_reg) & (1'b0 == 
    ap_block_pp0_stage10_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage9_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage8_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage7_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage12_11001_grp0)))) begin
        grp_fu_1560_ce = 1'b1;
    end else begin
        grp_fu_1560_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_grp0))) begin
        grp_fu_1560_p0 = tmp_11_reg_3136;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage12_grp0))) begin
        grp_fu_1560_p0 = tmp_10_reg_3131;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage11_grp0))) begin
        grp_fu_1560_p0 = tmp_s_reg_3126;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage10_grp0))) begin
        grp_fu_1560_p0 = tmp_9_reg_3121;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage9_grp0))) begin
        grp_fu_1560_p0 = tmp_8_reg_3116;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage8_grp0))) begin
        grp_fu_1560_p0 = tmp_7_reg_3111;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage7_grp0))) begin
        grp_fu_1560_p0 = tmp_6_reg_3106;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage6_grp0))) begin
        grp_fu_1560_p0 = tmp_5_reg_3101;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage5_grp0))) begin
        grp_fu_1560_p0 = tmp_4_reg_3096;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage4_grp0))) begin
        grp_fu_1560_p0 = tmp_3_reg_3091;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage3_grp0))) begin
        grp_fu_1560_p0 = tmp_2_reg_3086;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_grp0))) begin
        grp_fu_1560_p0 = tmp_1_reg_3081;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_grp0))) begin
        grp_fu_1560_p0 = tmp_reg_3076;
    end else begin
        grp_fu_1560_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage6_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage5_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage4_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage3_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage2_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage11_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_subdone_grp0_done_reg) & (1'b0 == 
    ap_block_pp0_stage10_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage9_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage8_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage7_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage12_11001_grp0)))) begin
        grp_fu_1564_ce = 1'b1;
    end else begin
        grp_fu_1564_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_grp0))) begin
        grp_fu_1564_p0 = out_15_reg_3191;
    end else if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_grp0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage6_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage10_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage8_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage12_grp0)))) begin
        grp_fu_1564_p0 = reg_1574;
    end else if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_grp0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage5_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage11_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage9_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage7_grp0)))) begin
        grp_fu_1564_p0 = reg_1569;
    end else begin
        grp_fu_1564_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_01001_grp13))) begin
        m_axi_gmem0_0_WDATA = select_ln135_12_reg_3207;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_01001_grp12))) begin
        m_axi_gmem0_0_WDATA = select_ln135_11_reg_3202;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_01001_grp11))) begin
        m_axi_gmem0_0_WDATA = select_ln135_10_reg_3197;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_01001_grp10))) begin
        m_axi_gmem0_0_WDATA = select_ln135_9_reg_3186;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_01001_grp9))) begin
        m_axi_gmem0_0_WDATA = select_ln135_8_reg_3181;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_01001_grp8))) begin
        m_axi_gmem0_0_WDATA = select_ln135_7_reg_3176;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001_grp7))) begin
        m_axi_gmem0_0_WDATA = select_ln135_6_reg_3171;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage12) & (icmp_ln135_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage12_01001_grp6))) begin
        m_axi_gmem0_0_WDATA = select_ln135_5_reg_3166;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage11) & (icmp_ln135_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage11_01001_grp5))) begin
        m_axi_gmem0_0_WDATA = select_ln135_4_reg_3161;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage10) & (icmp_ln135_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage10_01001_grp4))) begin
        m_axi_gmem0_0_WDATA = select_ln135_3_reg_3156;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage9) & (icmp_ln135_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage9_01001_grp3))) begin
        m_axi_gmem0_0_WDATA = select_ln135_2_reg_3151;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage8) & (icmp_ln135_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage8_01001_grp2))) begin
        m_axi_gmem0_0_WDATA = select_ln135_1_reg_3146;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage7) & (icmp_ln135_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage7_01001_grp1))) begin
        m_axi_gmem0_0_WDATA = select_ln135_reg_3141;
    end else begin
        m_axi_gmem0_0_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001_grp13)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001_grp12)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001_grp11)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001_grp10)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001_grp9)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001_grp8)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_grp7)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (icmp_ln135_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage11_11001_grp5)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (icmp_ln135_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg 
    == 1'b1) & (1'b0 == ap_block_pp0_stage10_11001_grp4)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (icmp_ln135_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage9_11001_grp3)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (icmp_ln135_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage8_11001_grp2)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (icmp_ln135_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001_grp1)) | ((1'b1 == ap_CS_fsm_pp0_stage12) & (icmp_ln135_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage12_11001_grp6)))) begin
        m_axi_gmem0_0_WVALID = 1'b1;
    end else begin
        m_axi_gmem0_0_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage6)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln135_fu_1597_p2 = (ap_sig_allocacmp_i + 4'd1);

assign and_ln142_10_fu_2930_p2 = (or_ln142_10_fu_2924_p2 & grp_fu_26821_p_dout0);

assign and_ln142_11_fu_2980_p2 = (or_ln142_11_fu_2974_p2 & grp_fu_26821_p_dout0);

assign and_ln142_12_fu_3029_p2 = (or_ln142_12_fu_3023_p2 & grp_fu_26821_p_dout0);

assign and_ln142_1_fu_2480_p2 = (or_ln142_1_fu_2474_p2 & grp_fu_26821_p_dout0);

assign and_ln142_2_fu_2530_p2 = (or_ln142_2_fu_2524_p2 & grp_fu_26821_p_dout0);

assign and_ln142_3_fu_2580_p2 = (or_ln142_3_fu_2574_p2 & grp_fu_26821_p_dout0);

assign and_ln142_4_fu_2630_p2 = (or_ln142_4_fu_2624_p2 & grp_fu_26821_p_dout0);

assign and_ln142_5_fu_2680_p2 = (or_ln142_5_fu_2674_p2 & grp_fu_26821_p_dout0);

assign and_ln142_6_fu_2730_p2 = (or_ln142_6_fu_2724_p2 & grp_fu_26821_p_dout0);

assign and_ln142_7_fu_2780_p2 = (or_ln142_7_fu_2774_p2 & grp_fu_26821_p_dout0);

assign and_ln142_8_fu_2830_p2 = (or_ln142_8_fu_2824_p2 & grp_fu_26821_p_dout0);

assign and_ln142_9_fu_2880_p2 = (or_ln142_9_fu_2874_p2 & grp_fu_26821_p_dout0);

assign and_ln142_fu_2430_p2 = (or_ln142_fu_2424_p2 & grp_fu_26821_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001_grp7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage0_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001_grp7 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage0_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_grp7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage0_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_01001_grp4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage10_11001_grp4 = ((1'b1 == ap_block_state11_io_grp4) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage10_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_grp4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage10_subdone = ((1'b1 == ap_block_state11_io_grp4) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage10_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_01001_grp5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage11_11001_grp5 = ((1'b1 == ap_block_state12_io_grp5) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage11_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_grp5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage11_subdone = ((1'b1 == ap_block_state12_io_grp5) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage11_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_01001_grp6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage12_11001_grp6 = ((1'b1 == ap_block_state13_io_grp6) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage12_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_grp6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage12_subdone = ((1'b1 == ap_block_state13_io_grp6) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage12_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001_grp8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage1_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001_grp8 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage1_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_grp8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage1_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_01001_grp9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage2_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001_grp9 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage2_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_grp9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage2_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_01001_grp10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage3_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001_grp10 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage3_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_grp10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage3_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_01001_grp11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage4_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001_grp11 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage4_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_grp11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage4_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_01001_grp12 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001_grp12 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage5_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_grp12 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_subdone = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage5_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_01001_grp13 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_11001_grp13 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage6_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_grp13 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_subdone = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage6_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_01001_grp1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_11001_grp1 = ((1'b1 == ap_block_state8_io_grp1) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage7_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_subdone = ((1'b1 == ap_block_state8_io_grp1) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage7_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_01001_grp2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage8_11001_grp2 = ((1'b1 == ap_block_state9_io_grp2) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage8_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_grp2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage8_subdone = ((1'b1 == ap_block_state9_io_grp2) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage8_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_01001_grp3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage9_11001_grp3 = ((1'b1 == ap_block_state10_io_grp3) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage9_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_grp3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage9_subdone = ((1'b1 == ap_block_state10_io_grp3) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage9_subdone_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state10_io_grp3 = ((m_axi_gmem0_0_WREADY == 1'b0) & (icmp_ln135_reg_3055 == 1'd0));
end

always @ (*) begin
    ap_block_state11_io_grp4 = ((m_axi_gmem0_0_WREADY == 1'b0) & (icmp_ln135_reg_3055 == 1'd0));
end

always @ (*) begin
    ap_block_state12_io_grp5 = ((m_axi_gmem0_0_WREADY == 1'b0) & (icmp_ln135_reg_3055 == 1'd0));
end

always @ (*) begin
    ap_block_state13_io_grp6 = ((m_axi_gmem0_0_WREADY == 1'b0) & (icmp_ln135_reg_3055 == 1'd0));
end

always @ (*) begin
    ap_block_state8_io_grp1 = ((m_axi_gmem0_0_WREADY == 1'b0) & (icmp_ln135_reg_3055 == 1'd0));
end

always @ (*) begin
    ap_block_state9_io_grp2 = ((m_axi_gmem0_0_WREADY == 1'b0) & (icmp_ln135_reg_3055 == 1'd0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage6;

assign ap_ready = ap_ready_sig;

assign bitcast_ln142_10_fu_2894_p1 = reg_1569;

assign bitcast_ln142_11_fu_2944_p1 = reg_1574;

assign bitcast_ln142_12_fu_2994_p1 = out_15_reg_3191;

assign bitcast_ln142_1_fu_2444_p1 = reg_1574;

assign bitcast_ln142_2_fu_2494_p1 = reg_1569;

assign bitcast_ln142_3_fu_2544_p1 = reg_1574;

assign bitcast_ln142_4_fu_2594_p1 = reg_1569;

assign bitcast_ln142_5_fu_2644_p1 = reg_1574;

assign bitcast_ln142_6_fu_2694_p1 = reg_1569;

assign bitcast_ln142_7_fu_2744_p1 = reg_1574;

assign bitcast_ln142_8_fu_2794_p1 = reg_1569;

assign bitcast_ln142_9_fu_2844_p1 = reg_1574;

assign bitcast_ln142_fu_2394_p1 = reg_1569;

assign grp_fu_22809_p_ce = grp_fu_1560_ce;

assign grp_fu_22809_p_din0 = grp_fu_1560_p0;

assign grp_fu_22809_p_din1 = empty;

assign grp_fu_22809_p_opcode = 2'd0;

assign grp_fu_26821_p_ce = grp_fu_1564_ce;

assign grp_fu_26821_p_din0 = grp_fu_1564_p0;

assign grp_fu_26821_p_din1 = 32'd0;

assign grp_fu_26821_p_opcode = 5'd2;

assign icmp_ln135_fu_1591_p2 = ((ap_sig_allocacmp_i == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln142_10_fu_2662_p2 = ((tmp_35_fu_2648_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln142_11_fu_2668_p2 = ((trunc_ln142_5_fu_2658_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln142_12_fu_2712_p2 = ((tmp_37_fu_2698_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln142_13_fu_2718_p2 = ((trunc_ln142_6_fu_2708_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln142_14_fu_2762_p2 = ((tmp_39_fu_2748_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln142_15_fu_2768_p2 = ((trunc_ln142_7_fu_2758_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln142_16_fu_2812_p2 = ((tmp_41_fu_2798_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln142_17_fu_2818_p2 = ((trunc_ln142_8_fu_2808_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln142_18_fu_2862_p2 = ((tmp_43_fu_2848_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln142_19_fu_2868_p2 = ((trunc_ln142_9_fu_2858_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln142_1_fu_2418_p2 = ((trunc_ln142_fu_2408_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln142_20_fu_2912_p2 = ((tmp_45_fu_2898_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln142_21_fu_2918_p2 = ((trunc_ln142_10_fu_2908_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln142_22_fu_2962_p2 = ((tmp_47_fu_2948_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln142_23_fu_2968_p2 = ((trunc_ln142_11_fu_2958_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln142_24_fu_3011_p2 = ((tmp_49_fu_2997_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln142_25_fu_3017_p2 = ((trunc_ln142_12_fu_3007_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln142_2_fu_2462_p2 = ((tmp_27_fu_2448_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln142_3_fu_2468_p2 = ((trunc_ln142_1_fu_2458_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln142_4_fu_2512_p2 = ((tmp_29_fu_2498_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln142_5_fu_2518_p2 = ((trunc_ln142_2_fu_2508_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln142_6_fu_2562_p2 = ((tmp_31_fu_2548_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln142_7_fu_2568_p2 = ((trunc_ln142_3_fu_2558_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln142_8_fu_2612_p2 = ((tmp_33_fu_2598_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln142_9_fu_2618_p2 = ((trunc_ln142_4_fu_2608_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln142_fu_2412_p2 = ((tmp_25_fu_2398_p4 != 8'd255) ? 1'b1 : 1'b0);

assign m_axi_gmem0_0_ARADDR = 64'd0;

assign m_axi_gmem0_0_ARBURST = 2'd0;

assign m_axi_gmem0_0_ARCACHE = 4'd0;

assign m_axi_gmem0_0_ARID = 1'd0;

assign m_axi_gmem0_0_ARLEN = 32'd0;

assign m_axi_gmem0_0_ARLOCK = 2'd0;

assign m_axi_gmem0_0_ARPROT = 3'd0;

assign m_axi_gmem0_0_ARQOS = 4'd0;

assign m_axi_gmem0_0_ARREGION = 4'd0;

assign m_axi_gmem0_0_ARSIZE = 3'd0;

assign m_axi_gmem0_0_ARUSER = 1'd0;

assign m_axi_gmem0_0_ARVALID = 1'b0;

assign m_axi_gmem0_0_AWADDR = 64'd0;

assign m_axi_gmem0_0_AWBURST = 2'd0;

assign m_axi_gmem0_0_AWCACHE = 4'd0;

assign m_axi_gmem0_0_AWID = 1'd0;

assign m_axi_gmem0_0_AWLEN = 32'd0;

assign m_axi_gmem0_0_AWLOCK = 2'd0;

assign m_axi_gmem0_0_AWPROT = 3'd0;

assign m_axi_gmem0_0_AWQOS = 4'd0;

assign m_axi_gmem0_0_AWREGION = 4'd0;

assign m_axi_gmem0_0_AWSIZE = 3'd0;

assign m_axi_gmem0_0_AWUSER = 1'd0;

assign m_axi_gmem0_0_AWVALID = 1'b0;

assign m_axi_gmem0_0_BREADY = 1'b0;

assign m_axi_gmem0_0_RREADY = 1'b0;

assign m_axi_gmem0_0_WID = 1'd0;

assign m_axi_gmem0_0_WLAST = 1'b0;

assign m_axi_gmem0_0_WSTRB = 4'd15;

assign m_axi_gmem0_0_WUSER = 1'd0;

assign or_ln142_10_fu_2924_p2 = (icmp_ln142_21_fu_2918_p2 | icmp_ln142_20_fu_2912_p2);

assign or_ln142_11_fu_2974_p2 = (icmp_ln142_23_fu_2968_p2 | icmp_ln142_22_fu_2962_p2);

assign or_ln142_12_fu_3023_p2 = (icmp_ln142_25_fu_3017_p2 | icmp_ln142_24_fu_3011_p2);

assign or_ln142_1_fu_2474_p2 = (icmp_ln142_3_fu_2468_p2 | icmp_ln142_2_fu_2462_p2);

assign or_ln142_2_fu_2524_p2 = (icmp_ln142_5_fu_2518_p2 | icmp_ln142_4_fu_2512_p2);

assign or_ln142_3_fu_2574_p2 = (icmp_ln142_7_fu_2568_p2 | icmp_ln142_6_fu_2562_p2);

assign or_ln142_4_fu_2624_p2 = (icmp_ln142_9_fu_2618_p2 | icmp_ln142_8_fu_2612_p2);

assign or_ln142_5_fu_2674_p2 = (icmp_ln142_11_fu_2668_p2 | icmp_ln142_10_fu_2662_p2);

assign or_ln142_6_fu_2724_p2 = (icmp_ln142_13_fu_2718_p2 | icmp_ln142_12_fu_2712_p2);

assign or_ln142_7_fu_2774_p2 = (icmp_ln142_15_fu_2768_p2 | icmp_ln142_14_fu_2762_p2);

assign or_ln142_8_fu_2824_p2 = (icmp_ln142_17_fu_2818_p2 | icmp_ln142_16_fu_2812_p2);

assign or_ln142_9_fu_2874_p2 = (icmp_ln142_19_fu_2868_p2 | icmp_ln142_18_fu_2862_p2);

assign or_ln142_fu_2424_p2 = (icmp_ln142_fu_2412_p2 | icmp_ln142_1_fu_2418_p2);

assign select_ln135_10_fu_2936_p3 = ((and_ln142_10_fu_2930_p2[0:0] == 1'b1) ? bitcast_ln142_10_fu_2894_p1 : 32'd0);

assign select_ln135_11_fu_2986_p3 = ((and_ln142_11_fu_2980_p2[0:0] == 1'b1) ? bitcast_ln142_11_fu_2944_p1 : 32'd0);

assign select_ln135_12_fu_3035_p3 = ((and_ln142_12_fu_3029_p2[0:0] == 1'b1) ? bitcast_ln142_12_fu_2994_p1 : 32'd0);

assign select_ln135_1_fu_2486_p3 = ((and_ln142_1_fu_2480_p2[0:0] == 1'b1) ? bitcast_ln142_1_fu_2444_p1 : 32'd0);

assign select_ln135_2_fu_2536_p3 = ((and_ln142_2_fu_2530_p2[0:0] == 1'b1) ? bitcast_ln142_2_fu_2494_p1 : 32'd0);

assign select_ln135_3_fu_2586_p3 = ((and_ln142_3_fu_2580_p2[0:0] == 1'b1) ? bitcast_ln142_3_fu_2544_p1 : 32'd0);

assign select_ln135_4_fu_2636_p3 = ((and_ln142_4_fu_2630_p2[0:0] == 1'b1) ? bitcast_ln142_4_fu_2594_p1 : 32'd0);

assign select_ln135_5_fu_2686_p3 = ((and_ln142_5_fu_2680_p2[0:0] == 1'b1) ? bitcast_ln142_5_fu_2644_p1 : 32'd0);

assign select_ln135_6_fu_2736_p3 = ((and_ln142_6_fu_2730_p2[0:0] == 1'b1) ? bitcast_ln142_6_fu_2694_p1 : 32'd0);

assign select_ln135_7_fu_2786_p3 = ((and_ln142_7_fu_2780_p2[0:0] == 1'b1) ? bitcast_ln142_7_fu_2744_p1 : 32'd0);

assign select_ln135_8_fu_2836_p3 = ((and_ln142_8_fu_2830_p2[0:0] == 1'b1) ? bitcast_ln142_8_fu_2794_p1 : 32'd0);

assign select_ln135_9_fu_2886_p3 = ((and_ln142_9_fu_2880_p2[0:0] == 1'b1) ? bitcast_ln142_9_fu_2844_p1 : 32'd0);

assign select_ln135_fu_2436_p3 = ((and_ln142_fu_2430_p2[0:0] == 1'b1) ? bitcast_ln142_fu_2394_p1 : 32'd0);

assign tmp_10_fu_2269_p27 = 'bx;

assign tmp_11_fu_2329_p27 = 'bx;

assign tmp_1_fu_1669_p27 = 'bx;

assign tmp_25_fu_2398_p4 = {{bitcast_ln142_fu_2394_p1[30:23]}};

assign tmp_27_fu_2448_p4 = {{bitcast_ln142_1_fu_2444_p1[30:23]}};

assign tmp_29_fu_2498_p4 = {{bitcast_ln142_2_fu_2494_p1[30:23]}};

assign tmp_2_fu_1729_p27 = 'bx;

assign tmp_31_fu_2548_p4 = {{bitcast_ln142_3_fu_2544_p1[30:23]}};

assign tmp_33_fu_2598_p4 = {{bitcast_ln142_4_fu_2594_p1[30:23]}};

assign tmp_35_fu_2648_p4 = {{bitcast_ln142_5_fu_2644_p1[30:23]}};

assign tmp_37_fu_2698_p4 = {{bitcast_ln142_6_fu_2694_p1[30:23]}};

assign tmp_39_fu_2748_p4 = {{bitcast_ln142_7_fu_2744_p1[30:23]}};

assign tmp_3_fu_1789_p27 = 'bx;

assign tmp_41_fu_2798_p4 = {{bitcast_ln142_8_fu_2794_p1[30:23]}};

assign tmp_43_fu_2848_p4 = {{bitcast_ln142_9_fu_2844_p1[30:23]}};

assign tmp_45_fu_2898_p4 = {{bitcast_ln142_10_fu_2894_p1[30:23]}};

assign tmp_47_fu_2948_p4 = {{bitcast_ln142_11_fu_2944_p1[30:23]}};

assign tmp_49_fu_2997_p4 = {{bitcast_ln142_12_fu_2994_p1[30:23]}};

assign tmp_4_fu_1849_p27 = 'bx;

assign tmp_5_fu_1909_p27 = 'bx;

assign tmp_6_fu_1969_p27 = 'bx;

assign tmp_7_fu_2029_p27 = 'bx;

assign tmp_8_fu_2089_p27 = 'bx;

assign tmp_9_fu_2149_p27 = 'bx;

assign tmp_fu_1609_p27 = 'bx;

assign tmp_s_fu_2209_p27 = 'bx;

assign trunc_ln142_10_fu_2908_p1 = bitcast_ln142_10_fu_2894_p1[22:0];

assign trunc_ln142_11_fu_2958_p1 = bitcast_ln142_11_fu_2944_p1[22:0];

assign trunc_ln142_12_fu_3007_p1 = bitcast_ln142_12_fu_2994_p1[22:0];

assign trunc_ln142_1_fu_2458_p1 = bitcast_ln142_1_fu_2444_p1[22:0];

assign trunc_ln142_2_fu_2508_p1 = bitcast_ln142_2_fu_2494_p1[22:0];

assign trunc_ln142_3_fu_2558_p1 = bitcast_ln142_3_fu_2544_p1[22:0];

assign trunc_ln142_4_fu_2608_p1 = bitcast_ln142_4_fu_2594_p1[22:0];

assign trunc_ln142_5_fu_2658_p1 = bitcast_ln142_5_fu_2644_p1[22:0];

assign trunc_ln142_6_fu_2708_p1 = bitcast_ln142_6_fu_2694_p1[22:0];

assign trunc_ln142_7_fu_2758_p1 = bitcast_ln142_7_fu_2744_p1[22:0];

assign trunc_ln142_8_fu_2808_p1 = bitcast_ln142_8_fu_2794_p1[22:0];

assign trunc_ln142_9_fu_2858_p1 = bitcast_ln142_9_fu_2844_p1[22:0];

assign trunc_ln142_fu_2408_p1 = bitcast_ln142_fu_2394_p1[22:0];

endmodule //conv5_conv5_Pipeline_M1
