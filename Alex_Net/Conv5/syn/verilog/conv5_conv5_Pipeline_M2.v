// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module conv5_conv5_Pipeline_M2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem0_0_AWVALID,
        m_axi_gmem0_0_AWREADY,
        m_axi_gmem0_0_AWADDR,
        m_axi_gmem0_0_AWID,
        m_axi_gmem0_0_AWLEN,
        m_axi_gmem0_0_AWSIZE,
        m_axi_gmem0_0_AWBURST,
        m_axi_gmem0_0_AWLOCK,
        m_axi_gmem0_0_AWCACHE,
        m_axi_gmem0_0_AWPROT,
        m_axi_gmem0_0_AWQOS,
        m_axi_gmem0_0_AWREGION,
        m_axi_gmem0_0_AWUSER,
        m_axi_gmem0_0_WVALID,
        m_axi_gmem0_0_WREADY,
        m_axi_gmem0_0_WDATA,
        m_axi_gmem0_0_WSTRB,
        m_axi_gmem0_0_WLAST,
        m_axi_gmem0_0_WID,
        m_axi_gmem0_0_WUSER,
        m_axi_gmem0_0_ARVALID,
        m_axi_gmem0_0_ARREADY,
        m_axi_gmem0_0_ARADDR,
        m_axi_gmem0_0_ARID,
        m_axi_gmem0_0_ARLEN,
        m_axi_gmem0_0_ARSIZE,
        m_axi_gmem0_0_ARBURST,
        m_axi_gmem0_0_ARLOCK,
        m_axi_gmem0_0_ARCACHE,
        m_axi_gmem0_0_ARPROT,
        m_axi_gmem0_0_ARQOS,
        m_axi_gmem0_0_ARREGION,
        m_axi_gmem0_0_ARUSER,
        m_axi_gmem0_0_RVALID,
        m_axi_gmem0_0_RREADY,
        m_axi_gmem0_0_RDATA,
        m_axi_gmem0_0_RLAST,
        m_axi_gmem0_0_RID,
        m_axi_gmem0_0_RFIFONUM,
        m_axi_gmem0_0_RUSER,
        m_axi_gmem0_0_RRESP,
        m_axi_gmem0_0_BVALID,
        m_axi_gmem0_0_BREADY,
        m_axi_gmem0_0_BRESP,
        m_axi_gmem0_0_BID,
        m_axi_gmem0_0_BUSER,
        sext_ln163,
        p_reload539,
        p_reload526,
        p_reload513,
        p_reload500,
        p_reload487,
        p_reload474,
        p_reload461,
        p_reload448,
        p_reload435,
        p_reload422,
        p_reload409,
        p_reload396,
        p_reload383,
        empty,
        p_reload538,
        p_reload525,
        p_reload512,
        p_reload499,
        p_reload486,
        p_reload473,
        p_reload460,
        p_reload447,
        p_reload434,
        p_reload421,
        p_reload408,
        p_reload395,
        p_reload382,
        p_reload537,
        p_reload524,
        p_reload511,
        p_reload498,
        p_reload485,
        p_reload472,
        p_reload459,
        p_reload446,
        p_reload433,
        p_reload420,
        p_reload407,
        p_reload394,
        p_reload381,
        p_reload536,
        p_reload523,
        p_reload510,
        p_reload497,
        p_reload484,
        p_reload471,
        p_reload458,
        p_reload445,
        p_reload432,
        p_reload419,
        p_reload406,
        p_reload393,
        p_reload380,
        p_reload535,
        p_reload522,
        p_reload509,
        p_reload496,
        p_reload483,
        p_reload470,
        p_reload457,
        p_reload444,
        p_reload431,
        p_reload418,
        p_reload405,
        p_reload392,
        p_reload379,
        p_reload534,
        p_reload521,
        p_reload508,
        p_reload495,
        p_reload482,
        p_reload469,
        p_reload456,
        p_reload443,
        p_reload430,
        p_reload417,
        p_reload404,
        p_reload391,
        p_reload378,
        p_reload533,
        p_reload520,
        p_reload507,
        p_reload494,
        p_reload481,
        p_reload468,
        p_reload455,
        p_reload442,
        p_reload429,
        p_reload416,
        p_reload403,
        p_reload390,
        p_reload377,
        p_reload532,
        p_reload519,
        p_reload506,
        p_reload493,
        p_reload480,
        p_reload467,
        p_reload454,
        p_reload441,
        p_reload428,
        p_reload415,
        p_reload402,
        p_reload389,
        p_reload376,
        p_reload531,
        p_reload518,
        p_reload505,
        p_reload492,
        p_reload479,
        p_reload466,
        p_reload453,
        p_reload440,
        p_reload427,
        p_reload414,
        p_reload401,
        p_reload388,
        p_reload375,
        p_reload530,
        p_reload517,
        p_reload504,
        p_reload491,
        p_reload478,
        p_reload465,
        p_reload452,
        p_reload439,
        p_reload426,
        p_reload413,
        p_reload400,
        p_reload387,
        p_reload374,
        p_reload529,
        p_reload516,
        p_reload503,
        p_reload490,
        p_reload477,
        p_reload464,
        p_reload451,
        p_reload438,
        p_reload425,
        p_reload412,
        p_reload399,
        p_reload386,
        p_reload373,
        p_reload528,
        p_reload515,
        p_reload502,
        p_reload489,
        p_reload476,
        p_reload463,
        p_reload450,
        p_reload437,
        p_reload424,
        p_reload411,
        p_reload398,
        p_reload385,
        p_reload372,
        p_reload527,
        p_reload514,
        p_reload501,
        p_reload488,
        p_reload475,
        p_reload462,
        p_reload449,
        p_reload436,
        p_reload423,
        p_reload410,
        p_reload397,
        p_reload384,
        p_reload,
        grp_fu_22809_p_din0,
        grp_fu_22809_p_din1,
        grp_fu_22809_p_opcode,
        grp_fu_22809_p_dout0,
        grp_fu_22809_p_ce,
        grp_fu_26821_p_din0,
        grp_fu_26821_p_din1,
        grp_fu_26821_p_opcode,
        grp_fu_26821_p_dout0,
        grp_fu_26821_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 13'd1;
parameter    ap_ST_fsm_pp0_stage1 = 13'd2;
parameter    ap_ST_fsm_pp0_stage2 = 13'd4;
parameter    ap_ST_fsm_pp0_stage3 = 13'd8;
parameter    ap_ST_fsm_pp0_stage4 = 13'd16;
parameter    ap_ST_fsm_pp0_stage5 = 13'd32;
parameter    ap_ST_fsm_pp0_stage6 = 13'd64;
parameter    ap_ST_fsm_pp0_stage7 = 13'd128;
parameter    ap_ST_fsm_pp0_stage8 = 13'd256;
parameter    ap_ST_fsm_pp0_stage9 = 13'd512;
parameter    ap_ST_fsm_pp0_stage10 = 13'd1024;
parameter    ap_ST_fsm_pp0_stage11 = 13'd2048;
parameter    ap_ST_fsm_pp0_stage12 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem0_0_AWVALID;
input   m_axi_gmem0_0_AWREADY;
output  [63:0] m_axi_gmem0_0_AWADDR;
output  [0:0] m_axi_gmem0_0_AWID;
output  [31:0] m_axi_gmem0_0_AWLEN;
output  [2:0] m_axi_gmem0_0_AWSIZE;
output  [1:0] m_axi_gmem0_0_AWBURST;
output  [1:0] m_axi_gmem0_0_AWLOCK;
output  [3:0] m_axi_gmem0_0_AWCACHE;
output  [2:0] m_axi_gmem0_0_AWPROT;
output  [3:0] m_axi_gmem0_0_AWQOS;
output  [3:0] m_axi_gmem0_0_AWREGION;
output  [0:0] m_axi_gmem0_0_AWUSER;
output   m_axi_gmem0_0_WVALID;
input   m_axi_gmem0_0_WREADY;
output  [31:0] m_axi_gmem0_0_WDATA;
output  [3:0] m_axi_gmem0_0_WSTRB;
output   m_axi_gmem0_0_WLAST;
output  [0:0] m_axi_gmem0_0_WID;
output  [0:0] m_axi_gmem0_0_WUSER;
output   m_axi_gmem0_0_ARVALID;
input   m_axi_gmem0_0_ARREADY;
output  [63:0] m_axi_gmem0_0_ARADDR;
output  [0:0] m_axi_gmem0_0_ARID;
output  [31:0] m_axi_gmem0_0_ARLEN;
output  [2:0] m_axi_gmem0_0_ARSIZE;
output  [1:0] m_axi_gmem0_0_ARBURST;
output  [1:0] m_axi_gmem0_0_ARLOCK;
output  [3:0] m_axi_gmem0_0_ARCACHE;
output  [2:0] m_axi_gmem0_0_ARPROT;
output  [3:0] m_axi_gmem0_0_ARQOS;
output  [3:0] m_axi_gmem0_0_ARREGION;
output  [0:0] m_axi_gmem0_0_ARUSER;
input   m_axi_gmem0_0_RVALID;
output   m_axi_gmem0_0_RREADY;
input  [31:0] m_axi_gmem0_0_RDATA;
input   m_axi_gmem0_0_RLAST;
input  [0:0] m_axi_gmem0_0_RID;
input  [8:0] m_axi_gmem0_0_RFIFONUM;
input  [0:0] m_axi_gmem0_0_RUSER;
input  [1:0] m_axi_gmem0_0_RRESP;
input   m_axi_gmem0_0_BVALID;
output   m_axi_gmem0_0_BREADY;
input  [1:0] m_axi_gmem0_0_BRESP;
input  [0:0] m_axi_gmem0_0_BID;
input  [0:0] m_axi_gmem0_0_BUSER;
input  [61:0] sext_ln163;
input  [31:0] p_reload539;
input  [31:0] p_reload526;
input  [31:0] p_reload513;
input  [31:0] p_reload500;
input  [31:0] p_reload487;
input  [31:0] p_reload474;
input  [31:0] p_reload461;
input  [31:0] p_reload448;
input  [31:0] p_reload435;
input  [31:0] p_reload422;
input  [31:0] p_reload409;
input  [31:0] p_reload396;
input  [31:0] p_reload383;
input  [31:0] empty;
input  [31:0] p_reload538;
input  [31:0] p_reload525;
input  [31:0] p_reload512;
input  [31:0] p_reload499;
input  [31:0] p_reload486;
input  [31:0] p_reload473;
input  [31:0] p_reload460;
input  [31:0] p_reload447;
input  [31:0] p_reload434;
input  [31:0] p_reload421;
input  [31:0] p_reload408;
input  [31:0] p_reload395;
input  [31:0] p_reload382;
input  [31:0] p_reload537;
input  [31:0] p_reload524;
input  [31:0] p_reload511;
input  [31:0] p_reload498;
input  [31:0] p_reload485;
input  [31:0] p_reload472;
input  [31:0] p_reload459;
input  [31:0] p_reload446;
input  [31:0] p_reload433;
input  [31:0] p_reload420;
input  [31:0] p_reload407;
input  [31:0] p_reload394;
input  [31:0] p_reload381;
input  [31:0] p_reload536;
input  [31:0] p_reload523;
input  [31:0] p_reload510;
input  [31:0] p_reload497;
input  [31:0] p_reload484;
input  [31:0] p_reload471;
input  [31:0] p_reload458;
input  [31:0] p_reload445;
input  [31:0] p_reload432;
input  [31:0] p_reload419;
input  [31:0] p_reload406;
input  [31:0] p_reload393;
input  [31:0] p_reload380;
input  [31:0] p_reload535;
input  [31:0] p_reload522;
input  [31:0] p_reload509;
input  [31:0] p_reload496;
input  [31:0] p_reload483;
input  [31:0] p_reload470;
input  [31:0] p_reload457;
input  [31:0] p_reload444;
input  [31:0] p_reload431;
input  [31:0] p_reload418;
input  [31:0] p_reload405;
input  [31:0] p_reload392;
input  [31:0] p_reload379;
input  [31:0] p_reload534;
input  [31:0] p_reload521;
input  [31:0] p_reload508;
input  [31:0] p_reload495;
input  [31:0] p_reload482;
input  [31:0] p_reload469;
input  [31:0] p_reload456;
input  [31:0] p_reload443;
input  [31:0] p_reload430;
input  [31:0] p_reload417;
input  [31:0] p_reload404;
input  [31:0] p_reload391;
input  [31:0] p_reload378;
input  [31:0] p_reload533;
input  [31:0] p_reload520;
input  [31:0] p_reload507;
input  [31:0] p_reload494;
input  [31:0] p_reload481;
input  [31:0] p_reload468;
input  [31:0] p_reload455;
input  [31:0] p_reload442;
input  [31:0] p_reload429;
input  [31:0] p_reload416;
input  [31:0] p_reload403;
input  [31:0] p_reload390;
input  [31:0] p_reload377;
input  [31:0] p_reload532;
input  [31:0] p_reload519;
input  [31:0] p_reload506;
input  [31:0] p_reload493;
input  [31:0] p_reload480;
input  [31:0] p_reload467;
input  [31:0] p_reload454;
input  [31:0] p_reload441;
input  [31:0] p_reload428;
input  [31:0] p_reload415;
input  [31:0] p_reload402;
input  [31:0] p_reload389;
input  [31:0] p_reload376;
input  [31:0] p_reload531;
input  [31:0] p_reload518;
input  [31:0] p_reload505;
input  [31:0] p_reload492;
input  [31:0] p_reload479;
input  [31:0] p_reload466;
input  [31:0] p_reload453;
input  [31:0] p_reload440;
input  [31:0] p_reload427;
input  [31:0] p_reload414;
input  [31:0] p_reload401;
input  [31:0] p_reload388;
input  [31:0] p_reload375;
input  [31:0] p_reload530;
input  [31:0] p_reload517;
input  [31:0] p_reload504;
input  [31:0] p_reload491;
input  [31:0] p_reload478;
input  [31:0] p_reload465;
input  [31:0] p_reload452;
input  [31:0] p_reload439;
input  [31:0] p_reload426;
input  [31:0] p_reload413;
input  [31:0] p_reload400;
input  [31:0] p_reload387;
input  [31:0] p_reload374;
input  [31:0] p_reload529;
input  [31:0] p_reload516;
input  [31:0] p_reload503;
input  [31:0] p_reload490;
input  [31:0] p_reload477;
input  [31:0] p_reload464;
input  [31:0] p_reload451;
input  [31:0] p_reload438;
input  [31:0] p_reload425;
input  [31:0] p_reload412;
input  [31:0] p_reload399;
input  [31:0] p_reload386;
input  [31:0] p_reload373;
input  [31:0] p_reload528;
input  [31:0] p_reload515;
input  [31:0] p_reload502;
input  [31:0] p_reload489;
input  [31:0] p_reload476;
input  [31:0] p_reload463;
input  [31:0] p_reload450;
input  [31:0] p_reload437;
input  [31:0] p_reload424;
input  [31:0] p_reload411;
input  [31:0] p_reload398;
input  [31:0] p_reload385;
input  [31:0] p_reload372;
input  [31:0] p_reload527;
input  [31:0] p_reload514;
input  [31:0] p_reload501;
input  [31:0] p_reload488;
input  [31:0] p_reload475;
input  [31:0] p_reload462;
input  [31:0] p_reload449;
input  [31:0] p_reload436;
input  [31:0] p_reload423;
input  [31:0] p_reload410;
input  [31:0] p_reload397;
input  [31:0] p_reload384;
input  [31:0] p_reload;
output  [31:0] grp_fu_22809_p_din0;
output  [31:0] grp_fu_22809_p_din1;
output  [1:0] grp_fu_22809_p_opcode;
input  [31:0] grp_fu_22809_p_dout0;
output   grp_fu_22809_p_ce;
output  [31:0] grp_fu_26821_p_din0;
output  [31:0] grp_fu_26821_p_din1;
output  [4:0] grp_fu_26821_p_opcode;
input  [0:0] grp_fu_26821_p_dout0;
output   grp_fu_26821_p_ce;

reg ap_idle;
reg m_axi_gmem0_0_WVALID;
reg[31:0] m_axi_gmem0_0_WDATA;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage6;
reg    ap_block_pp0_stage6_subdone;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [0:0] icmp_ln220_reg_3055;
reg    ap_condition_exit_pp0_iter0_stage6;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage12;
reg    ap_block_state13_io_grp6;
reg    ap_block_pp0_stage12_subdone;
reg    gmem0_blk_n_W;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7_grp1;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_pp0_stage8_grp2;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_pp0_stage9_grp3;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_pp0_stage10_grp4;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_pp0_stage11_grp5;
wire    ap_block_pp0_stage12_grp6;
wire    ap_block_pp0_stage0_grp7;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_grp8;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_grp9;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3_grp10;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4_grp11;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5_grp12;
wire    ap_block_pp0_stage6_grp13;
reg   [31:0] reg_1569;
wire    ap_block_pp0_stage4_11001_grp0;
reg    ap_block_pp0_stage4_subdone_grp0_done_reg;
wire    ap_block_pp0_stage4_subdone_grp0;
reg    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage6_11001_grp0;
reg    ap_block_pp0_stage6_subdone_grp0_done_reg;
wire    ap_block_pp0_stage6_subdone_grp0;
wire    ap_block_pp0_stage8_11001_grp0;
reg    ap_block_pp0_stage8_subdone_grp0_done_reg;
wire    ap_block_pp0_stage8_subdone_grp0;
reg    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage10_11001_grp0;
reg    ap_block_pp0_stage10_subdone_grp0_done_reg;
wire    ap_block_pp0_stage10_subdone_grp0;
reg    ap_block_pp0_stage10_subdone;
wire    ap_block_pp0_stage12_11001_grp0;
reg    ap_block_pp0_stage12_subdone_grp0_done_reg;
wire    ap_block_pp0_stage12_subdone_grp0;
wire    ap_block_pp0_stage1_11001_grp0;
reg    ap_block_pp0_stage1_subdone_grp0_done_reg;
wire    ap_block_pp0_stage1_subdone_grp0;
reg    ap_block_pp0_stage1_subdone;
reg   [31:0] reg_1574;
wire    ap_block_pp0_stage5_11001_grp0;
reg    ap_block_pp0_stage5_subdone_grp0_done_reg;
wire    ap_block_pp0_stage5_subdone_grp0;
reg    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage7_11001_grp0;
reg    ap_block_pp0_stage7_subdone_grp0_done_reg;
wire    ap_block_pp0_stage7_subdone_grp0;
reg    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage9_11001_grp0;
reg    ap_block_pp0_stage9_subdone_grp0_done_reg;
wire    ap_block_pp0_stage9_subdone_grp0;
reg    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage11_11001_grp0;
reg    ap_block_pp0_stage11_subdone_grp0_done_reg;
wire    ap_block_pp0_stage11_subdone_grp0;
reg    ap_block_pp0_stage11_subdone;
wire    ap_block_pp0_stage0_11001_grp0;
reg    ap_block_pp0_stage0_subdone_grp0_done_reg;
wire    ap_block_pp0_stage0_subdone_grp0;
reg    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage2_11001_grp0;
reg    ap_block_pp0_stage2_subdone_grp0_done_reg;
wire    ap_block_pp0_stage2_subdone_grp0;
reg    ap_block_pp0_stage2_subdone;
wire   [0:0] icmp_ln220_fu_1591_p2;
reg    ap_block_pp0_stage0_11001;
reg    ap_block_pp0_stage0_11001_grp7;
wire   [31:0] tmp_s_fu_1609_p29;
reg   [31:0] tmp_s_reg_3076;
wire   [31:0] tmp_3_fu_1669_p29;
reg   [31:0] tmp_3_reg_3081;
wire   [31:0] tmp_6_fu_1729_p29;
reg   [31:0] tmp_6_reg_3086;
wire   [31:0] tmp_9_fu_1789_p29;
reg   [31:0] tmp_9_reg_3091;
wire   [31:0] tmp_12_fu_1849_p29;
reg   [31:0] tmp_12_reg_3096;
wire   [31:0] tmp_15_fu_1909_p29;
reg   [31:0] tmp_15_reg_3101;
wire   [31:0] tmp_18_fu_1969_p29;
reg   [31:0] tmp_18_reg_3106;
wire   [31:0] tmp_19_fu_2029_p29;
reg   [31:0] tmp_19_reg_3111;
wire   [31:0] tmp_20_fu_2089_p29;
reg   [31:0] tmp_20_reg_3116;
wire   [31:0] tmp_21_fu_2149_p29;
reg   [31:0] tmp_21_reg_3121;
wire   [31:0] tmp_22_fu_2209_p29;
reg   [31:0] tmp_22_reg_3126;
wire   [31:0] tmp_23_fu_2269_p29;
reg   [31:0] tmp_23_reg_3131;
wire   [31:0] tmp_24_fu_2329_p29;
reg   [31:0] tmp_24_reg_3136;
wire   [31:0] select_ln220_fu_2436_p3;
reg   [31:0] select_ln220_reg_3141;
wire   [31:0] select_ln220_1_fu_2486_p3;
reg   [31:0] select_ln220_1_reg_3146;
wire   [31:0] select_ln220_2_fu_2536_p3;
reg   [31:0] select_ln220_2_reg_3151;
wire   [31:0] select_ln220_3_fu_2586_p3;
reg   [31:0] select_ln220_3_reg_3156;
wire   [31:0] select_ln220_4_fu_2636_p3;
reg   [31:0] select_ln220_4_reg_3161;
wire   [31:0] select_ln220_5_fu_2686_p3;
reg   [31:0] select_ln220_5_reg_3166;
wire   [31:0] select_ln220_6_fu_2736_p3;
reg   [31:0] select_ln220_6_reg_3171;
wire   [31:0] select_ln220_7_fu_2786_p3;
reg   [31:0] select_ln220_7_reg_3176;
wire   [31:0] select_ln220_8_fu_2836_p3;
reg   [31:0] select_ln220_8_reg_3181;
wire   [31:0] select_ln220_9_fu_2886_p3;
reg   [31:0] select_ln220_9_reg_3186;
reg   [31:0] out_12_reg_3191;
wire    ap_block_pp0_stage3_11001_grp0;
reg    ap_block_pp0_stage3_subdone_grp0_done_reg;
wire    ap_block_pp0_stage3_subdone_grp0;
reg    ap_block_pp0_stage3_subdone;
wire   [31:0] select_ln220_10_fu_2936_p3;
reg   [31:0] select_ln220_10_reg_3197;
wire   [31:0] select_ln220_11_fu_2986_p3;
reg   [31:0] select_ln220_11_reg_3202;
wire   [31:0] select_ln220_12_fu_3035_p3;
reg   [31:0] select_ln220_12_reg_3207;
reg    ap_block_state8_io_grp1;
reg    ap_block_pp0_stage7_11001_grp1;
wire    ap_block_pp0_stage7_01001_grp1;
reg    ap_block_state9_io_grp2;
reg    ap_block_pp0_stage8_11001_grp2;
wire    ap_block_pp0_stage8_01001_grp2;
reg    ap_block_state10_io_grp3;
reg    ap_block_pp0_stage9_11001_grp3;
wire    ap_block_pp0_stage9_01001_grp3;
reg    ap_block_state11_io_grp4;
reg    ap_block_pp0_stage10_11001_grp4;
wire    ap_block_pp0_stage10_01001_grp4;
reg    ap_block_state12_io_grp5;
reg    ap_block_pp0_stage11_11001_grp5;
wire    ap_block_pp0_stage11_01001_grp5;
reg    ap_block_pp0_stage12_11001_grp6;
wire    ap_block_pp0_stage12_01001_grp6;
wire    ap_block_pp0_stage0_01001_grp7;
reg    ap_block_pp0_stage1_11001_grp8;
wire    ap_block_pp0_stage1_01001_grp8;
reg    ap_block_pp0_stage2_11001_grp9;
wire    ap_block_pp0_stage2_01001_grp9;
reg    ap_block_pp0_stage3_11001_grp10;
wire    ap_block_pp0_stage3_01001_grp10;
reg    ap_block_pp0_stage4_11001_grp11;
wire    ap_block_pp0_stage4_01001_grp11;
reg    ap_block_pp0_stage5_11001_grp12;
wire    ap_block_pp0_stage5_01001_grp12;
reg    ap_block_pp0_stage6_11001_grp13;
wire    ap_block_pp0_stage6_01001_grp13;
reg   [3:0] i_fu_426;
wire   [3:0] add_ln220_fu_1597_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_2;
wire    ap_block_pp0_stage0;
reg   [31:0] grp_fu_1560_p0;
wire    ap_block_pp0_stage1_grp0;
wire    ap_block_pp0_stage2_grp0;
wire    ap_block_pp0_stage3_grp0;
wire    ap_block_pp0_stage4_grp0;
wire    ap_block_pp0_stage5_grp0;
wire    ap_block_pp0_stage6_grp0;
wire    ap_block_pp0_stage7_grp0;
wire    ap_block_pp0_stage8_grp0;
wire    ap_block_pp0_stage9_grp0;
wire    ap_block_pp0_stage10_grp0;
wire    ap_block_pp0_stage11_grp0;
wire    ap_block_pp0_stage12_grp0;
wire    ap_block_pp0_stage0_grp0;
reg   [31:0] grp_fu_1564_p0;
wire   [31:0] tmp_s_fu_1609_p27;
wire   [31:0] tmp_3_fu_1669_p27;
wire   [31:0] tmp_6_fu_1729_p27;
wire   [31:0] tmp_9_fu_1789_p27;
wire   [31:0] tmp_12_fu_1849_p27;
wire   [31:0] tmp_15_fu_1909_p27;
wire   [31:0] tmp_18_fu_1969_p27;
wire   [31:0] tmp_19_fu_2029_p27;
wire   [31:0] tmp_20_fu_2089_p27;
wire   [31:0] tmp_21_fu_2149_p27;
wire   [31:0] tmp_22_fu_2209_p27;
wire   [31:0] tmp_23_fu_2269_p27;
wire   [31:0] tmp_24_fu_2329_p27;
wire   [31:0] bitcast_ln227_fu_2394_p1;
wire   [7:0] tmp_1_fu_2398_p4;
wire   [22:0] trunc_ln227_fu_2408_p1;
wire   [0:0] icmp_ln227_1_fu_2418_p2;
wire   [0:0] icmp_ln227_fu_2412_p2;
wire   [0:0] or_ln227_fu_2424_p2;
wire   [0:0] and_ln227_fu_2430_p2;
wire   [31:0] bitcast_ln227_1_fu_2444_p1;
wire   [7:0] tmp_4_fu_2448_p4;
wire   [22:0] trunc_ln227_1_fu_2458_p1;
wire   [0:0] icmp_ln227_3_fu_2468_p2;
wire   [0:0] icmp_ln227_2_fu_2462_p2;
wire   [0:0] or_ln227_1_fu_2474_p2;
wire   [0:0] and_ln227_1_fu_2480_p2;
wire   [31:0] bitcast_ln227_2_fu_2494_p1;
wire   [7:0] tmp_7_fu_2498_p4;
wire   [22:0] trunc_ln227_2_fu_2508_p1;
wire   [0:0] icmp_ln227_5_fu_2518_p2;
wire   [0:0] icmp_ln227_4_fu_2512_p2;
wire   [0:0] or_ln227_2_fu_2524_p2;
wire   [0:0] and_ln227_2_fu_2530_p2;
wire   [31:0] bitcast_ln227_3_fu_2544_p1;
wire   [7:0] tmp_10_fu_2548_p4;
wire   [22:0] trunc_ln227_3_fu_2558_p1;
wire   [0:0] icmp_ln227_7_fu_2568_p2;
wire   [0:0] icmp_ln227_6_fu_2562_p2;
wire   [0:0] or_ln227_3_fu_2574_p2;
wire   [0:0] and_ln227_3_fu_2580_p2;
wire   [31:0] bitcast_ln227_4_fu_2594_p1;
wire   [7:0] tmp_13_fu_2598_p4;
wire   [22:0] trunc_ln227_4_fu_2608_p1;
wire   [0:0] icmp_ln227_9_fu_2618_p2;
wire   [0:0] icmp_ln227_8_fu_2612_p2;
wire   [0:0] or_ln227_4_fu_2624_p2;
wire   [0:0] and_ln227_4_fu_2630_p2;
wire   [31:0] bitcast_ln227_5_fu_2644_p1;
wire   [7:0] tmp_16_fu_2648_p4;
wire   [22:0] trunc_ln227_5_fu_2658_p1;
wire   [0:0] icmp_ln227_11_fu_2668_p2;
wire   [0:0] icmp_ln227_10_fu_2662_p2;
wire   [0:0] or_ln227_5_fu_2674_p2;
wire   [0:0] and_ln227_5_fu_2680_p2;
wire   [31:0] bitcast_ln227_6_fu_2694_p1;
wire   [7:0] tmp_25_fu_2698_p4;
wire   [22:0] trunc_ln227_6_fu_2708_p1;
wire   [0:0] icmp_ln227_13_fu_2718_p2;
wire   [0:0] icmp_ln227_12_fu_2712_p2;
wire   [0:0] or_ln227_6_fu_2724_p2;
wire   [0:0] and_ln227_6_fu_2730_p2;
wire   [31:0] bitcast_ln227_7_fu_2744_p1;
wire   [7:0] tmp_27_fu_2748_p4;
wire   [22:0] trunc_ln227_7_fu_2758_p1;
wire   [0:0] icmp_ln227_15_fu_2768_p2;
wire   [0:0] icmp_ln227_14_fu_2762_p2;
wire   [0:0] or_ln227_7_fu_2774_p2;
wire   [0:0] and_ln227_7_fu_2780_p2;
wire   [31:0] bitcast_ln227_8_fu_2794_p1;
wire   [7:0] tmp_29_fu_2798_p4;
wire   [22:0] trunc_ln227_8_fu_2808_p1;
wire   [0:0] icmp_ln227_17_fu_2818_p2;
wire   [0:0] icmp_ln227_16_fu_2812_p2;
wire   [0:0] or_ln227_8_fu_2824_p2;
wire   [0:0] and_ln227_8_fu_2830_p2;
wire   [31:0] bitcast_ln227_9_fu_2844_p1;
wire   [7:0] tmp_31_fu_2848_p4;
wire   [22:0] trunc_ln227_9_fu_2858_p1;
wire   [0:0] icmp_ln227_19_fu_2868_p2;
wire   [0:0] icmp_ln227_18_fu_2862_p2;
wire   [0:0] or_ln227_9_fu_2874_p2;
wire   [0:0] and_ln227_9_fu_2880_p2;
wire   [31:0] bitcast_ln227_10_fu_2894_p1;
wire   [7:0] tmp_33_fu_2898_p4;
wire   [22:0] trunc_ln227_10_fu_2908_p1;
wire   [0:0] icmp_ln227_21_fu_2918_p2;
wire   [0:0] icmp_ln227_20_fu_2912_p2;
wire   [0:0] or_ln227_10_fu_2924_p2;
wire   [0:0] and_ln227_10_fu_2930_p2;
wire   [31:0] bitcast_ln227_11_fu_2944_p1;
wire   [7:0] tmp_35_fu_2948_p4;
wire   [22:0] trunc_ln227_11_fu_2958_p1;
wire   [0:0] icmp_ln227_23_fu_2968_p2;
wire   [0:0] icmp_ln227_22_fu_2962_p2;
wire   [0:0] or_ln227_11_fu_2974_p2;
wire   [0:0] and_ln227_11_fu_2980_p2;
wire   [31:0] bitcast_ln227_12_fu_2994_p1;
wire   [7:0] tmp_37_fu_2997_p4;
wire   [22:0] trunc_ln227_12_fu_3007_p1;
wire   [0:0] icmp_ln227_25_fu_3017_p2;
wire   [0:0] icmp_ln227_24_fu_3011_p2;
wire   [0:0] or_ln227_12_fu_3023_p2;
wire   [0:0] and_ln227_12_fu_3029_p2;
reg    grp_fu_1560_ce;
reg    grp_fu_1564_ce;
reg    ap_block_pp0_stage1_11001;
reg    ap_block_pp0_stage2_11001;
reg    ap_block_pp0_stage3_11001;
reg    ap_block_pp0_stage4_11001;
wire    ap_block_pp0_stage5_00001_grp0;
wire    ap_block_pp0_stage6_00001_grp0;
wire    ap_block_pp0_stage7_00001_grp0;
wire    ap_block_pp0_stage8_00001_grp0;
wire    ap_block_pp0_stage9_00001_grp0;
wire    ap_block_pp0_stage10_00001_grp0;
wire    ap_block_pp0_stage11_00001_grp0;
wire    ap_block_pp0_stage12_00001_grp0;
wire    ap_block_pp0_stage0_00001_grp0;
wire    ap_block_pp0_stage1_00001_grp0;
wire    ap_block_pp0_stage2_00001_grp0;
wire    ap_block_pp0_stage3_00001_grp0;
wire    ap_block_pp0_stage4_00001_grp0;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [12:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [3:0] tmp_s_fu_1609_p1;
wire   [3:0] tmp_s_fu_1609_p3;
wire   [3:0] tmp_s_fu_1609_p5;
wire   [3:0] tmp_s_fu_1609_p7;
wire   [3:0] tmp_s_fu_1609_p9;
wire   [3:0] tmp_s_fu_1609_p11;
wire   [3:0] tmp_s_fu_1609_p13;
wire   [3:0] tmp_s_fu_1609_p15;
wire  signed [3:0] tmp_s_fu_1609_p17;
wire  signed [3:0] tmp_s_fu_1609_p19;
wire  signed [3:0] tmp_s_fu_1609_p21;
wire  signed [3:0] tmp_s_fu_1609_p23;
wire  signed [3:0] tmp_s_fu_1609_p25;
wire   [3:0] tmp_3_fu_1669_p1;
wire   [3:0] tmp_3_fu_1669_p3;
wire   [3:0] tmp_3_fu_1669_p5;
wire   [3:0] tmp_3_fu_1669_p7;
wire   [3:0] tmp_3_fu_1669_p9;
wire   [3:0] tmp_3_fu_1669_p11;
wire   [3:0] tmp_3_fu_1669_p13;
wire   [3:0] tmp_3_fu_1669_p15;
wire  signed [3:0] tmp_3_fu_1669_p17;
wire  signed [3:0] tmp_3_fu_1669_p19;
wire  signed [3:0] tmp_3_fu_1669_p21;
wire  signed [3:0] tmp_3_fu_1669_p23;
wire  signed [3:0] tmp_3_fu_1669_p25;
wire   [3:0] tmp_6_fu_1729_p1;
wire   [3:0] tmp_6_fu_1729_p3;
wire   [3:0] tmp_6_fu_1729_p5;
wire   [3:0] tmp_6_fu_1729_p7;
wire   [3:0] tmp_6_fu_1729_p9;
wire   [3:0] tmp_6_fu_1729_p11;
wire   [3:0] tmp_6_fu_1729_p13;
wire   [3:0] tmp_6_fu_1729_p15;
wire  signed [3:0] tmp_6_fu_1729_p17;
wire  signed [3:0] tmp_6_fu_1729_p19;
wire  signed [3:0] tmp_6_fu_1729_p21;
wire  signed [3:0] tmp_6_fu_1729_p23;
wire  signed [3:0] tmp_6_fu_1729_p25;
wire   [3:0] tmp_9_fu_1789_p1;
wire   [3:0] tmp_9_fu_1789_p3;
wire   [3:0] tmp_9_fu_1789_p5;
wire   [3:0] tmp_9_fu_1789_p7;
wire   [3:0] tmp_9_fu_1789_p9;
wire   [3:0] tmp_9_fu_1789_p11;
wire   [3:0] tmp_9_fu_1789_p13;
wire   [3:0] tmp_9_fu_1789_p15;
wire  signed [3:0] tmp_9_fu_1789_p17;
wire  signed [3:0] tmp_9_fu_1789_p19;
wire  signed [3:0] tmp_9_fu_1789_p21;
wire  signed [3:0] tmp_9_fu_1789_p23;
wire  signed [3:0] tmp_9_fu_1789_p25;
wire   [3:0] tmp_12_fu_1849_p1;
wire   [3:0] tmp_12_fu_1849_p3;
wire   [3:0] tmp_12_fu_1849_p5;
wire   [3:0] tmp_12_fu_1849_p7;
wire   [3:0] tmp_12_fu_1849_p9;
wire   [3:0] tmp_12_fu_1849_p11;
wire   [3:0] tmp_12_fu_1849_p13;
wire   [3:0] tmp_12_fu_1849_p15;
wire  signed [3:0] tmp_12_fu_1849_p17;
wire  signed [3:0] tmp_12_fu_1849_p19;
wire  signed [3:0] tmp_12_fu_1849_p21;
wire  signed [3:0] tmp_12_fu_1849_p23;
wire  signed [3:0] tmp_12_fu_1849_p25;
wire   [3:0] tmp_15_fu_1909_p1;
wire   [3:0] tmp_15_fu_1909_p3;
wire   [3:0] tmp_15_fu_1909_p5;
wire   [3:0] tmp_15_fu_1909_p7;
wire   [3:0] tmp_15_fu_1909_p9;
wire   [3:0] tmp_15_fu_1909_p11;
wire   [3:0] tmp_15_fu_1909_p13;
wire   [3:0] tmp_15_fu_1909_p15;
wire  signed [3:0] tmp_15_fu_1909_p17;
wire  signed [3:0] tmp_15_fu_1909_p19;
wire  signed [3:0] tmp_15_fu_1909_p21;
wire  signed [3:0] tmp_15_fu_1909_p23;
wire  signed [3:0] tmp_15_fu_1909_p25;
wire   [3:0] tmp_18_fu_1969_p1;
wire   [3:0] tmp_18_fu_1969_p3;
wire   [3:0] tmp_18_fu_1969_p5;
wire   [3:0] tmp_18_fu_1969_p7;
wire   [3:0] tmp_18_fu_1969_p9;
wire   [3:0] tmp_18_fu_1969_p11;
wire   [3:0] tmp_18_fu_1969_p13;
wire   [3:0] tmp_18_fu_1969_p15;
wire  signed [3:0] tmp_18_fu_1969_p17;
wire  signed [3:0] tmp_18_fu_1969_p19;
wire  signed [3:0] tmp_18_fu_1969_p21;
wire  signed [3:0] tmp_18_fu_1969_p23;
wire  signed [3:0] tmp_18_fu_1969_p25;
wire   [3:0] tmp_19_fu_2029_p1;
wire   [3:0] tmp_19_fu_2029_p3;
wire   [3:0] tmp_19_fu_2029_p5;
wire   [3:0] tmp_19_fu_2029_p7;
wire   [3:0] tmp_19_fu_2029_p9;
wire   [3:0] tmp_19_fu_2029_p11;
wire   [3:0] tmp_19_fu_2029_p13;
wire   [3:0] tmp_19_fu_2029_p15;
wire  signed [3:0] tmp_19_fu_2029_p17;
wire  signed [3:0] tmp_19_fu_2029_p19;
wire  signed [3:0] tmp_19_fu_2029_p21;
wire  signed [3:0] tmp_19_fu_2029_p23;
wire  signed [3:0] tmp_19_fu_2029_p25;
wire   [3:0] tmp_20_fu_2089_p1;
wire   [3:0] tmp_20_fu_2089_p3;
wire   [3:0] tmp_20_fu_2089_p5;
wire   [3:0] tmp_20_fu_2089_p7;
wire   [3:0] tmp_20_fu_2089_p9;
wire   [3:0] tmp_20_fu_2089_p11;
wire   [3:0] tmp_20_fu_2089_p13;
wire   [3:0] tmp_20_fu_2089_p15;
wire  signed [3:0] tmp_20_fu_2089_p17;
wire  signed [3:0] tmp_20_fu_2089_p19;
wire  signed [3:0] tmp_20_fu_2089_p21;
wire  signed [3:0] tmp_20_fu_2089_p23;
wire  signed [3:0] tmp_20_fu_2089_p25;
wire   [3:0] tmp_21_fu_2149_p1;
wire   [3:0] tmp_21_fu_2149_p3;
wire   [3:0] tmp_21_fu_2149_p5;
wire   [3:0] tmp_21_fu_2149_p7;
wire   [3:0] tmp_21_fu_2149_p9;
wire   [3:0] tmp_21_fu_2149_p11;
wire   [3:0] tmp_21_fu_2149_p13;
wire   [3:0] tmp_21_fu_2149_p15;
wire  signed [3:0] tmp_21_fu_2149_p17;
wire  signed [3:0] tmp_21_fu_2149_p19;
wire  signed [3:0] tmp_21_fu_2149_p21;
wire  signed [3:0] tmp_21_fu_2149_p23;
wire  signed [3:0] tmp_21_fu_2149_p25;
wire   [3:0] tmp_22_fu_2209_p1;
wire   [3:0] tmp_22_fu_2209_p3;
wire   [3:0] tmp_22_fu_2209_p5;
wire   [3:0] tmp_22_fu_2209_p7;
wire   [3:0] tmp_22_fu_2209_p9;
wire   [3:0] tmp_22_fu_2209_p11;
wire   [3:0] tmp_22_fu_2209_p13;
wire   [3:0] tmp_22_fu_2209_p15;
wire  signed [3:0] tmp_22_fu_2209_p17;
wire  signed [3:0] tmp_22_fu_2209_p19;
wire  signed [3:0] tmp_22_fu_2209_p21;
wire  signed [3:0] tmp_22_fu_2209_p23;
wire  signed [3:0] tmp_22_fu_2209_p25;
wire   [3:0] tmp_23_fu_2269_p1;
wire   [3:0] tmp_23_fu_2269_p3;
wire   [3:0] tmp_23_fu_2269_p5;
wire   [3:0] tmp_23_fu_2269_p7;
wire   [3:0] tmp_23_fu_2269_p9;
wire   [3:0] tmp_23_fu_2269_p11;
wire   [3:0] tmp_23_fu_2269_p13;
wire   [3:0] tmp_23_fu_2269_p15;
wire  signed [3:0] tmp_23_fu_2269_p17;
wire  signed [3:0] tmp_23_fu_2269_p19;
wire  signed [3:0] tmp_23_fu_2269_p21;
wire  signed [3:0] tmp_23_fu_2269_p23;
wire  signed [3:0] tmp_23_fu_2269_p25;
wire   [3:0] tmp_24_fu_2329_p1;
wire   [3:0] tmp_24_fu_2329_p3;
wire   [3:0] tmp_24_fu_2329_p5;
wire   [3:0] tmp_24_fu_2329_p7;
wire   [3:0] tmp_24_fu_2329_p9;
wire   [3:0] tmp_24_fu_2329_p11;
wire   [3:0] tmp_24_fu_2329_p13;
wire   [3:0] tmp_24_fu_2329_p15;
wire  signed [3:0] tmp_24_fu_2329_p17;
wire  signed [3:0] tmp_24_fu_2329_p19;
wire  signed [3:0] tmp_24_fu_2329_p21;
wire  signed [3:0] tmp_24_fu_2329_p23;
wire  signed [3:0] tmp_24_fu_2329_p25;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_block_pp0_stage4_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage6_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage8_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage10_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage12_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage1_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage5_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage7_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage9_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage11_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage0_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage2_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage3_subdone_grp0_done_reg = 1'b0;
#0 i_fu_426 = 4'd0;
#0 ap_done_reg = 1'b0;
end

(* dissolve_hierarchy = "yes" *) conv5_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U3830(
    .din0(p_reload539),
    .din1(p_reload526),
    .din2(p_reload513),
    .din3(p_reload500),
    .din4(p_reload487),
    .din5(p_reload474),
    .din6(p_reload461),
    .din7(p_reload448),
    .din8(p_reload435),
    .din9(p_reload422),
    .din10(p_reload409),
    .din11(p_reload396),
    .din12(p_reload383),
    .def(tmp_s_fu_1609_p27),
    .sel(ap_sig_allocacmp_i_2),
    .dout(tmp_s_fu_1609_p29)
);

(* dissolve_hierarchy = "yes" *) conv5_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U3831(
    .din0(p_reload538),
    .din1(p_reload525),
    .din2(p_reload512),
    .din3(p_reload499),
    .din4(p_reload486),
    .din5(p_reload473),
    .din6(p_reload460),
    .din7(p_reload447),
    .din8(p_reload434),
    .din9(p_reload421),
    .din10(p_reload408),
    .din11(p_reload395),
    .din12(p_reload382),
    .def(tmp_3_fu_1669_p27),
    .sel(ap_sig_allocacmp_i_2),
    .dout(tmp_3_fu_1669_p29)
);

(* dissolve_hierarchy = "yes" *) conv5_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U3832(
    .din0(p_reload537),
    .din1(p_reload524),
    .din2(p_reload511),
    .din3(p_reload498),
    .din4(p_reload485),
    .din5(p_reload472),
    .din6(p_reload459),
    .din7(p_reload446),
    .din8(p_reload433),
    .din9(p_reload420),
    .din10(p_reload407),
    .din11(p_reload394),
    .din12(p_reload381),
    .def(tmp_6_fu_1729_p27),
    .sel(ap_sig_allocacmp_i_2),
    .dout(tmp_6_fu_1729_p29)
);

(* dissolve_hierarchy = "yes" *) conv5_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U3833(
    .din0(p_reload536),
    .din1(p_reload523),
    .din2(p_reload510),
    .din3(p_reload497),
    .din4(p_reload484),
    .din5(p_reload471),
    .din6(p_reload458),
    .din7(p_reload445),
    .din8(p_reload432),
    .din9(p_reload419),
    .din10(p_reload406),
    .din11(p_reload393),
    .din12(p_reload380),
    .def(tmp_9_fu_1789_p27),
    .sel(ap_sig_allocacmp_i_2),
    .dout(tmp_9_fu_1789_p29)
);

(* dissolve_hierarchy = "yes" *) conv5_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U3834(
    .din0(p_reload535),
    .din1(p_reload522),
    .din2(p_reload509),
    .din3(p_reload496),
    .din4(p_reload483),
    .din5(p_reload470),
    .din6(p_reload457),
    .din7(p_reload444),
    .din8(p_reload431),
    .din9(p_reload418),
    .din10(p_reload405),
    .din11(p_reload392),
    .din12(p_reload379),
    .def(tmp_12_fu_1849_p27),
    .sel(ap_sig_allocacmp_i_2),
    .dout(tmp_12_fu_1849_p29)
);

(* dissolve_hierarchy = "yes" *) conv5_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U3835(
    .din0(p_reload534),
    .din1(p_reload521),
    .din2(p_reload508),
    .din3(p_reload495),
    .din4(p_reload482),
    .din5(p_reload469),
    .din6(p_reload456),
    .din7(p_reload443),
    .din8(p_reload430),
    .din9(p_reload417),
    .din10(p_reload404),
    .din11(p_reload391),
    .din12(p_reload378),
    .def(tmp_15_fu_1909_p27),
    .sel(ap_sig_allocacmp_i_2),
    .dout(tmp_15_fu_1909_p29)
);

(* dissolve_hierarchy = "yes" *) conv5_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U3836(
    .din0(p_reload533),
    .din1(p_reload520),
    .din2(p_reload507),
    .din3(p_reload494),
    .din4(p_reload481),
    .din5(p_reload468),
    .din6(p_reload455),
    .din7(p_reload442),
    .din8(p_reload429),
    .din9(p_reload416),
    .din10(p_reload403),
    .din11(p_reload390),
    .din12(p_reload377),
    .def(tmp_18_fu_1969_p27),
    .sel(ap_sig_allocacmp_i_2),
    .dout(tmp_18_fu_1969_p29)
);

(* dissolve_hierarchy = "yes" *) conv5_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U3837(
    .din0(p_reload532),
    .din1(p_reload519),
    .din2(p_reload506),
    .din3(p_reload493),
    .din4(p_reload480),
    .din5(p_reload467),
    .din6(p_reload454),
    .din7(p_reload441),
    .din8(p_reload428),
    .din9(p_reload415),
    .din10(p_reload402),
    .din11(p_reload389),
    .din12(p_reload376),
    .def(tmp_19_fu_2029_p27),
    .sel(ap_sig_allocacmp_i_2),
    .dout(tmp_19_fu_2029_p29)
);

(* dissolve_hierarchy = "yes" *) conv5_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U3838(
    .din0(p_reload531),
    .din1(p_reload518),
    .din2(p_reload505),
    .din3(p_reload492),
    .din4(p_reload479),
    .din5(p_reload466),
    .din6(p_reload453),
    .din7(p_reload440),
    .din8(p_reload427),
    .din9(p_reload414),
    .din10(p_reload401),
    .din11(p_reload388),
    .din12(p_reload375),
    .def(tmp_20_fu_2089_p27),
    .sel(ap_sig_allocacmp_i_2),
    .dout(tmp_20_fu_2089_p29)
);

(* dissolve_hierarchy = "yes" *) conv5_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U3839(
    .din0(p_reload530),
    .din1(p_reload517),
    .din2(p_reload504),
    .din3(p_reload491),
    .din4(p_reload478),
    .din5(p_reload465),
    .din6(p_reload452),
    .din7(p_reload439),
    .din8(p_reload426),
    .din9(p_reload413),
    .din10(p_reload400),
    .din11(p_reload387),
    .din12(p_reload374),
    .def(tmp_21_fu_2149_p27),
    .sel(ap_sig_allocacmp_i_2),
    .dout(tmp_21_fu_2149_p29)
);

(* dissolve_hierarchy = "yes" *) conv5_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U3840(
    .din0(p_reload529),
    .din1(p_reload516),
    .din2(p_reload503),
    .din3(p_reload490),
    .din4(p_reload477),
    .din5(p_reload464),
    .din6(p_reload451),
    .din7(p_reload438),
    .din8(p_reload425),
    .din9(p_reload412),
    .din10(p_reload399),
    .din11(p_reload386),
    .din12(p_reload373),
    .def(tmp_22_fu_2209_p27),
    .sel(ap_sig_allocacmp_i_2),
    .dout(tmp_22_fu_2209_p29)
);

(* dissolve_hierarchy = "yes" *) conv5_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U3841(
    .din0(p_reload528),
    .din1(p_reload515),
    .din2(p_reload502),
    .din3(p_reload489),
    .din4(p_reload476),
    .din5(p_reload463),
    .din6(p_reload450),
    .din7(p_reload437),
    .din8(p_reload424),
    .din9(p_reload411),
    .din10(p_reload398),
    .din11(p_reload385),
    .din12(p_reload372),
    .def(tmp_23_fu_2269_p27),
    .sel(ap_sig_allocacmp_i_2),
    .dout(tmp_23_fu_2269_p29)
);

(* dissolve_hierarchy = "yes" *) conv5_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U3842(
    .din0(p_reload527),
    .din1(p_reload514),
    .din2(p_reload501),
    .din3(p_reload488),
    .din4(p_reload475),
    .din5(p_reload462),
    .din6(p_reload449),
    .din7(p_reload436),
    .din8(p_reload423),
    .din9(p_reload410),
    .din10(p_reload397),
    .din11(p_reload384),
    .din12(p_reload),
    .def(tmp_24_fu_2329_p27),
    .sel(ap_sig_allocacmp_i_2),
    .dout(tmp_24_fu_2329_p29)
);

conv5_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage6),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage0_subdone_grp0)) begin
                ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage10_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage10)) begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_block_pp0_stage10_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage10_subdone_grp0)) begin
                ap_block_pp0_stage10_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage11_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage11)) begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_block_pp0_stage11_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage11_subdone_grp0)) begin
                ap_block_pp0_stage11_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage12_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage12)) begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_block_pp0_stage12_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage12_subdone_grp0)) begin
                ap_block_pp0_stage12_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone_grp0)) begin
                ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage2_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage2)) begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_block_pp0_stage2_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage2_subdone_grp0)) begin
                ap_block_pp0_stage2_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage3_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage3)) begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_block_pp0_stage3_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage3_subdone_grp0)) begin
                ap_block_pp0_stage3_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage4_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage4)) begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_block_pp0_stage4_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage4_subdone_grp0)) begin
                ap_block_pp0_stage4_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage5_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage5)) begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_block_pp0_stage5_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage5_subdone_grp0)) begin
                ap_block_pp0_stage5_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage6_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage6)) begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_block_pp0_stage6_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage6_subdone_grp0)) begin
                ap_block_pp0_stage6_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage7_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage7)) begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_block_pp0_stage7_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage7_subdone_grp0)) begin
                ap_block_pp0_stage7_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage8_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage8)) begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_block_pp0_stage8_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage8_subdone_grp0)) begin
                ap_block_pp0_stage8_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage9_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage9)) begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_block_pp0_stage9_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage9_subdone_grp0)) begin
                ap_block_pp0_stage9_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage6_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage6)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_subdone))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((icmp_ln220_fu_1591_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_426 <= add_ln220_fu_1597_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_426 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln220_reg_3055 <= icmp_ln220_fu_1591_p2;
        tmp_12_reg_3096 <= tmp_12_fu_1849_p29;
        tmp_15_reg_3101 <= tmp_15_fu_1909_p29;
        tmp_18_reg_3106 <= tmp_18_fu_1969_p29;
        tmp_19_reg_3111 <= tmp_19_fu_2029_p29;
        tmp_20_reg_3116 <= tmp_20_fu_2089_p29;
        tmp_21_reg_3121 <= tmp_21_fu_2149_p29;
        tmp_22_reg_3126 <= tmp_22_fu_2209_p29;
        tmp_23_reg_3131 <= tmp_23_fu_2269_p29;
        tmp_24_reg_3136 <= tmp_24_fu_2329_p29;
        tmp_3_reg_3081 <= tmp_3_fu_1669_p29;
        tmp_6_reg_3086 <= tmp_6_fu_1729_p29;
        tmp_9_reg_3091 <= tmp_9_fu_1789_p29;
        tmp_s_reg_3076 <= tmp_s_fu_1609_p29;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage3_11001_grp0))) begin
        out_12_reg_3191 <= grp_fu_22809_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage6_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage6_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage4_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage4_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage10_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage10_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage8_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage8_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage12_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage12_11001_grp0)))) begin
        reg_1569 <= grp_fu_22809_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage2_11001_grp0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage5_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage5_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage11_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage11_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage9_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage9_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage7_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage7_11001_grp0)))) begin
        reg_1574 <= grp_fu_22809_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage3_11001_grp0))) begin
        select_ln220_10_reg_3197 <= select_ln220_10_fu_2936_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage4_11001_grp0))) begin
        select_ln220_11_reg_3202 <= select_ln220_11_fu_2986_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage5_11001_grp0))) begin
        select_ln220_12_reg_3207 <= select_ln220_12_fu_3035_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage7_11001_grp0))) begin
        select_ln220_1_reg_3146 <= select_ln220_1_fu_2486_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage8_11001_grp0))) begin
        select_ln220_2_reg_3151 <= select_ln220_2_fu_2536_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage9_11001_grp0))) begin
        select_ln220_3_reg_3156 <= select_ln220_3_fu_2586_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage10_11001_grp0))) begin
        select_ln220_4_reg_3161 <= select_ln220_4_fu_2636_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage11_11001_grp0))) begin
        select_ln220_5_reg_3166 <= select_ln220_5_fu_2686_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage12_11001_grp0))) begin
        select_ln220_6_reg_3171 <= select_ln220_6_fu_2736_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0))) begin
        select_ln220_7_reg_3176 <= select_ln220_7_fu_2786_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0))) begin
        select_ln220_8_reg_3181 <= select_ln220_8_fu_2836_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage2_11001_grp0))) begin
        select_ln220_9_reg_3186 <= select_ln220_9_fu_2886_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage6_11001_grp0))) begin
        select_ln220_reg_3141 <= select_ln220_fu_2436_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage6) & (icmp_ln220_reg_3055 == 1'd1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage6_subdone))) begin
        ap_condition_exit_pp0_iter0_stage6 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage6_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage12_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_2 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_426;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_grp13)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_grp12)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_grp11)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_grp10)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_grp9)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_grp8)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_grp7)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (icmp_ln220_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage11_grp5)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (icmp_ln220_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage10_grp4)) 
    | ((1'b1 == ap_CS_fsm_pp0_stage9) & (icmp_ln220_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage9_grp3)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (icmp_ln220_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage8_grp2)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (icmp_ln220_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage7_grp1)) | ((1'b1 == ap_CS_fsm_pp0_stage12) & (icmp_ln220_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage12_grp6)))) begin
        gmem0_blk_n_W = m_axi_gmem0_0_WREADY;
    end else begin
        gmem0_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage6_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage5_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage4_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage3_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage2_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage11_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_subdone_grp0_done_reg) & (1'b0 == 
    ap_block_pp0_stage10_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage9_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage8_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage7_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage12_11001_grp0)))) begin
        grp_fu_1560_ce = 1'b1;
    end else begin
        grp_fu_1560_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_grp0))) begin
        grp_fu_1560_p0 = tmp_24_reg_3136;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage12_grp0))) begin
        grp_fu_1560_p0 = tmp_23_reg_3131;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage11_grp0))) begin
        grp_fu_1560_p0 = tmp_22_reg_3126;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage10_grp0))) begin
        grp_fu_1560_p0 = tmp_21_reg_3121;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage9_grp0))) begin
        grp_fu_1560_p0 = tmp_20_reg_3116;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage8_grp0))) begin
        grp_fu_1560_p0 = tmp_19_reg_3111;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage7_grp0))) begin
        grp_fu_1560_p0 = tmp_18_reg_3106;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage6_grp0))) begin
        grp_fu_1560_p0 = tmp_15_reg_3101;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage5_grp0))) begin
        grp_fu_1560_p0 = tmp_12_reg_3096;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage4_grp0))) begin
        grp_fu_1560_p0 = tmp_9_reg_3091;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage3_grp0))) begin
        grp_fu_1560_p0 = tmp_6_reg_3086;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_grp0))) begin
        grp_fu_1560_p0 = tmp_3_reg_3081;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_grp0))) begin
        grp_fu_1560_p0 = tmp_s_reg_3076;
    end else begin
        grp_fu_1560_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage6_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage5_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage4_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage3_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage2_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage11_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_subdone_grp0_done_reg) & (1'b0 == 
    ap_block_pp0_stage10_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage9_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage8_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage7_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage12_11001_grp0)))) begin
        grp_fu_1564_ce = 1'b1;
    end else begin
        grp_fu_1564_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_grp0))) begin
        grp_fu_1564_p0 = out_12_reg_3191;
    end else if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_grp0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage6_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage10_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage8_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage12_grp0)))) begin
        grp_fu_1564_p0 = reg_1574;
    end else if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_grp0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage5_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage11_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage9_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage7_grp0)))) begin
        grp_fu_1564_p0 = reg_1569;
    end else begin
        grp_fu_1564_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_01001_grp13))) begin
        m_axi_gmem0_0_WDATA = select_ln220_12_reg_3207;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_01001_grp12))) begin
        m_axi_gmem0_0_WDATA = select_ln220_11_reg_3202;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_01001_grp11))) begin
        m_axi_gmem0_0_WDATA = select_ln220_10_reg_3197;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_01001_grp10))) begin
        m_axi_gmem0_0_WDATA = select_ln220_9_reg_3186;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_01001_grp9))) begin
        m_axi_gmem0_0_WDATA = select_ln220_8_reg_3181;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_01001_grp8))) begin
        m_axi_gmem0_0_WDATA = select_ln220_7_reg_3176;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001_grp7))) begin
        m_axi_gmem0_0_WDATA = select_ln220_6_reg_3171;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage12) & (icmp_ln220_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage12_01001_grp6))) begin
        m_axi_gmem0_0_WDATA = select_ln220_5_reg_3166;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage11) & (icmp_ln220_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage11_01001_grp5))) begin
        m_axi_gmem0_0_WDATA = select_ln220_4_reg_3161;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage10) & (icmp_ln220_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage10_01001_grp4))) begin
        m_axi_gmem0_0_WDATA = select_ln220_3_reg_3156;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage9) & (icmp_ln220_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage9_01001_grp3))) begin
        m_axi_gmem0_0_WDATA = select_ln220_2_reg_3151;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage8) & (icmp_ln220_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage8_01001_grp2))) begin
        m_axi_gmem0_0_WDATA = select_ln220_1_reg_3146;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage7) & (icmp_ln220_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage7_01001_grp1))) begin
        m_axi_gmem0_0_WDATA = select_ln220_reg_3141;
    end else begin
        m_axi_gmem0_0_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001_grp13)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001_grp12)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001_grp11)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001_grp10)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001_grp9)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001_grp8)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_grp7)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (icmp_ln220_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage11_11001_grp5)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (icmp_ln220_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg 
    == 1'b1) & (1'b0 == ap_block_pp0_stage10_11001_grp4)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (icmp_ln220_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage9_11001_grp3)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (icmp_ln220_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage8_11001_grp2)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (icmp_ln220_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001_grp1)) | ((1'b1 == ap_CS_fsm_pp0_stage12) & (icmp_ln220_reg_3055 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage12_11001_grp6)))) begin
        m_axi_gmem0_0_WVALID = 1'b1;
    end else begin
        m_axi_gmem0_0_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage6)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln220_fu_1597_p2 = (ap_sig_allocacmp_i_2 + 4'd1);

assign and_ln227_10_fu_2930_p2 = (or_ln227_10_fu_2924_p2 & grp_fu_26821_p_dout0);

assign and_ln227_11_fu_2980_p2 = (or_ln227_11_fu_2974_p2 & grp_fu_26821_p_dout0);

assign and_ln227_12_fu_3029_p2 = (or_ln227_12_fu_3023_p2 & grp_fu_26821_p_dout0);

assign and_ln227_1_fu_2480_p2 = (or_ln227_1_fu_2474_p2 & grp_fu_26821_p_dout0);

assign and_ln227_2_fu_2530_p2 = (or_ln227_2_fu_2524_p2 & grp_fu_26821_p_dout0);

assign and_ln227_3_fu_2580_p2 = (or_ln227_3_fu_2574_p2 & grp_fu_26821_p_dout0);

assign and_ln227_4_fu_2630_p2 = (or_ln227_4_fu_2624_p2 & grp_fu_26821_p_dout0);

assign and_ln227_5_fu_2680_p2 = (or_ln227_5_fu_2674_p2 & grp_fu_26821_p_dout0);

assign and_ln227_6_fu_2730_p2 = (or_ln227_6_fu_2724_p2 & grp_fu_26821_p_dout0);

assign and_ln227_7_fu_2780_p2 = (or_ln227_7_fu_2774_p2 & grp_fu_26821_p_dout0);

assign and_ln227_8_fu_2830_p2 = (or_ln227_8_fu_2824_p2 & grp_fu_26821_p_dout0);

assign and_ln227_9_fu_2880_p2 = (or_ln227_9_fu_2874_p2 & grp_fu_26821_p_dout0);

assign and_ln227_fu_2430_p2 = (or_ln227_fu_2424_p2 & grp_fu_26821_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001_grp7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage0_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001_grp7 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage0_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_grp7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage0_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_01001_grp4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage10_11001_grp4 = ((1'b1 == ap_block_state11_io_grp4) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage10_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_grp4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage10_subdone = ((1'b1 == ap_block_state11_io_grp4) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage10_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_01001_grp5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage11_11001_grp5 = ((1'b1 == ap_block_state12_io_grp5) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage11_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_grp5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage11_subdone = ((1'b1 == ap_block_state12_io_grp5) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage11_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_01001_grp6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage12_11001_grp6 = ((1'b1 == ap_block_state13_io_grp6) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage12_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_grp6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage12_subdone = ((1'b1 == ap_block_state13_io_grp6) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage12_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001_grp8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage1_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001_grp8 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage1_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_grp8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage1_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_01001_grp9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage2_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001_grp9 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage2_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_grp9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage2_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_01001_grp10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage3_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001_grp10 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage3_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_grp10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage3_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_01001_grp11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage4_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001_grp11 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage4_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_grp11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage4_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_01001_grp12 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001_grp12 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage5_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_grp12 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_subdone = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage5_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_01001_grp13 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_11001_grp13 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage6_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_grp13 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_subdone = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage6_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_01001_grp1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_11001_grp1 = ((1'b1 == ap_block_state8_io_grp1) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage7_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_subdone = ((1'b1 == ap_block_state8_io_grp1) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage7_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_01001_grp2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage8_11001_grp2 = ((1'b1 == ap_block_state9_io_grp2) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage8_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_grp2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage8_subdone = ((1'b1 == ap_block_state9_io_grp2) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage8_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_00001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_01001_grp3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage9_11001_grp3 = ((1'b1 == ap_block_state10_io_grp3) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage9_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_grp3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage9_subdone = ((1'b1 == ap_block_state10_io_grp3) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage9_subdone_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state10_io_grp3 = ((m_axi_gmem0_0_WREADY == 1'b0) & (icmp_ln220_reg_3055 == 1'd0));
end

always @ (*) begin
    ap_block_state11_io_grp4 = ((m_axi_gmem0_0_WREADY == 1'b0) & (icmp_ln220_reg_3055 == 1'd0));
end

always @ (*) begin
    ap_block_state12_io_grp5 = ((m_axi_gmem0_0_WREADY == 1'b0) & (icmp_ln220_reg_3055 == 1'd0));
end

always @ (*) begin
    ap_block_state13_io_grp6 = ((m_axi_gmem0_0_WREADY == 1'b0) & (icmp_ln220_reg_3055 == 1'd0));
end

always @ (*) begin
    ap_block_state8_io_grp1 = ((m_axi_gmem0_0_WREADY == 1'b0) & (icmp_ln220_reg_3055 == 1'd0));
end

always @ (*) begin
    ap_block_state9_io_grp2 = ((m_axi_gmem0_0_WREADY == 1'b0) & (icmp_ln220_reg_3055 == 1'd0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage6;

assign ap_ready = ap_ready_sig;

assign bitcast_ln227_10_fu_2894_p1 = reg_1569;

assign bitcast_ln227_11_fu_2944_p1 = reg_1574;

assign bitcast_ln227_12_fu_2994_p1 = out_12_reg_3191;

assign bitcast_ln227_1_fu_2444_p1 = reg_1574;

assign bitcast_ln227_2_fu_2494_p1 = reg_1569;

assign bitcast_ln227_3_fu_2544_p1 = reg_1574;

assign bitcast_ln227_4_fu_2594_p1 = reg_1569;

assign bitcast_ln227_5_fu_2644_p1 = reg_1574;

assign bitcast_ln227_6_fu_2694_p1 = reg_1569;

assign bitcast_ln227_7_fu_2744_p1 = reg_1574;

assign bitcast_ln227_8_fu_2794_p1 = reg_1569;

assign bitcast_ln227_9_fu_2844_p1 = reg_1574;

assign bitcast_ln227_fu_2394_p1 = reg_1569;

assign grp_fu_22809_p_ce = grp_fu_1560_ce;

assign grp_fu_22809_p_din0 = grp_fu_1560_p0;

assign grp_fu_22809_p_din1 = empty;

assign grp_fu_22809_p_opcode = 2'd0;

assign grp_fu_26821_p_ce = grp_fu_1564_ce;

assign grp_fu_26821_p_din0 = grp_fu_1564_p0;

assign grp_fu_26821_p_din1 = 32'd0;

assign grp_fu_26821_p_opcode = 5'd2;

assign icmp_ln220_fu_1591_p2 = ((ap_sig_allocacmp_i_2 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln227_10_fu_2662_p2 = ((tmp_16_fu_2648_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln227_11_fu_2668_p2 = ((trunc_ln227_5_fu_2658_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln227_12_fu_2712_p2 = ((tmp_25_fu_2698_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln227_13_fu_2718_p2 = ((trunc_ln227_6_fu_2708_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln227_14_fu_2762_p2 = ((tmp_27_fu_2748_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln227_15_fu_2768_p2 = ((trunc_ln227_7_fu_2758_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln227_16_fu_2812_p2 = ((tmp_29_fu_2798_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln227_17_fu_2818_p2 = ((trunc_ln227_8_fu_2808_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln227_18_fu_2862_p2 = ((tmp_31_fu_2848_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln227_19_fu_2868_p2 = ((trunc_ln227_9_fu_2858_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln227_1_fu_2418_p2 = ((trunc_ln227_fu_2408_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln227_20_fu_2912_p2 = ((tmp_33_fu_2898_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln227_21_fu_2918_p2 = ((trunc_ln227_10_fu_2908_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln227_22_fu_2962_p2 = ((tmp_35_fu_2948_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln227_23_fu_2968_p2 = ((trunc_ln227_11_fu_2958_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln227_24_fu_3011_p2 = ((tmp_37_fu_2997_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln227_25_fu_3017_p2 = ((trunc_ln227_12_fu_3007_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln227_2_fu_2462_p2 = ((tmp_4_fu_2448_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln227_3_fu_2468_p2 = ((trunc_ln227_1_fu_2458_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln227_4_fu_2512_p2 = ((tmp_7_fu_2498_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln227_5_fu_2518_p2 = ((trunc_ln227_2_fu_2508_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln227_6_fu_2562_p2 = ((tmp_10_fu_2548_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln227_7_fu_2568_p2 = ((trunc_ln227_3_fu_2558_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln227_8_fu_2612_p2 = ((tmp_13_fu_2598_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln227_9_fu_2618_p2 = ((trunc_ln227_4_fu_2608_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln227_fu_2412_p2 = ((tmp_1_fu_2398_p4 != 8'd255) ? 1'b1 : 1'b0);

assign m_axi_gmem0_0_ARADDR = 64'd0;

assign m_axi_gmem0_0_ARBURST = 2'd0;

assign m_axi_gmem0_0_ARCACHE = 4'd0;

assign m_axi_gmem0_0_ARID = 1'd0;

assign m_axi_gmem0_0_ARLEN = 32'd0;

assign m_axi_gmem0_0_ARLOCK = 2'd0;

assign m_axi_gmem0_0_ARPROT = 3'd0;

assign m_axi_gmem0_0_ARQOS = 4'd0;

assign m_axi_gmem0_0_ARREGION = 4'd0;

assign m_axi_gmem0_0_ARSIZE = 3'd0;

assign m_axi_gmem0_0_ARUSER = 1'd0;

assign m_axi_gmem0_0_ARVALID = 1'b0;

assign m_axi_gmem0_0_AWADDR = 64'd0;

assign m_axi_gmem0_0_AWBURST = 2'd0;

assign m_axi_gmem0_0_AWCACHE = 4'd0;

assign m_axi_gmem0_0_AWID = 1'd0;

assign m_axi_gmem0_0_AWLEN = 32'd0;

assign m_axi_gmem0_0_AWLOCK = 2'd0;

assign m_axi_gmem0_0_AWPROT = 3'd0;

assign m_axi_gmem0_0_AWQOS = 4'd0;

assign m_axi_gmem0_0_AWREGION = 4'd0;

assign m_axi_gmem0_0_AWSIZE = 3'd0;

assign m_axi_gmem0_0_AWUSER = 1'd0;

assign m_axi_gmem0_0_AWVALID = 1'b0;

assign m_axi_gmem0_0_BREADY = 1'b0;

assign m_axi_gmem0_0_RREADY = 1'b0;

assign m_axi_gmem0_0_WID = 1'd0;

assign m_axi_gmem0_0_WLAST = 1'b0;

assign m_axi_gmem0_0_WSTRB = 4'd15;

assign m_axi_gmem0_0_WUSER = 1'd0;

assign or_ln227_10_fu_2924_p2 = (icmp_ln227_21_fu_2918_p2 | icmp_ln227_20_fu_2912_p2);

assign or_ln227_11_fu_2974_p2 = (icmp_ln227_23_fu_2968_p2 | icmp_ln227_22_fu_2962_p2);

assign or_ln227_12_fu_3023_p2 = (icmp_ln227_25_fu_3017_p2 | icmp_ln227_24_fu_3011_p2);

assign or_ln227_1_fu_2474_p2 = (icmp_ln227_3_fu_2468_p2 | icmp_ln227_2_fu_2462_p2);

assign or_ln227_2_fu_2524_p2 = (icmp_ln227_5_fu_2518_p2 | icmp_ln227_4_fu_2512_p2);

assign or_ln227_3_fu_2574_p2 = (icmp_ln227_7_fu_2568_p2 | icmp_ln227_6_fu_2562_p2);

assign or_ln227_4_fu_2624_p2 = (icmp_ln227_9_fu_2618_p2 | icmp_ln227_8_fu_2612_p2);

assign or_ln227_5_fu_2674_p2 = (icmp_ln227_11_fu_2668_p2 | icmp_ln227_10_fu_2662_p2);

assign or_ln227_6_fu_2724_p2 = (icmp_ln227_13_fu_2718_p2 | icmp_ln227_12_fu_2712_p2);

assign or_ln227_7_fu_2774_p2 = (icmp_ln227_15_fu_2768_p2 | icmp_ln227_14_fu_2762_p2);

assign or_ln227_8_fu_2824_p2 = (icmp_ln227_17_fu_2818_p2 | icmp_ln227_16_fu_2812_p2);

assign or_ln227_9_fu_2874_p2 = (icmp_ln227_19_fu_2868_p2 | icmp_ln227_18_fu_2862_p2);

assign or_ln227_fu_2424_p2 = (icmp_ln227_fu_2412_p2 | icmp_ln227_1_fu_2418_p2);

assign select_ln220_10_fu_2936_p3 = ((and_ln227_10_fu_2930_p2[0:0] == 1'b1) ? bitcast_ln227_10_fu_2894_p1 : 32'd0);

assign select_ln220_11_fu_2986_p3 = ((and_ln227_11_fu_2980_p2[0:0] == 1'b1) ? bitcast_ln227_11_fu_2944_p1 : 32'd0);

assign select_ln220_12_fu_3035_p3 = ((and_ln227_12_fu_3029_p2[0:0] == 1'b1) ? bitcast_ln227_12_fu_2994_p1 : 32'd0);

assign select_ln220_1_fu_2486_p3 = ((and_ln227_1_fu_2480_p2[0:0] == 1'b1) ? bitcast_ln227_1_fu_2444_p1 : 32'd0);

assign select_ln220_2_fu_2536_p3 = ((and_ln227_2_fu_2530_p2[0:0] == 1'b1) ? bitcast_ln227_2_fu_2494_p1 : 32'd0);

assign select_ln220_3_fu_2586_p3 = ((and_ln227_3_fu_2580_p2[0:0] == 1'b1) ? bitcast_ln227_3_fu_2544_p1 : 32'd0);

assign select_ln220_4_fu_2636_p3 = ((and_ln227_4_fu_2630_p2[0:0] == 1'b1) ? bitcast_ln227_4_fu_2594_p1 : 32'd0);

assign select_ln220_5_fu_2686_p3 = ((and_ln227_5_fu_2680_p2[0:0] == 1'b1) ? bitcast_ln227_5_fu_2644_p1 : 32'd0);

assign select_ln220_6_fu_2736_p3 = ((and_ln227_6_fu_2730_p2[0:0] == 1'b1) ? bitcast_ln227_6_fu_2694_p1 : 32'd0);

assign select_ln220_7_fu_2786_p3 = ((and_ln227_7_fu_2780_p2[0:0] == 1'b1) ? bitcast_ln227_7_fu_2744_p1 : 32'd0);

assign select_ln220_8_fu_2836_p3 = ((and_ln227_8_fu_2830_p2[0:0] == 1'b1) ? bitcast_ln227_8_fu_2794_p1 : 32'd0);

assign select_ln220_9_fu_2886_p3 = ((and_ln227_9_fu_2880_p2[0:0] == 1'b1) ? bitcast_ln227_9_fu_2844_p1 : 32'd0);

assign select_ln220_fu_2436_p3 = ((and_ln227_fu_2430_p2[0:0] == 1'b1) ? bitcast_ln227_fu_2394_p1 : 32'd0);

assign tmp_10_fu_2548_p4 = {{bitcast_ln227_3_fu_2544_p1[30:23]}};

assign tmp_12_fu_1849_p27 = 'bx;

assign tmp_13_fu_2598_p4 = {{bitcast_ln227_4_fu_2594_p1[30:23]}};

assign tmp_15_fu_1909_p27 = 'bx;

assign tmp_16_fu_2648_p4 = {{bitcast_ln227_5_fu_2644_p1[30:23]}};

assign tmp_18_fu_1969_p27 = 'bx;

assign tmp_19_fu_2029_p27 = 'bx;

assign tmp_1_fu_2398_p4 = {{bitcast_ln227_fu_2394_p1[30:23]}};

assign tmp_20_fu_2089_p27 = 'bx;

assign tmp_21_fu_2149_p27 = 'bx;

assign tmp_22_fu_2209_p27 = 'bx;

assign tmp_23_fu_2269_p27 = 'bx;

assign tmp_24_fu_2329_p27 = 'bx;

assign tmp_25_fu_2698_p4 = {{bitcast_ln227_6_fu_2694_p1[30:23]}};

assign tmp_27_fu_2748_p4 = {{bitcast_ln227_7_fu_2744_p1[30:23]}};

assign tmp_29_fu_2798_p4 = {{bitcast_ln227_8_fu_2794_p1[30:23]}};

assign tmp_31_fu_2848_p4 = {{bitcast_ln227_9_fu_2844_p1[30:23]}};

assign tmp_33_fu_2898_p4 = {{bitcast_ln227_10_fu_2894_p1[30:23]}};

assign tmp_35_fu_2948_p4 = {{bitcast_ln227_11_fu_2944_p1[30:23]}};

assign tmp_37_fu_2997_p4 = {{bitcast_ln227_12_fu_2994_p1[30:23]}};

assign tmp_3_fu_1669_p27 = 'bx;

assign tmp_4_fu_2448_p4 = {{bitcast_ln227_1_fu_2444_p1[30:23]}};

assign tmp_6_fu_1729_p27 = 'bx;

assign tmp_7_fu_2498_p4 = {{bitcast_ln227_2_fu_2494_p1[30:23]}};

assign tmp_9_fu_1789_p27 = 'bx;

assign tmp_s_fu_1609_p27 = 'bx;

assign trunc_ln227_10_fu_2908_p1 = bitcast_ln227_10_fu_2894_p1[22:0];

assign trunc_ln227_11_fu_2958_p1 = bitcast_ln227_11_fu_2944_p1[22:0];

assign trunc_ln227_12_fu_3007_p1 = bitcast_ln227_12_fu_2994_p1[22:0];

assign trunc_ln227_1_fu_2458_p1 = bitcast_ln227_1_fu_2444_p1[22:0];

assign trunc_ln227_2_fu_2508_p1 = bitcast_ln227_2_fu_2494_p1[22:0];

assign trunc_ln227_3_fu_2558_p1 = bitcast_ln227_3_fu_2544_p1[22:0];

assign trunc_ln227_4_fu_2608_p1 = bitcast_ln227_4_fu_2594_p1[22:0];

assign trunc_ln227_5_fu_2658_p1 = bitcast_ln227_5_fu_2644_p1[22:0];

assign trunc_ln227_6_fu_2708_p1 = bitcast_ln227_6_fu_2694_p1[22:0];

assign trunc_ln227_7_fu_2758_p1 = bitcast_ln227_7_fu_2744_p1[22:0];

assign trunc_ln227_8_fu_2808_p1 = bitcast_ln227_8_fu_2794_p1[22:0];

assign trunc_ln227_9_fu_2858_p1 = bitcast_ln227_9_fu_2844_p1[22:0];

assign trunc_ln227_fu_2408_p1 = bitcast_ln227_fu_2394_p1[22:0];

endmodule //conv5_conv5_Pipeline_M2
