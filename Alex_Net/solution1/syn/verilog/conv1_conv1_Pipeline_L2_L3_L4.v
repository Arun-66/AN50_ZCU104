// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module conv1_conv1_Pipeline_L2_L3_L4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_0_AWVALID,
        m_axi_gmem_0_AWREADY,
        m_axi_gmem_0_AWADDR,
        m_axi_gmem_0_AWID,
        m_axi_gmem_0_AWLEN,
        m_axi_gmem_0_AWSIZE,
        m_axi_gmem_0_AWBURST,
        m_axi_gmem_0_AWLOCK,
        m_axi_gmem_0_AWCACHE,
        m_axi_gmem_0_AWPROT,
        m_axi_gmem_0_AWQOS,
        m_axi_gmem_0_AWREGION,
        m_axi_gmem_0_AWUSER,
        m_axi_gmem_0_WVALID,
        m_axi_gmem_0_WREADY,
        m_axi_gmem_0_WDATA,
        m_axi_gmem_0_WSTRB,
        m_axi_gmem_0_WLAST,
        m_axi_gmem_0_WID,
        m_axi_gmem_0_WUSER,
        m_axi_gmem_0_ARVALID,
        m_axi_gmem_0_ARREADY,
        m_axi_gmem_0_ARADDR,
        m_axi_gmem_0_ARID,
        m_axi_gmem_0_ARLEN,
        m_axi_gmem_0_ARSIZE,
        m_axi_gmem_0_ARBURST,
        m_axi_gmem_0_ARLOCK,
        m_axi_gmem_0_ARCACHE,
        m_axi_gmem_0_ARPROT,
        m_axi_gmem_0_ARQOS,
        m_axi_gmem_0_ARREGION,
        m_axi_gmem_0_ARUSER,
        m_axi_gmem_0_RVALID,
        m_axi_gmem_0_RREADY,
        m_axi_gmem_0_RDATA,
        m_axi_gmem_0_RLAST,
        m_axi_gmem_0_RID,
        m_axi_gmem_0_RFIFONUM,
        m_axi_gmem_0_RUSER,
        m_axi_gmem_0_RRESP,
        m_axi_gmem_0_BVALID,
        m_axi_gmem_0_BREADY,
        m_axi_gmem_0_BRESP,
        m_axi_gmem_0_BID,
        m_axi_gmem_0_BUSER,
        line_buffer_3D_address0,
        line_buffer_3D_ce0,
        line_buffer_3D_we0,
        line_buffer_3D_d0,
        line_buffer_3D_1_address0,
        line_buffer_3D_1_ce0,
        line_buffer_3D_1_we0,
        line_buffer_3D_1_d0,
        line_buffer_3D_2_address0,
        line_buffer_3D_2_ce0,
        line_buffer_3D_2_we0,
        line_buffer_3D_2_d0,
        line_buffer_3D_3_address0,
        line_buffer_3D_3_ce0,
        line_buffer_3D_3_we0,
        line_buffer_3D_3_d0,
        line_buffer_3D_4_address0,
        line_buffer_3D_4_ce0,
        line_buffer_3D_4_we0,
        line_buffer_3D_4_d0,
        line_buffer_3D_5_address0,
        line_buffer_3D_5_ce0,
        line_buffer_3D_5_we0,
        line_buffer_3D_5_d0,
        line_buffer_3D_6_address0,
        line_buffer_3D_6_ce0,
        line_buffer_3D_6_we0,
        line_buffer_3D_6_d0,
        inp_img
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_0_AWVALID;
input   m_axi_gmem_0_AWREADY;
output  [63:0] m_axi_gmem_0_AWADDR;
output  [0:0] m_axi_gmem_0_AWID;
output  [31:0] m_axi_gmem_0_AWLEN;
output  [2:0] m_axi_gmem_0_AWSIZE;
output  [1:0] m_axi_gmem_0_AWBURST;
output  [1:0] m_axi_gmem_0_AWLOCK;
output  [3:0] m_axi_gmem_0_AWCACHE;
output  [2:0] m_axi_gmem_0_AWPROT;
output  [3:0] m_axi_gmem_0_AWQOS;
output  [3:0] m_axi_gmem_0_AWREGION;
output  [0:0] m_axi_gmem_0_AWUSER;
output   m_axi_gmem_0_WVALID;
input   m_axi_gmem_0_WREADY;
output  [31:0] m_axi_gmem_0_WDATA;
output  [3:0] m_axi_gmem_0_WSTRB;
output   m_axi_gmem_0_WLAST;
output  [0:0] m_axi_gmem_0_WID;
output  [0:0] m_axi_gmem_0_WUSER;
output   m_axi_gmem_0_ARVALID;
input   m_axi_gmem_0_ARREADY;
output  [63:0] m_axi_gmem_0_ARADDR;
output  [0:0] m_axi_gmem_0_ARID;
output  [31:0] m_axi_gmem_0_ARLEN;
output  [2:0] m_axi_gmem_0_ARSIZE;
output  [1:0] m_axi_gmem_0_ARBURST;
output  [1:0] m_axi_gmem_0_ARLOCK;
output  [3:0] m_axi_gmem_0_ARCACHE;
output  [2:0] m_axi_gmem_0_ARPROT;
output  [3:0] m_axi_gmem_0_ARQOS;
output  [3:0] m_axi_gmem_0_ARREGION;
output  [0:0] m_axi_gmem_0_ARUSER;
input   m_axi_gmem_0_RVALID;
output   m_axi_gmem_0_RREADY;
input  [31:0] m_axi_gmem_0_RDATA;
input   m_axi_gmem_0_RLAST;
input  [0:0] m_axi_gmem_0_RID;
input  [8:0] m_axi_gmem_0_RFIFONUM;
input  [0:0] m_axi_gmem_0_RUSER;
input  [1:0] m_axi_gmem_0_RRESP;
input   m_axi_gmem_0_BVALID;
output   m_axi_gmem_0_BREADY;
input  [1:0] m_axi_gmem_0_BRESP;
input  [0:0] m_axi_gmem_0_BID;
input  [0:0] m_axi_gmem_0_BUSER;
output  [9:0] line_buffer_3D_address0;
output   line_buffer_3D_ce0;
output   line_buffer_3D_we0;
output  [31:0] line_buffer_3D_d0;
output  [9:0] line_buffer_3D_1_address0;
output   line_buffer_3D_1_ce0;
output   line_buffer_3D_1_we0;
output  [31:0] line_buffer_3D_1_d0;
output  [9:0] line_buffer_3D_2_address0;
output   line_buffer_3D_2_ce0;
output   line_buffer_3D_2_we0;
output  [31:0] line_buffer_3D_2_d0;
output  [9:0] line_buffer_3D_3_address0;
output   line_buffer_3D_3_ce0;
output   line_buffer_3D_3_we0;
output  [31:0] line_buffer_3D_3_d0;
output  [9:0] line_buffer_3D_4_address0;
output   line_buffer_3D_4_ce0;
output   line_buffer_3D_4_we0;
output  [31:0] line_buffer_3D_4_d0;
output  [9:0] line_buffer_3D_5_address0;
output   line_buffer_3D_5_ce0;
output   line_buffer_3D_5_we0;
output  [31:0] line_buffer_3D_5_d0;
output  [9:0] line_buffer_3D_6_address0;
output   line_buffer_3D_6_ce0;
output   line_buffer_3D_6_we0;
output  [31:0] line_buffer_3D_6_d0;
input  [63:0] inp_img;

reg ap_idle;
reg m_axi_gmem_0_ARVALID;
reg m_axi_gmem_0_RREADY;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_idle_pp0;
reg   [0:0] first_iter_0_reg_564;
reg   [0:0] first_iter_1_mid2_reg_556;
reg    ap_predicate_op73_readreq_state3;
reg    ap_block_state3_io_grp1;
reg    ap_block_pp0_stage0_subdone_grp1_done_reg;
reg    ap_block_pp0_stage0_subdone_grp1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_subdone_grp2_done_reg;
reg    ap_block_pp0_stage0_subdone_grp2;
wire   [0:0] icmp_ln91_fu_268_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_R;
wire    ap_block_pp0_stage0_grp2;
reg    gmem_blk_n_AR;
wire    ap_block_pp0_stage0_grp1;
reg    ap_block_pp0_stage0_11001;
wire   [1:0] select_ln91_1_fu_339_p3;
reg   [1:0] select_ln91_1_reg_546;
reg   [1:0] select_ln91_1_reg_546_pp0_iter2_reg;
reg   [1:0] select_ln91_1_reg_546_pp0_iter3_reg;
reg   [1:0] select_ln91_1_reg_546_pp0_iter4_reg;
reg   [1:0] select_ln91_1_reg_546_pp0_iter5_reg;
reg   [1:0] select_ln91_1_reg_546_pp0_iter6_reg;
reg   [1:0] select_ln91_1_reg_546_pp0_iter7_reg;
wire   [7:0] j_mid2_fu_359_p3;
reg   [7:0] j_mid2_reg_551;
reg   [7:0] j_mid2_reg_551_pp0_iter2_reg;
reg   [7:0] j_mid2_reg_551_pp0_iter3_reg;
reg   [7:0] j_mid2_reg_551_pp0_iter4_reg;
reg   [7:0] j_mid2_reg_551_pp0_iter5_reg;
reg   [7:0] j_mid2_reg_551_pp0_iter6_reg;
reg   [7:0] j_mid2_reg_551_pp0_iter7_reg;
reg   [7:0] j_mid2_reg_551_pp0_iter8_reg;
reg   [7:0] j_mid2_reg_551_pp0_iter9_reg;
wire   [0:0] first_iter_1_mid2_fu_367_p3;
wire   [3:0] select_ln93_fu_375_p3;
reg   [3:0] select_ln93_reg_560;
reg   [3:0] select_ln93_reg_560_pp0_iter2_reg;
reg   [3:0] select_ln93_reg_560_pp0_iter3_reg;
reg   [3:0] select_ln93_reg_560_pp0_iter4_reg;
reg   [3:0] select_ln93_reg_560_pp0_iter5_reg;
reg   [3:0] select_ln93_reg_560_pp0_iter6_reg;
reg   [3:0] select_ln93_reg_560_pp0_iter7_reg;
reg   [3:0] select_ln93_reg_560_pp0_iter8_reg;
reg   [3:0] select_ln93_reg_560_pp0_iter9_reg;
reg   [3:0] select_ln93_reg_560_pp0_iter10_reg;
wire   [0:0] first_iter_0_fu_383_p2;
reg   [63:0] gmem_addr_reg_568;
wire    ap_block_pp0_stage0_11001_grp0;
reg    ap_block_pp0_stage0_subdone_grp0_done_reg;
wire    ap_block_pp0_stage0_subdone_grp0;
wire   [31:0] bitcast_ln98_fu_479_p1;
reg   [31:0] bitcast_ln98_reg_584;
reg    ap_block_pp0_stage0_11001_grp2;
wire   [63:0] zext_ln98_2_fu_483_p1;
wire    ap_block_pp0_stage0_grp0;
wire  signed [63:0] sext_ln93_fu_418_p1;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001_grp1;
reg   [7:0] j_fu_108;
wire   [7:0] add_ln95_fu_428_p2;
wire    ap_loop_init;
reg   [3:0] i_fu_112;
reg   [10:0] indvar_flatten_fu_116;
wire   [10:0] select_ln93_1_fu_440_p3;
reg   [1:0] c_fu_120;
reg   [12:0] indvar_flatten20_fu_124;
wire   [12:0] add_ln91_2_fu_274_p2;
reg    line_buffer_3D_5_we0_local;
reg    line_buffer_3D_5_ce0_local;
reg    line_buffer_3D_4_we0_local;
reg    line_buffer_3D_4_ce0_local;
reg    line_buffer_3D_3_we0_local;
reg    line_buffer_3D_3_ce0_local;
reg    line_buffer_3D_2_we0_local;
reg    line_buffer_3D_2_ce0_local;
reg    line_buffer_3D_1_we0_local;
reg    line_buffer_3D_1_ce0_local;
reg    line_buffer_3D_we0_local;
reg    line_buffer_3D_ce0_local;
reg    line_buffer_3D_6_we0_local;
reg    line_buffer_3D_6_ce0_local;
wire   [0:0] icmp_ln93_fu_295_p2;
wire   [0:0] first_iter_129_fu_309_p2;
wire   [0:0] icmp_ln95_fu_327_p2;
wire   [0:0] xor_ln91_fu_321_p2;
wire   [1:0] add_ln91_1_fu_289_p2;
wire   [3:0] select_ln91_fu_301_p3;
wire   [0:0] and_ln91_fu_333_p2;
wire   [0:0] empty_37_fu_353_p2;
wire   [0:0] or_ln91_fu_315_p2;
wire   [3:0] add_ln93_fu_347_p2;
wire   [1:0] mul_ln91_fu_393_p0;
wire   [18:0] mul_ln91_fu_393_p1;
wire   [19:0] mul_ln91_fu_393_p2;
wire   [63:0] zext_ln91_1_fu_399_p1;
wire   [63:0] add_ln91_fu_403_p2;
wire   [61:0] trunc_ln_fu_408_p4;
wire   [10:0] add_ln93_1_fu_434_p2;
wire   [9:0] grp_fu_493_p3;
wire   [7:0] grp_fu_493_p0;
wire   [1:0] grp_fu_493_p1;
wire   [7:0] grp_fu_493_p2;
reg    grp_fu_493_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [9:0] grp_fu_493_p10;
wire   [9:0] grp_fu_493_p20;
wire   [19:0] mul_ln91_fu_393_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_block_pp0_stage0_subdone_grp1_done_reg = 1'b0;
#0 ap_block_pp0_stage0_subdone_grp2_done_reg = 1'b0;
#0 ap_block_pp0_stage0_subdone_grp0_done_reg = 1'b0;
#0 j_fu_108 = 8'd0;
#0 i_fu_112 = 4'd0;
#0 indvar_flatten_fu_116 = 11'd0;
#0 c_fu_120 = 2'd0;
#0 indvar_flatten20_fu_124 = 13'd0;
#0 ap_done_reg = 1'b0;
end

conv1_mul_2ns_19ns_20_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 2 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 20 ))
mul_2ns_19ns_20_1_1_U1(
    .din0(mul_ln91_fu_393_p0),
    .din1(mul_ln91_fu_393_p1),
    .dout(mul_ln91_fu_393_p2)
);

conv1_mac_muladd_8ns_2ns_8ns_10_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 2 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 10 ))
mac_muladd_8ns_2ns_8ns_10_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_493_p0),
    .din1(grp_fu_493_p1),
    .din2(grp_fu_493_p2),
    .ce(grp_fu_493_ce),
    .dout(grp_fu_493_p3)
);

conv1_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone_grp0)) begin
            ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage0_subdone_grp1_done_reg <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_block_pp0_stage0_subdone_grp1_done_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone_grp1)) begin
            ap_block_pp0_stage0_subdone_grp1_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage0_subdone_grp2_done_reg <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_block_pp0_stage0_subdone_grp2_done_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone_grp2)) begin
            ap_block_pp0_stage0_subdone_grp2_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter10_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            c_fu_120 <= 2'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln91_fu_268_p2 == 1'd0))) begin
            c_fu_120 <= select_ln91_1_fu_339_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_112 <= 4'd4;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln91_fu_268_p2 == 1'd0))) begin
            i_fu_112 <= select_ln93_fu_375_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten20_fu_124 <= 13'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln91_fu_268_p2 == 1'd0))) begin
            indvar_flatten20_fu_124 <= add_ln91_2_fu_274_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_116 <= 11'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln91_fu_268_p2 == 1'd0))) begin
            indvar_flatten_fu_116 <= select_ln93_1_fu_440_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_108 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln91_fu_268_p2 == 1'd0))) begin
            j_fu_108 <= add_ln95_fu_428_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        j_mid2_reg_551_pp0_iter2_reg <= j_mid2_reg_551;
        j_mid2_reg_551_pp0_iter3_reg <= j_mid2_reg_551_pp0_iter2_reg;
        j_mid2_reg_551_pp0_iter4_reg <= j_mid2_reg_551_pp0_iter3_reg;
        j_mid2_reg_551_pp0_iter5_reg <= j_mid2_reg_551_pp0_iter4_reg;
        j_mid2_reg_551_pp0_iter6_reg <= j_mid2_reg_551_pp0_iter5_reg;
        j_mid2_reg_551_pp0_iter7_reg <= j_mid2_reg_551_pp0_iter6_reg;
        j_mid2_reg_551_pp0_iter8_reg <= j_mid2_reg_551_pp0_iter7_reg;
        j_mid2_reg_551_pp0_iter9_reg <= j_mid2_reg_551_pp0_iter8_reg;
        select_ln91_1_reg_546_pp0_iter2_reg <= select_ln91_1_reg_546;
        select_ln91_1_reg_546_pp0_iter3_reg <= select_ln91_1_reg_546_pp0_iter2_reg;
        select_ln91_1_reg_546_pp0_iter4_reg <= select_ln91_1_reg_546_pp0_iter3_reg;
        select_ln91_1_reg_546_pp0_iter5_reg <= select_ln91_1_reg_546_pp0_iter4_reg;
        select_ln91_1_reg_546_pp0_iter6_reg <= select_ln91_1_reg_546_pp0_iter5_reg;
        select_ln91_1_reg_546_pp0_iter7_reg <= select_ln91_1_reg_546_pp0_iter6_reg;
        select_ln93_reg_560_pp0_iter10_reg <= select_ln93_reg_560_pp0_iter9_reg;
        select_ln93_reg_560_pp0_iter2_reg <= select_ln93_reg_560;
        select_ln93_reg_560_pp0_iter3_reg <= select_ln93_reg_560_pp0_iter2_reg;
        select_ln93_reg_560_pp0_iter4_reg <= select_ln93_reg_560_pp0_iter3_reg;
        select_ln93_reg_560_pp0_iter5_reg <= select_ln93_reg_560_pp0_iter4_reg;
        select_ln93_reg_560_pp0_iter6_reg <= select_ln93_reg_560_pp0_iter5_reg;
        select_ln93_reg_560_pp0_iter7_reg <= select_ln93_reg_560_pp0_iter6_reg;
        select_ln93_reg_560_pp0_iter8_reg <= select_ln93_reg_560_pp0_iter7_reg;
        select_ln93_reg_560_pp0_iter9_reg <= select_ln93_reg_560_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        first_iter_0_reg_564 <= first_iter_0_fu_383_p2;
        first_iter_1_mid2_reg_556 <= first_iter_1_mid2_fu_367_p3;
        gmem_addr_reg_568 <= sext_ln93_fu_418_p1;
        j_mid2_reg_551 <= j_mid2_fu_359_p3;
        select_ln91_1_reg_546 <= select_ln91_1_fu_339_p3;
        select_ln93_reg_560 <= select_ln93_fu_375_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp2) & (1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg))) begin
        bitcast_ln98_reg_584 <= bitcast_ln98_fu_479_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln91_fu_268_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter10_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_grp1) & (1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (ap_predicate_op73_readreq_state3 == 1'b1))) begin
        gmem_blk_n_AR = m_axi_gmem_0_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_grp2) & (1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg))) begin
        gmem_blk_n_R = m_axi_gmem_0_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0))) begin
        grp_fu_493_ce = 1'b1;
    end else begin
        grp_fu_493_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0))) begin
        line_buffer_3D_1_ce0_local = 1'b1;
    end else begin
        line_buffer_3D_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (select_ln93_reg_560_pp0_iter10_reg == 4'd5) & (1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0))) begin
        line_buffer_3D_1_we0_local = 1'b1;
    end else begin
        line_buffer_3D_1_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0))) begin
        line_buffer_3D_2_ce0_local = 1'b1;
    end else begin
        line_buffer_3D_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (select_ln93_reg_560_pp0_iter10_reg == 4'd6) & (1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0))) begin
        line_buffer_3D_2_we0_local = 1'b1;
    end else begin
        line_buffer_3D_2_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0))) begin
        line_buffer_3D_3_ce0_local = 1'b1;
    end else begin
        line_buffer_3D_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (select_ln93_reg_560_pp0_iter10_reg == 4'd7) & (1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0))) begin
        line_buffer_3D_3_we0_local = 1'b1;
    end else begin
        line_buffer_3D_3_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0))) begin
        line_buffer_3D_4_ce0_local = 1'b1;
    end else begin
        line_buffer_3D_4_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (select_ln93_reg_560_pp0_iter10_reg == 4'd8) & (1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0))) begin
        line_buffer_3D_4_we0_local = 1'b1;
    end else begin
        line_buffer_3D_4_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0))) begin
        line_buffer_3D_5_ce0_local = 1'b1;
    end else begin
        line_buffer_3D_5_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (select_ln93_reg_560_pp0_iter10_reg == 4'd9) & (1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0))) begin
        line_buffer_3D_5_we0_local = 1'b1;
    end else begin
        line_buffer_3D_5_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0))) begin
        line_buffer_3D_6_ce0_local = 1'b1;
    end else begin
        line_buffer_3D_6_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~(select_ln93_reg_560_pp0_iter10_reg == 4'd4) & ~(select_ln93_reg_560_pp0_iter10_reg == 4'd5) & ~(select_ln93_reg_560_pp0_iter10_reg == 4'd6) & ~(select_ln93_reg_560_pp0_iter10_reg == 4'd7) & ~(select_ln93_reg_560_pp0_iter10_reg == 4'd8) & ~(select_ln93_reg_560_pp0_iter10_reg == 4'd9) & (ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0))) begin
        line_buffer_3D_6_we0_local = 1'b1;
    end else begin
        line_buffer_3D_6_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0))) begin
        line_buffer_3D_ce0_local = 1'b1;
    end else begin
        line_buffer_3D_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (select_ln93_reg_560_pp0_iter10_reg == 4'd4) & (1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0))) begin
        line_buffer_3D_we0_local = 1'b1;
    end else begin
        line_buffer_3D_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (ap_predicate_op73_readreq_state3 == 1'b1))) begin
        m_axi_gmem_0_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp2) & (1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg))) begin
        m_axi_gmem_0_RREADY = 1'b1;
    end else begin
        m_axi_gmem_0_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln91_1_fu_289_p2 = (c_fu_120 + 2'd1);

assign add_ln91_2_fu_274_p2 = (indvar_flatten20_fu_124 + 13'd1);

assign add_ln91_fu_403_p2 = (zext_ln91_1_fu_399_p1 + inp_img);

assign add_ln93_1_fu_434_p2 = (indvar_flatten_fu_116 + 11'd1);

assign add_ln93_fu_347_p2 = (select_ln91_fu_301_p3 + 4'd1);

assign add_ln95_fu_428_p2 = (j_mid2_fu_359_p3 + 8'd1);

assign and_ln91_fu_333_p2 = (xor_ln91_fu_321_p2 & icmp_ln95_fu_327_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((m_axi_gmem_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_io_grp1) & (1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg)));
end

assign ap_block_pp0_stage0_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_io_grp1) & (1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp2 = ((m_axi_gmem_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg));
end

assign ap_block_pp0_stage0_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_grp2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((m_axi_gmem_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_io_grp1) & (1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg)));
end

assign ap_block_pp0_stage0_subdone_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone_grp1 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_io_grp1) & (1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone_grp2 = ((m_axi_gmem_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg));
end

always @ (*) begin
    ap_block_state3_io_grp1 = ((m_axi_gmem_0_ARREADY == 1'b0) & (ap_predicate_op73_readreq_state3 == 1'b1));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

always @ (*) begin
    ap_predicate_op73_readreq_state3 = ((first_iter_1_mid2_reg_556 == 1'd1) & (first_iter_0_reg_564 == 1'd1));
end

assign ap_ready = ap_ready_sig;

assign bitcast_ln98_fu_479_p1 = m_axi_gmem_0_RDATA;

assign empty_37_fu_353_p2 = (icmp_ln93_fu_295_p2 | and_ln91_fu_333_p2);

assign first_iter_0_fu_383_p2 = ((j_mid2_fu_359_p3 == 8'd0) ? 1'b1 : 1'b0);

assign first_iter_129_fu_309_p2 = ((i_fu_112 == 4'd4) ? 1'b1 : 1'b0);

assign first_iter_1_mid2_fu_367_p3 = ((and_ln91_fu_333_p2[0:0] == 1'b1) ? 1'd0 : or_ln91_fu_315_p2);

assign grp_fu_493_p0 = 10'd227;

assign grp_fu_493_p1 = grp_fu_493_p10;

assign grp_fu_493_p10 = select_ln91_1_reg_546_pp0_iter7_reg;

assign grp_fu_493_p2 = grp_fu_493_p20;

assign grp_fu_493_p20 = j_mid2_reg_551_pp0_iter9_reg;

assign icmp_ln91_fu_268_p2 = ((indvar_flatten20_fu_124 == 13'd4767) ? 1'b1 : 1'b0);

assign icmp_ln93_fu_295_p2 = ((indvar_flatten_fu_116 == 11'd1589) ? 1'b1 : 1'b0);

assign icmp_ln95_fu_327_p2 = ((j_fu_108 == 8'd227) ? 1'b1 : 1'b0);

assign j_mid2_fu_359_p3 = ((empty_37_fu_353_p2[0:0] == 1'b1) ? 8'd0 : j_fu_108);

assign line_buffer_3D_1_address0 = zext_ln98_2_fu_483_p1;

assign line_buffer_3D_1_ce0 = line_buffer_3D_1_ce0_local;

assign line_buffer_3D_1_d0 = bitcast_ln98_reg_584;

assign line_buffer_3D_1_we0 = line_buffer_3D_1_we0_local;

assign line_buffer_3D_2_address0 = zext_ln98_2_fu_483_p1;

assign line_buffer_3D_2_ce0 = line_buffer_3D_2_ce0_local;

assign line_buffer_3D_2_d0 = bitcast_ln98_reg_584;

assign line_buffer_3D_2_we0 = line_buffer_3D_2_we0_local;

assign line_buffer_3D_3_address0 = zext_ln98_2_fu_483_p1;

assign line_buffer_3D_3_ce0 = line_buffer_3D_3_ce0_local;

assign line_buffer_3D_3_d0 = bitcast_ln98_reg_584;

assign line_buffer_3D_3_we0 = line_buffer_3D_3_we0_local;

assign line_buffer_3D_4_address0 = zext_ln98_2_fu_483_p1;

assign line_buffer_3D_4_ce0 = line_buffer_3D_4_ce0_local;

assign line_buffer_3D_4_d0 = bitcast_ln98_reg_584;

assign line_buffer_3D_4_we0 = line_buffer_3D_4_we0_local;

assign line_buffer_3D_5_address0 = zext_ln98_2_fu_483_p1;

assign line_buffer_3D_5_ce0 = line_buffer_3D_5_ce0_local;

assign line_buffer_3D_5_d0 = bitcast_ln98_reg_584;

assign line_buffer_3D_5_we0 = line_buffer_3D_5_we0_local;

assign line_buffer_3D_6_address0 = zext_ln98_2_fu_483_p1;

assign line_buffer_3D_6_ce0 = line_buffer_3D_6_ce0_local;

assign line_buffer_3D_6_d0 = bitcast_ln98_reg_584;

assign line_buffer_3D_6_we0 = line_buffer_3D_6_we0_local;

assign line_buffer_3D_address0 = zext_ln98_2_fu_483_p1;

assign line_buffer_3D_ce0 = line_buffer_3D_ce0_local;

assign line_buffer_3D_d0 = bitcast_ln98_reg_584;

assign line_buffer_3D_we0 = line_buffer_3D_we0_local;

assign m_axi_gmem_0_ARADDR = gmem_addr_reg_568;

assign m_axi_gmem_0_ARBURST = 2'd0;

assign m_axi_gmem_0_ARCACHE = 4'd0;

assign m_axi_gmem_0_ARID = 1'd0;

assign m_axi_gmem_0_ARLEN = 64'd1589;

assign m_axi_gmem_0_ARLOCK = 2'd0;

assign m_axi_gmem_0_ARPROT = 3'd0;

assign m_axi_gmem_0_ARQOS = 4'd0;

assign m_axi_gmem_0_ARREGION = 4'd0;

assign m_axi_gmem_0_ARSIZE = 3'd0;

assign m_axi_gmem_0_ARUSER = 1'd0;

assign m_axi_gmem_0_AWADDR = 64'd0;

assign m_axi_gmem_0_AWBURST = 2'd0;

assign m_axi_gmem_0_AWCACHE = 4'd0;

assign m_axi_gmem_0_AWID = 1'd0;

assign m_axi_gmem_0_AWLEN = 32'd0;

assign m_axi_gmem_0_AWLOCK = 2'd0;

assign m_axi_gmem_0_AWPROT = 3'd0;

assign m_axi_gmem_0_AWQOS = 4'd0;

assign m_axi_gmem_0_AWREGION = 4'd0;

assign m_axi_gmem_0_AWSIZE = 3'd0;

assign m_axi_gmem_0_AWUSER = 1'd0;

assign m_axi_gmem_0_AWVALID = 1'b0;

assign m_axi_gmem_0_BREADY = 1'b0;

assign m_axi_gmem_0_WDATA = 32'd0;

assign m_axi_gmem_0_WID = 1'd0;

assign m_axi_gmem_0_WLAST = 1'b0;

assign m_axi_gmem_0_WSTRB = 4'd0;

assign m_axi_gmem_0_WUSER = 1'd0;

assign m_axi_gmem_0_WVALID = 1'b0;

assign mul_ln91_fu_393_p0 = mul_ln91_fu_393_p00;

assign mul_ln91_fu_393_p00 = select_ln91_1_fu_339_p3;

assign mul_ln91_fu_393_p1 = 20'd206116;

assign or_ln91_fu_315_p2 = (icmp_ln93_fu_295_p2 | first_iter_129_fu_309_p2);

assign select_ln91_1_fu_339_p3 = ((icmp_ln93_fu_295_p2[0:0] == 1'b1) ? add_ln91_1_fu_289_p2 : c_fu_120);

assign select_ln91_fu_301_p3 = ((icmp_ln93_fu_295_p2[0:0] == 1'b1) ? 4'd4 : i_fu_112);

assign select_ln93_1_fu_440_p3 = ((icmp_ln93_fu_295_p2[0:0] == 1'b1) ? 11'd1 : add_ln93_1_fu_434_p2);

assign select_ln93_fu_375_p3 = ((and_ln91_fu_333_p2[0:0] == 1'b1) ? add_ln93_fu_347_p2 : select_ln91_fu_301_p3);

assign sext_ln93_fu_418_p1 = $signed(trunc_ln_fu_408_p4);

assign trunc_ln_fu_408_p4 = {{add_ln91_fu_403_p2[63:2]}};

assign xor_ln91_fu_321_p2 = (icmp_ln93_fu_295_p2 ^ 1'd1);

assign zext_ln91_1_fu_399_p1 = mul_ln91_fu_393_p2;

assign zext_ln98_2_fu_483_p1 = grp_fu_493_p3;

endmodule //conv1_conv1_Pipeline_L2_L3_L4
