-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv1_conv1_Pipeline_L1_bias_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 96
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of conv1_conv1_Pipeline_L1_bias_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "10111111000000010001010000010000", 1 => "10111110010000010100101101010101", 2 => "10111100110101111111111001110101", 3 => "10111110100100010101110101111010", 
    4 => "10111110000001100000010010000000", 5 => "10111101111010010101001001100101", 6 => "10111110101101010010010100001001", 7 => "10111110100111000011011110001101", 
    8 => "10111110100110000110000000100101", 9 => "10111111001100011000000100000011", 10 => "10111101111010111001100001111101", 11 => "10111111000111101010001001010010", 
    12 => "10111111001101000001011101100000", 13 => "10111110101111000110101000001111", 14 => "10111111000000111000100101110110", 15 => "10111110111111111000100111011000", 
    16 => "10111110110010011001001100101001", 17 => "10111111000000001101101010001110", 18 => "10111110111110110111001101101111", 19 => "10111111000010010101110111100101", 
    20 => "10111111000011110110011111101011", 21 => "10111111010000110011100011001011", 22 => "10111111010001011101011011000011", 23 => "10111110110101101110101001101101", 
    24 => "00111100111101110100011101001000", 25 => "10111110101010110010101101011000", 26 => "10111110101011100100001011001111", 27 => "10111100110001101010101011110111", 
    28 => "10111110110110011101100111100010", 29 => "10111110100011000000111000010000", 30 => "10111110010010001101000011001010", 31 => "10111110011110110011001000001111", 
    32 => "10111110010111011000010011000111", 33 => "10111110000110011111100101000000", 34 => "10111110010100010001100011110100", 35 => "10111110101011100111110101111100", 
    36 => "10111110011011101000010100000001", 37 => "10111110110010101111001011010010", 38 => "10111111010011100001000000001000", 39 => "10111110101000010101010011111101", 
    40 => "10111111000101100000001011101101", 41 => "10111110110011000101011100100100", 42 => "00111101110001010000010000101111", 43 => "10111101101101100110011101110100", 
    44 => "10111101101101001101011000010000", 45 => "00111101000000101001001000110001", 46 => "10111100111101010100001001110101", 47 => "10111111000111100000000010001101", 
    48 => "10111110001111011101001000000001", 49 => "10111111000010011110011110111110", 50 => "10111111000110100000110000100011", 51 => "10111110100011011001101100000011", 
    52 => "10111111000000100111000000100011", 53 => "10111111000101011101010000011000", 54 => "10111111001000111100000100000111", 55 => "10111110100110100101010011110111", 
    56 => "10111110111100110111100010101111", 57 => "10111110111000010100001011010101", 58 => "10111111000011011100111000101110", 59 => "10111111000000111110110101100011", 
    60 => "10111111000111101010010111001100", 61 => "10111111000011011111010101001101", 62 => "10111110110100000010100010111010", 63 => "10111110111011111100000110011010", 
    64 => "10111110101101000111011011100111", 65 => "00111011110101001010010011100101", 66 => "10111111000001010001010011010111", 67 => "10111110000111110010000001000010", 
    68 => "10111111000101001011111000010011", 69 => "10111111000001100100111100101010", 70 => "10111110111000000101001011000001", 71 => "10111101101000000011110001010101", 
    72 => "10111011111101110000110001100110", 73 => "00111101100110100110110100101001", 74 => "00111101110010110110010000100010", 75 => "00111010100111011001101011101010", 
    76 => "00111110001001100110101111011011", 77 => "10111110011111110100000010001110", 78 => "10111110111111111011100101010100", 79 => "10111110100001100110111010111010", 
    80 => "10111111000100110011000011100110", 81 => "10111111000111110000100101001101", 82 => "10111110111101001010010100011001", 83 => "00111110011011010110000010010111", 
    84 => "10111110100010110001011101110011", 85 => "00111100101101100010101001111101", 86 => "10111110111010100000010000110011", 87 => "10111110110110011101001101000100", 
    88 => "10111111000001011101100110001011", 89 => "10111110101100101100111011100110", 90 => "10111111000110110101110000110111", 91 => "10111111001100000011011101110001", 
    92 => "10111110101101101100100101111001", 93 => "10111111001100100001000100011001", 94 => "10111110111001010000000010111110", 95 => "10111111010110101011001011111000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

