-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pad4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inp_img_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    inp_img_ce0 : OUT STD_LOGIC;
    inp_img_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_img_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    out_img_ce0 : OUT STD_LOGIC;
    out_img_we0 : OUT STD_LOGIC;
    out_img_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of pad4 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pad4_pad4,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.090000,HLS_SYN_LAT=86405,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=282,HLS_SYN_LUT=614,HLS_VERSION=2024_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv8_E1 : STD_LOGIC_VECTOR (7 downto 0) := "11100001";
    constant ap_const_lv17_1517F : STD_LOGIC_VECTOR (16 downto 0) := "10101000101111111";
    constant ap_const_lv16_A9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010101001";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv17_E1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000011100001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln34_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_delayed : STD_LOGIC;
    signal icmp_ln3521_reg_122 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_mid2_fu_217_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_mid2_reg_507 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_mid2_reg_507_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal j_mid2_reg_507_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln35_fu_239_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_5_fu_257_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_5_reg_518 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_5_reg_518_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_5_reg_518_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_5_reg_518_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln39_1_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_1_reg_523 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_1_reg_523_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_1_reg_523_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_1_reg_523_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_528 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_reg_533 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_538 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_363_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_reg_542 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln35_fu_394_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_icmp_ln3521_phi_fu_125_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_icmp_ln3620_phi_fu_136_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln45_1_fu_421_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_fu_434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten1215_fu_72 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal add_ln34_1_fu_313_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_sig_allocacmp_indvar_flatten1215_load : STD_LOGIC_VECTOR (16 downto 0);
    signal c16_fu_76 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal indvar_flatten17_fu_80 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln35_1_fu_305_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_indvar_flatten17_load : STD_LOGIC_VECTOR (7 downto 0);
    signal i18_fu_84 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal i_fu_225_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i18_load : STD_LOGIC_VECTOR (3 downto 0);
    signal j19_fu_88 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal j_fu_293_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_j19_load : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln3422_fu_92 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal add_ln34_fu_375_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal inp_img_ce0_local : STD_LOGIC;
    signal out_img_we0_local : STD_LOGIC;
    signal empty_7_fu_439_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_img_ce0_local : STD_LOGIC;
    signal xor_ln34_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_fu_185_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln34_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln35_fu_205_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_fu_249_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal cmp9_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp10_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_2_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln35_1_fu_299_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln35_fu_394_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln35_fu_394_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln36_2_fu_403_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln45_4_fu_406_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln45_fu_412_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_447_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln45_1_fu_416_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln45_1_fu_416_p2 : signal is "no";
    signal grp_fu_456_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_cast_fu_426_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln45_fu_429_p2 : STD_LOGIC_VECTOR (16 downto 0);
    attribute use_dsp48 of add_ln45_fu_429_p2 : signal is "no";
    signal grp_fu_447_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_447_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_456_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_456_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_456_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal grp_fu_456_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_456_p20 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln35_fu_394_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_condition_404 : BOOLEAN;
    signal ap_condition_101 : BOOLEAN;
    signal ap_condition_411 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component pad4_mul_9ns_9ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component pad4_mac_muladd_4ns_4ns_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component pad4_mac_muladd_9ns_8ns_4ns_17_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component pad4_flow_control_loop_delay_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_loop_exit_ready_delayed : IN STD_LOGIC );
    end component;



begin
    mul_9ns_9ns_16_1_1_U1 : component pad4_mul_9ns_9ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln35_fu_394_p0,
        din1 => mul_ln35_fu_394_p1,
        dout => mul_ln35_fu_394_p2);

    mac_muladd_4ns_4ns_16ns_16_4_1_U2 : component pad4_mac_muladd_4ns_4ns_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_447_p0,
        din1 => grp_fu_447_p1,
        din2 => mul_ln35_fu_394_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_447_p3);

    mac_muladd_9ns_8ns_4ns_17_4_1_U3 : component pad4_mac_muladd_9ns_8ns_4ns_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 8,
        din2_WIDTH => 4,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_456_p0,
        din1 => grp_fu_456_p1,
        din2 => grp_fu_456_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_456_p3);

    flow_control_loop_delay_pipe_U : component pad4_flow_control_loop_delay_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_const_logic_1,
        ap_loop_exit_ready_delayed => ap_loop_exit_ready_delayed);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    add_ln3422_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                    add_ln3422_fu_92 <= ap_const_lv9_1;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    add_ln3422_fu_92 <= add_ln34_fu_375_p2;
                end if;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_0))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    c16_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                    c16_fu_76 <= ap_const_lv9_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    c16_fu_76 <= c_fu_363_p3;
                end if;
            end if; 
        end if;
    end process;

    i18_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_101)) then
                i18_fu_84 <= i_fu_225_p3;
            end if;
        end if;
    end process;

    icmp_ln3521_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if ((ap_const_boolean_1 = ap_condition_411)) then 
                    icmp_ln3521_reg_122 <= icmp_ln35_reg_533;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_init = ap_const_logic_1))) then 
                    icmp_ln3521_reg_122 <= ap_const_lv1_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten1215_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_101)) then
                indvar_flatten1215_fu_72 <= add_ln34_1_fu_313_p2;
            end if;
        end if;
    end process;

    indvar_flatten17_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_101)) then
                indvar_flatten17_fu_80 <= select_ln35_1_fu_305_p3;
            end if;
        end if;
    end process;

    j19_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_101)) then
                j19_fu_88 <= j_fu_293_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
                ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                c_reg_542 <= c_fu_363_p3;
                empty_5_reg_518 <= empty_5_fu_257_p2;
                empty_5_reg_518_pp0_iter1_reg <= empty_5_reg_518;
                icmp_ln34_reg_538 <= icmp_ln34_fu_331_p2;
                j_mid2_reg_507 <= j_mid2_fu_217_p3;
                j_mid2_reg_507_pp0_iter1_reg <= j_mid2_reg_507;
                or_ln39_1_reg_523 <= or_ln39_1_fu_287_p2;
                or_ln39_1_reg_523_pp0_iter1_reg <= or_ln39_1_reg_523;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                empty_5_reg_518_pp0_iter2_reg <= empty_5_reg_518_pp0_iter1_reg;
                empty_5_reg_518_pp0_iter3_reg <= empty_5_reg_518_pp0_iter2_reg;
                j_mid2_reg_507_pp0_iter2_reg <= j_mid2_reg_507_pp0_iter1_reg;
                or_ln39_1_reg_523_pp0_iter2_reg <= or_ln39_1_reg_523_pp0_iter1_reg;
                or_ln39_1_reg_523_pp0_iter3_reg <= or_ln39_1_reg_523_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln35_reg_533 <= icmp_ln35_fu_325_p2;
                icmp_ln36_reg_528 <= icmp_ln36_fu_319_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln34_1_fu_313_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten1215_load) + unsigned(ap_const_lv17_1));
    add_ln34_fu_375_p2 <= std_logic_vector(unsigned(c_fu_363_p3) + unsigned(ap_const_lv9_1));
    add_ln35_1_fu_299_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten17_load) + unsigned(ap_const_lv8_1));
    add_ln35_fu_205_p2 <= std_logic_vector(unsigned(select_ln34_fu_185_p3) + unsigned(ap_const_lv4_1));
    add_ln45_1_fu_416_p2 <= std_logic_vector(signed(sext_ln45_fu_412_p1) + signed(grp_fu_447_p3));
    add_ln45_4_fu_406_p2 <= std_logic_vector(unsigned(zext_ln36_2_fu_403_p1) + unsigned(ap_const_lv5_12));
    add_ln45_fu_429_p2 <= std_logic_vector(unsigned(grp_fu_456_p3) + unsigned(p_cast_fu_426_p1));
    and_ln34_fu_199_p2 <= (xor_ln34_fu_193_p2 and ap_phi_mux_icmp_ln3620_phi_fu_136_p4);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_101_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_101 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_404_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln34_reg_538, ap_block_pp0_stage0)
    begin
                ap_condition_404 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln34_reg_538 = ap_const_lv1_0));
    end process;


    ap_condition_411_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, icmp_ln34_reg_538)
    begin
                ap_condition_411 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln34_reg_538 = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln34_fu_331_p2)
    begin
        if (((icmp_ln34_fu_331_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_loop_exit_ready_delayed_assign_proc : process(ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg))) then 
            ap_loop_exit_ready_delayed <= ap_const_logic_1;
        else 
            ap_loop_exit_ready_delayed <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_icmp_ln3521_phi_fu_125_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln35_reg_533, ap_loop_init, ap_condition_404)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
            if ((ap_const_boolean_1 = ap_condition_404)) then 
                ap_phi_mux_icmp_ln3521_phi_fu_125_p4 <= icmp_ln35_reg_533;
            elsif ((ap_loop_init = ap_const_logic_1)) then 
                ap_phi_mux_icmp_ln3521_phi_fu_125_p4 <= ap_const_lv1_0;
            else 
                ap_phi_mux_icmp_ln3521_phi_fu_125_p4 <= icmp_ln35_reg_533;
            end if;
        else 
            ap_phi_mux_icmp_ln3521_phi_fu_125_p4 <= icmp_ln35_reg_533;
        end if; 
    end process;


    ap_phi_mux_icmp_ln3620_phi_fu_136_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln36_reg_528, ap_loop_init, ap_condition_404)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
            if ((ap_const_boolean_1 = ap_condition_404)) then 
                ap_phi_mux_icmp_ln3620_phi_fu_136_p4 <= icmp_ln36_reg_528;
            elsif ((ap_loop_init = ap_const_logic_1)) then 
                ap_phi_mux_icmp_ln3620_phi_fu_136_p4 <= ap_const_lv1_0;
            else 
                ap_phi_mux_icmp_ln3620_phi_fu_136_p4 <= icmp_ln36_reg_528;
            end if;
        else 
            ap_phi_mux_icmp_ln3620_phi_fu_136_p4 <= icmp_ln36_reg_528;
        end if; 
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i18_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_loop_init, ap_block_pp0_stage0, i18_fu_84)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i18_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i18_load <= i18_fu_84;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten1215_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_loop_init, ap_block_pp0_stage0, indvar_flatten1215_fu_72)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten1215_load <= ap_const_lv17_0;
        else 
            ap_sig_allocacmp_indvar_flatten1215_load <= indvar_flatten1215_fu_72;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten17_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_loop_init, ap_block_pp0_stage0, indvar_flatten17_fu_80)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten17_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_indvar_flatten17_load <= indvar_flatten17_fu_80;
        end if; 
    end process;


    ap_sig_allocacmp_j19_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_loop_init, ap_block_pp0_stage0, j19_fu_88)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j19_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_j19_load <= j19_fu_88;
        end if; 
    end process;

    c_fu_363_p3 <= 
        add_ln3422_fu_92 when (icmp_ln3521_reg_122(0) = '1') else 
        c16_fu_76;
    cmp10_fu_263_p2 <= "1" when (unsigned(i_fu_225_p3) > unsigned(ap_const_lv4_D)) else "0";
    cmp9_fu_243_p2 <= "1" when (i_fu_225_p3 = ap_const_lv4_0) else "0";
    empty_5_fu_257_p2 <= std_logic_vector(unsigned(p_shl_fu_249_p3) - unsigned(zext_ln35_fu_239_p1));
    empty_7_fu_439_p3 <= 
        ap_const_lv32_0 when (or_ln39_1_reg_523_pp0_iter3_reg(0) = '1') else 
        inp_img_q0;
    empty_fu_211_p2 <= (ap_phi_mux_icmp_ln3521_phi_fu_125_p4 or and_ln34_fu_199_p2);
    first_iter_0_fu_233_p2 <= "1" when (j_mid2_fu_217_p3 = ap_const_lv4_0) else "0";
    grp_fu_447_p0 <= zext_ln35_fu_239_p1(4 - 1 downto 0);
    grp_fu_447_p1 <= ap_const_lv8_D(4 - 1 downto 0);
    grp_fu_456_p0 <= grp_fu_456_p00(9 - 1 downto 0);
    grp_fu_456_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_fu_363_p3),17));
    grp_fu_456_p1 <= ap_const_lv17_E1(8 - 1 downto 0);
    grp_fu_456_p2 <= grp_fu_456_p20(4 - 1 downto 0);
    grp_fu_456_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_reg_507_pp0_iter2_reg),17));
    i_fu_225_p3 <= 
        add_ln35_fu_205_p2 when (and_ln34_fu_199_p2(0) = '1') else 
        select_ln34_fu_185_p3;
    icmp_ln34_fu_331_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten1215_load = ap_const_lv17_1517F) else "0";
    icmp_ln35_fu_325_p2 <= "1" when (select_ln35_1_fu_305_p3 = ap_const_lv8_E1) else "0";
    icmp_ln36_fu_319_p2 <= "1" when (j_fu_293_p2 = ap_const_lv4_F) else "0";
    icmp_ln39_fu_269_p2 <= "1" when (unsigned(j_mid2_fu_217_p3) > unsigned(ap_const_lv4_D)) else "0";
    inp_img_address0 <= zext_ln45_1_fu_421_p1(16 - 1 downto 0);
    inp_img_ce0 <= inp_img_ce0_local;

    inp_img_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            inp_img_ce0_local <= ap_const_logic_1;
        else 
            inp_img_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_293_p2 <= std_logic_vector(unsigned(j_mid2_fu_217_p3) + unsigned(ap_const_lv4_1));
    j_mid2_fu_217_p3 <= 
        ap_const_lv4_0 when (empty_fu_211_p2(0) = '1') else 
        ap_sig_allocacmp_j19_load;
    mul_ln35_fu_394_p0 <= mul_ln35_fu_394_p00(9 - 1 downto 0);
    mul_ln35_fu_394_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_reg_542),16));
    mul_ln35_fu_394_p1 <= ap_const_lv16_A9(9 - 1 downto 0);
    or_ln39_1_fu_287_p2 <= (or_ln39_fu_275_p2 or or_ln39_2_fu_281_p2);
    or_ln39_2_fu_281_p2 <= (icmp_ln39_fu_269_p2 or first_iter_0_fu_233_p2);
    or_ln39_fu_275_p2 <= (cmp9_fu_243_p2 or cmp10_fu_263_p2);
    out_img_address0 <= zext_ln45_fu_434_p1(17 - 1 downto 0);
    out_img_ce0 <= out_img_ce0_local;

    out_img_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            out_img_ce0_local <= ap_const_logic_1;
        else 
            out_img_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_img_d0 <= empty_7_fu_439_p3;
    out_img_we0 <= out_img_we0_local;

    out_img_we0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            out_img_we0_local <= ap_const_logic_1;
        else 
            out_img_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    p_cast_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_5_reg_518_pp0_iter3_reg),17));
    p_shl_fu_249_p3 <= (i_fu_225_p3 & ap_const_lv4_0);
    select_ln34_fu_185_p3 <= 
        ap_const_lv4_0 when (ap_phi_mux_icmp_ln3521_phi_fu_125_p4(0) = '1') else 
        ap_sig_allocacmp_i18_load;
    select_ln35_1_fu_305_p3 <= 
        ap_const_lv8_1 when (ap_phi_mux_icmp_ln3521_phi_fu_125_p4(0) = '1') else 
        add_ln35_1_fu_299_p2;
        sext_ln45_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln45_4_fu_406_p2),16));

    xor_ln34_fu_193_p2 <= (ap_phi_mux_icmp_ln3521_phi_fu_125_p4 xor ap_const_lv1_1);
    zext_ln35_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_225_p3),8));
    zext_ln36_2_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_reg_507_pp0_iter2_reg),5));
    zext_ln45_1_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln45_1_fu_416_p2),64));
    zext_ln45_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln45_fu_429_p2),64));
end behav;
