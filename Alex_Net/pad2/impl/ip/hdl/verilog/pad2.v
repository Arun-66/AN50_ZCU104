// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pad2_pad2,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.090000,HLS_SYN_LAT=57605,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=281,HLS_SYN_LUT=611,HLS_VERSION=2024_2}" *)

module pad2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        inp_img_address0,
        inp_img_ce0,
        inp_img_q0,
        out_img_address0,
        out_img_ce0,
        out_img_we0,
        out_img_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] inp_img_address0;
output   inp_img_ce0;
input  [31:0] inp_img_q0;
output  [15:0] out_img_address0;
output   out_img_ce0;
output   out_img_we0;
output  [31:0] out_img_d0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln34_fu_331_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
wire    ap_block_pp0_stage0_11001;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg;
reg    ap_loop_exit_ready_delayed;
reg   [0:0] icmp_ln3521_reg_122;
wire   [3:0] j_mid2_fu_217_p3;
reg   [3:0] j_mid2_reg_503;
reg   [3:0] j_mid2_reg_503_pp0_iter1_reg;
reg   [3:0] j_mid2_reg_503_pp0_iter2_reg;
wire   [7:0] zext_ln35_fu_239_p1;
wire   [7:0] empty_4_fu_257_p2;
reg   [7:0] empty_4_reg_514;
reg   [7:0] empty_4_reg_514_pp0_iter1_reg;
reg   [7:0] empty_4_reg_514_pp0_iter2_reg;
reg   [7:0] empty_4_reg_514_pp0_iter3_reg;
wire   [0:0] or_ln39_1_fu_287_p2;
reg   [0:0] or_ln39_1_reg_519;
reg   [0:0] or_ln39_1_reg_519_pp0_iter1_reg;
reg   [0:0] or_ln39_1_reg_519_pp0_iter2_reg;
reg   [0:0] or_ln39_1_reg_519_pp0_iter3_reg;
wire   [0:0] icmp_ln36_fu_319_p2;
reg   [0:0] icmp_ln36_reg_524;
wire   [0:0] icmp_ln35_fu_325_p2;
reg   [0:0] icmp_ln35_reg_529;
reg   [0:0] icmp_ln34_reg_534;
wire   [15:0] select_ln34_1_cast_fu_371_p1;
reg   [15:0] select_ln34_1_cast_reg_538;
wire   [15:0] mul_ln35_fu_391_p2;
reg   [0:0] ap_phi_mux_icmp_ln3521_phi_fu_125_p4;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [0:0] ap_phi_mux_icmp_ln3620_phi_fu_136_p4;
wire   [63:0] zext_ln45_1_fu_417_p1;
wire   [63:0] zext_ln45_fu_430_p1;
reg   [15:0] indvar_flatten1215_fu_72;
wire   [15:0] add_ln34_1_fu_313_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten1215_load;
reg   [8:0] c16_fu_76;
wire   [8:0] c_fu_363_p3;
reg   [7:0] indvar_flatten17_fu_80;
wire   [7:0] select_ln35_1_fu_305_p3;
reg   [7:0] ap_sig_allocacmp_indvar_flatten17_load;
reg   [3:0] i18_fu_84;
wire   [3:0] i_fu_225_p3;
reg   [3:0] ap_sig_allocacmp_i18_load;
reg   [3:0] j19_fu_88;
wire   [3:0] j_fu_293_p2;
reg   [3:0] ap_sig_allocacmp_j19_load;
reg   [8:0] add_ln3422_fu_92;
wire   [8:0] add_ln34_fu_375_p2;
reg    inp_img_ce0_local;
reg    out_img_we0_local;
wire   [31:0] empty_6_fu_435_p3;
reg    out_img_ce0_local;
wire   [0:0] xor_ln34_fu_193_p2;
wire   [3:0] select_ln34_fu_185_p3;
wire   [0:0] and_ln34_fu_199_p2;
wire   [0:0] empty_fu_211_p2;
wire   [3:0] add_ln35_fu_205_p2;
wire   [7:0] p_shl_fu_249_p3;
wire   [0:0] cmp9_fu_243_p2;
wire   [0:0] cmp10_fu_263_p2;
wire   [0:0] first_iter_0_fu_233_p2;
wire   [0:0] icmp_ln39_fu_269_p2;
wire   [0:0] or_ln39_2_fu_281_p2;
wire   [0:0] or_ln39_fu_275_p2;
wire   [7:0] add_ln35_1_fu_299_p2;
wire   [8:0] mul_ln35_fu_391_p0;
wire   [8:0] mul_ln35_fu_391_p1;
wire   [4:0] zext_ln36_2_fu_399_p1;
wire   [4:0] add_ln45_4_fu_402_p2;
wire  signed [15:0] sext_ln45_fu_408_p1;
wire   [15:0] grp_fu_443_p3;
(* use_dsp48 = "no" *) wire   [15:0] add_ln45_1_fu_412_p2;
wire   [15:0] grp_fu_452_p3;
wire   [15:0] p_cast7_fu_422_p1;
(* use_dsp48 = "no" *) wire   [15:0] add_ln45_fu_425_p2;
wire   [3:0] grp_fu_443_p0;
wire   [3:0] grp_fu_443_p1;
wire   [8:0] grp_fu_452_p0;
wire   [7:0] grp_fu_452_p1;
wire   [3:0] grp_fu_452_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [15:0] grp_fu_452_p00;
wire   [15:0] grp_fu_452_p20;
reg    ap_condition_398;
reg    ap_condition_101;
reg    ap_condition_405;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 indvar_flatten1215_fu_72 = 16'd0;
#0 c16_fu_76 = 9'd0;
#0 indvar_flatten17_fu_80 = 8'd0;
#0 i18_fu_84 = 4'd0;
#0 j19_fu_88 = 4'd0;
#0 add_ln3422_fu_92 = 9'd0;
#0 ap_done_reg = 1'b0;
end

pad2_mul_9ns_9ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 16 ))
mul_9ns_9ns_16_1_1_U1(
    .din0(mul_ln35_fu_391_p0),
    .din1(mul_ln35_fu_391_p1),
    .dout(mul_ln35_fu_391_p2)
);

pad2_mac_muladd_4ns_4ns_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_4ns_4ns_16ns_16_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_443_p0),
    .din1(grp_fu_443_p1),
    .din2(mul_ln35_fu_391_p2),
    .ce(1'b1),
    .dout(grp_fu_443_p3)
);

pad2_mac_muladd_9ns_8ns_4ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mac_muladd_9ns_8ns_4ns_16_4_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_452_p0),
    .din1(grp_fu_452_p1),
    .din2(grp_fu_452_p2),
    .ce(1'b1),
    .dout(grp_fu_452_p3)
);

pad2_flow_control_loop_delay_pipe flow_control_loop_delay_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1),
    .ap_loop_exit_ready_delayed(ap_loop_exit_ready_delayed)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1))) begin
            add_ln3422_fu_92 <= 9'd1;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add_ln3422_fu_92 <= add_ln34_fu_375_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1))) begin
            c16_fu_76 <= 9'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            c16_fu_76 <= c_fu_363_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_101)) begin
        i18_fu_84 <= i_fu_225_p3;
    end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
    if ((1'b1 == ap_condition_405)) begin
        icmp_ln3521_reg_122 <= icmp_ln35_reg_529;
    end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_init == 1'b1))) begin
        icmp_ln3521_reg_122 <= 1'd0;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_101)) begin
    indvar_flatten1215_fu_72 <= add_ln34_1_fu_313_p2;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_101)) begin
    indvar_flatten17_fu_80 <= select_ln35_1_fu_305_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_101)) begin
    j19_fu_88 <= j_fu_293_p2;
end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
        ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        empty_4_reg_514 <= empty_4_fu_257_p2;
        empty_4_reg_514_pp0_iter1_reg <= empty_4_reg_514;
        icmp_ln34_reg_534 <= icmp_ln34_fu_331_p2;
        j_mid2_reg_503 <= j_mid2_fu_217_p3;
        j_mid2_reg_503_pp0_iter1_reg <= j_mid2_reg_503;
        or_ln39_1_reg_519 <= or_ln39_1_fu_287_p2;
        or_ln39_1_reg_519_pp0_iter1_reg <= or_ln39_1_reg_519;
        select_ln34_1_cast_reg_538[8 : 0] <= select_ln34_1_cast_fu_371_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        empty_4_reg_514_pp0_iter2_reg <= empty_4_reg_514_pp0_iter1_reg;
        empty_4_reg_514_pp0_iter3_reg <= empty_4_reg_514_pp0_iter2_reg;
        j_mid2_reg_503_pp0_iter2_reg <= j_mid2_reg_503_pp0_iter1_reg;
        or_ln39_1_reg_519_pp0_iter2_reg <= or_ln39_1_reg_519_pp0_iter1_reg;
        or_ln39_1_reg_519_pp0_iter3_reg <= or_ln39_1_reg_519_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln35_reg_529 <= icmp_ln35_fu_325_p2;
        icmp_ln36_reg_524 <= icmp_ln36_fu_319_p2;
    end
end

always @ (*) begin
    if (((icmp_ln34_fu_331_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg))) begin
        ap_loop_exit_ready_delayed = 1'b1;
    end else begin
        ap_loop_exit_ready_delayed = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_398)) begin
            ap_phi_mux_icmp_ln3521_phi_fu_125_p4 = icmp_ln35_reg_529;
        end else if ((ap_loop_init == 1'b1)) begin
            ap_phi_mux_icmp_ln3521_phi_fu_125_p4 = 1'd0;
        end else begin
            ap_phi_mux_icmp_ln3521_phi_fu_125_p4 = icmp_ln35_reg_529;
        end
    end else begin
        ap_phi_mux_icmp_ln3521_phi_fu_125_p4 = icmp_ln35_reg_529;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_398)) begin
            ap_phi_mux_icmp_ln3620_phi_fu_136_p4 = icmp_ln36_reg_524;
        end else if ((ap_loop_init == 1'b1)) begin
            ap_phi_mux_icmp_ln3620_phi_fu_136_p4 = 1'd0;
        end else begin
            ap_phi_mux_icmp_ln3620_phi_fu_136_p4 = icmp_ln36_reg_524;
        end
    end else begin
        ap_phi_mux_icmp_ln3620_phi_fu_136_p4 = icmp_ln36_reg_524;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i18_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i18_load = i18_fu_84;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten1215_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten1215_load = indvar_flatten1215_fu_72;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten17_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten17_load = indvar_flatten17_fu_80;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j19_load = 4'd0;
    end else begin
        ap_sig_allocacmp_j19_load = j19_fu_88;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        inp_img_ce0_local = 1'b1;
    end else begin
        inp_img_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        out_img_ce0_local = 1'b1;
    end else begin
        out_img_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        out_img_we0_local = 1'b1;
    end else begin
        out_img_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln34_1_fu_313_p2 = (ap_sig_allocacmp_indvar_flatten1215_load + 16'd1);

assign add_ln34_fu_375_p2 = (c_fu_363_p3 + 9'd1);

assign add_ln35_1_fu_299_p2 = (ap_sig_allocacmp_indvar_flatten17_load + 8'd1);

assign add_ln35_fu_205_p2 = (select_ln34_fu_185_p3 + 4'd1);

assign add_ln45_1_fu_412_p2 = ($signed(sext_ln45_fu_408_p1) + $signed(grp_fu_443_p3));

assign add_ln45_4_fu_402_p2 = ($signed(zext_ln36_2_fu_399_p1) + $signed(5'd18));

assign add_ln45_fu_425_p2 = (grp_fu_452_p3 + p_cast7_fu_422_p1);

assign and_ln34_fu_199_p2 = (xor_ln34_fu_193_p2 & ap_phi_mux_icmp_ln3620_phi_fu_136_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_101 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_398 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln34_reg_534 == 1'd0));
end

always @ (*) begin
    ap_condition_405 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln34_reg_534 == 1'd0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign c_fu_363_p3 = ((icmp_ln3521_reg_122[0:0] == 1'b1) ? add_ln3422_fu_92 : c16_fu_76);

assign cmp10_fu_263_p2 = ((i_fu_225_p3 > 4'd13) ? 1'b1 : 1'b0);

assign cmp9_fu_243_p2 = ((i_fu_225_p3 == 4'd0) ? 1'b1 : 1'b0);

assign empty_4_fu_257_p2 = (p_shl_fu_249_p3 - zext_ln35_fu_239_p1);

assign empty_6_fu_435_p3 = ((or_ln39_1_reg_519_pp0_iter3_reg[0:0] == 1'b1) ? 32'd0 : inp_img_q0);

assign empty_fu_211_p2 = (ap_phi_mux_icmp_ln3521_phi_fu_125_p4 | and_ln34_fu_199_p2);

assign first_iter_0_fu_233_p2 = ((j_mid2_fu_217_p3 == 4'd0) ? 1'b1 : 1'b0);

assign grp_fu_443_p0 = zext_ln35_fu_239_p1;

assign grp_fu_443_p1 = 8'd13;

assign grp_fu_452_p0 = grp_fu_452_p00;

assign grp_fu_452_p00 = c_fu_363_p3;

assign grp_fu_452_p1 = 16'd225;

assign grp_fu_452_p2 = grp_fu_452_p20;

assign grp_fu_452_p20 = j_mid2_reg_503_pp0_iter2_reg;

assign i_fu_225_p3 = ((and_ln34_fu_199_p2[0:0] == 1'b1) ? add_ln35_fu_205_p2 : select_ln34_fu_185_p3);

assign icmp_ln34_fu_331_p2 = ((ap_sig_allocacmp_indvar_flatten1215_load == 16'd57599) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_325_p2 = ((select_ln35_1_fu_305_p3 == 8'd225) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_319_p2 = ((j_fu_293_p2 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_269_p2 = ((j_mid2_fu_217_p3 > 4'd13) ? 1'b1 : 1'b0);

assign inp_img_address0 = zext_ln45_1_fu_417_p1;

assign inp_img_ce0 = inp_img_ce0_local;

assign j_fu_293_p2 = (j_mid2_fu_217_p3 + 4'd1);

assign j_mid2_fu_217_p3 = ((empty_fu_211_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_j19_load);

assign mul_ln35_fu_391_p0 = select_ln34_1_cast_reg_538;

assign mul_ln35_fu_391_p1 = 16'd169;

assign or_ln39_1_fu_287_p2 = (or_ln39_fu_275_p2 | or_ln39_2_fu_281_p2);

assign or_ln39_2_fu_281_p2 = (icmp_ln39_fu_269_p2 | first_iter_0_fu_233_p2);

assign or_ln39_fu_275_p2 = (cmp9_fu_243_p2 | cmp10_fu_263_p2);

assign out_img_address0 = zext_ln45_fu_430_p1;

assign out_img_ce0 = out_img_ce0_local;

assign out_img_d0 = empty_6_fu_435_p3;

assign out_img_we0 = out_img_we0_local;

assign p_cast7_fu_422_p1 = empty_4_reg_514_pp0_iter3_reg;

assign p_shl_fu_249_p3 = {{i_fu_225_p3}, {4'd0}};

assign select_ln34_1_cast_fu_371_p1 = c_fu_363_p3;

assign select_ln34_fu_185_p3 = ((ap_phi_mux_icmp_ln3521_phi_fu_125_p4[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_i18_load);

assign select_ln35_1_fu_305_p3 = ((ap_phi_mux_icmp_ln3521_phi_fu_125_p4[0:0] == 1'b1) ? 8'd1 : add_ln35_1_fu_299_p2);

assign sext_ln45_fu_408_p1 = $signed(add_ln45_4_fu_402_p2);

assign xor_ln34_fu_193_p2 = (ap_phi_mux_icmp_ln3521_phi_fu_125_p4 ^ 1'd1);

assign zext_ln35_fu_239_p1 = i_fu_225_p3;

assign zext_ln36_2_fu_399_p1 = j_mid2_reg_503_pp0_iter2_reg;

assign zext_ln45_1_fu_417_p1 = add_ln45_1_fu_412_p2;

assign zext_ln45_fu_430_p1 = add_ln45_fu_425_p2;

always @ (posedge ap_clk) begin
    select_ln34_1_cast_reg_538[15:9] <= 7'b0000000;
end

endmodule //pad2
