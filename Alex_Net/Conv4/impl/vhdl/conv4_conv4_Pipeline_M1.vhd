-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv4_conv4_Pipeline_M1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem0_0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem0_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln78 : IN STD_LOGIC_VECTOR (61 downto 0);
    add1809235_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_19248_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_29261_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_39274_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_49287_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_59300_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_69313_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_79326_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_89339_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_99352_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_109365_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_119378_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_129391_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    empty : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_182579236_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_1_19249_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_2_19262_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_3_19275_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_4_19288_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_5_19301_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_6_19314_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_7_19327_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_8_19340_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_9_19353_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_10_19366_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_11_19379_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_12_19392_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_282749237_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_1_29250_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_2_29263_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_3_29276_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_4_29289_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_5_29302_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_6_29315_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_7_29328_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_8_29341_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_9_29354_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_10_29367_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_11_29380_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_12_29393_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_382919238_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_1_39251_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_2_39264_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_3_39277_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_4_39290_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_5_39303_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_6_39316_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_7_39329_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_8_39342_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_9_39355_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_10_39368_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_11_39381_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_12_39394_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_483089239_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_1_49252_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_2_49265_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_3_49278_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_4_49291_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_5_49304_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_6_49317_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_7_49330_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_8_49343_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_9_49356_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_10_49369_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_11_49382_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_12_49395_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_583259240_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_1_59253_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_2_59266_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_3_59279_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_4_59292_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_5_59305_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_6_59318_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_7_59331_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_8_59344_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_9_59357_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_10_59370_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_11_59383_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_12_59396_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_683429241_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_1_69254_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_2_69267_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_3_69280_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_4_69293_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_5_69306_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_6_69319_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_7_69332_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_8_69345_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_9_69358_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_10_69371_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_11_69384_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_12_69397_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_783599242_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_1_79255_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_2_79268_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_3_79281_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_4_79294_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_5_79307_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_6_79320_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_7_79333_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_8_79346_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_9_79359_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_10_79372_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_11_79385_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_12_79398_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_883769243_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_1_89256_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_2_89269_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_3_89282_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_4_89295_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_5_89308_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_6_89321_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_7_89334_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_8_89347_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_9_89360_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_10_89373_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_11_89386_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_12_89399_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_983939244_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_1_99257_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_2_99270_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_3_99283_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_4_99296_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_5_99309_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_6_99322_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_7_99335_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_8_99348_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_9_99361_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_10_99374_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_11_99387_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_12_99400_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_1084109245_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_1_109258_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_2_109271_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_3_109284_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_4_109297_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_5_109310_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_6_109323_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_7_109336_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_8_109349_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_9_109362_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_10_109375_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_11_109388_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_12_109401_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_1184279246_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_1_119259_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_2_119272_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_3_119285_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_4_119298_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_5_119311_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_6_119324_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_7_119337_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_8_119350_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_9_119363_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_10_119376_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_11_119389_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_12_119402_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_1284449247_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_1_129260_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_2_129273_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_3_129286_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_4_129299_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_5_129312_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_6_129325_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_7_129338_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_8_129351_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_9_129364_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_10_129377_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_11_129390_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add180_12_129412_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_22797_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_22797_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_22797_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_22797_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_22797_p_ce : OUT STD_LOGIC;
    grp_fu_26809_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_26809_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_26809_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_26809_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_26809_p_ce : OUT STD_LOGIC );
end;


architecture behav of conv4_conv4_Pipeline_M1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal icmp_ln136_reg_3055 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage6 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal ap_block_state13_io_grp6 : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal gmem0_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_pp0_stage7_grp1 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_pp0_stage8_grp2 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_pp0_stage9_grp3 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_pp0_stage10_grp4 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_pp0_stage11_grp5 : BOOLEAN;
    signal ap_block_pp0_stage12_grp6 : BOOLEAN;
    signal ap_block_pp0_stage0_grp7 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_grp8 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_grp9 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_grp10 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4_grp11 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5_grp12 : BOOLEAN;
    signal ap_block_pp0_stage6_grp13 : BOOLEAN;
    signal reg_1569 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage4_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone_grp0_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage4_subdone_grp0 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage6_subdone_grp0_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage6_subdone_grp0 : BOOLEAN;
    signal ap_block_pp0_stage8_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage8_subdone_grp0_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage8_subdone_grp0 : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage10_subdone_grp0_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage10_subdone_grp0 : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage12_subdone_grp0_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage12_subdone_grp0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone_grp0_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage1_subdone_grp0 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal reg_1574 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage5_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage5_subdone_grp0_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage5_subdone_grp0 : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage7_subdone_grp0_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage7_subdone_grp0 : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage9_subdone_grp0_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage9_subdone_grp0 : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage11_subdone_grp0_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage11_subdone_grp0 : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone_grp0_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage0_subdone_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone_grp0_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage2_subdone_grp0 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal icmp_ln136_fu_1591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_grp7 : BOOLEAN;
    signal tmp_fu_1609_p29 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_3076 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_1669_p29 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_3081 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_1729_p29 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_3086 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_1789_p29 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_3091 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1849_p29 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_3096 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_1909_p29 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_3101 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_1969_p29 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_3106 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_2029_p29 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_3111 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_2089_p29 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_3116 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_2149_p29 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_3121 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_2209_p29 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_3126 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_2269_p29 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_3131 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_2329_p29 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_3136 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_fu_2436_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_reg_3141 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_1_fu_2486_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_1_reg_3146 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_2_fu_2536_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_2_reg_3151 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_3_fu_2586_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_3_reg_3156 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_4_fu_2636_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_4_reg_3161 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_5_fu_2686_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_5_reg_3166 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_6_fu_2736_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_6_reg_3171 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_7_fu_2786_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_7_reg_3176 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_8_fu_2836_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_8_reg_3181 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_9_fu_2886_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_9_reg_3186 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_15_reg_3191 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage3_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone_grp0_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage3_subdone_grp0 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal select_ln136_10_fu_2936_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_10_reg_3197 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_11_fu_2986_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_11_reg_3202 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_12_fu_3035_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_12_reg_3207 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state8_io_grp1 : BOOLEAN;
    signal ap_block_pp0_stage7_11001_grp1 : BOOLEAN;
    signal ap_block_pp0_stage7_01001_grp1 : BOOLEAN;
    signal ap_block_state9_io_grp2 : BOOLEAN;
    signal ap_block_pp0_stage8_11001_grp2 : BOOLEAN;
    signal ap_block_pp0_stage8_01001_grp2 : BOOLEAN;
    signal ap_block_state10_io_grp3 : BOOLEAN;
    signal ap_block_pp0_stage9_11001_grp3 : BOOLEAN;
    signal ap_block_pp0_stage9_01001_grp3 : BOOLEAN;
    signal ap_block_state11_io_grp4 : BOOLEAN;
    signal ap_block_pp0_stage10_11001_grp4 : BOOLEAN;
    signal ap_block_pp0_stage10_01001_grp4 : BOOLEAN;
    signal ap_block_state12_io_grp5 : BOOLEAN;
    signal ap_block_pp0_stage11_11001_grp5 : BOOLEAN;
    signal ap_block_pp0_stage11_01001_grp5 : BOOLEAN;
    signal ap_block_pp0_stage12_11001_grp6 : BOOLEAN;
    signal ap_block_pp0_stage12_01001_grp6 : BOOLEAN;
    signal ap_block_pp0_stage0_01001_grp7 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_grp8 : BOOLEAN;
    signal ap_block_pp0_stage1_01001_grp8 : BOOLEAN;
    signal ap_block_pp0_stage2_11001_grp9 : BOOLEAN;
    signal ap_block_pp0_stage2_01001_grp9 : BOOLEAN;
    signal ap_block_pp0_stage3_11001_grp10 : BOOLEAN;
    signal ap_block_pp0_stage3_01001_grp10 : BOOLEAN;
    signal ap_block_pp0_stage4_11001_grp11 : BOOLEAN;
    signal ap_block_pp0_stage4_01001_grp11 : BOOLEAN;
    signal ap_block_pp0_stage5_11001_grp12 : BOOLEAN;
    signal ap_block_pp0_stage5_01001_grp12 : BOOLEAN;
    signal ap_block_pp0_stage6_11001_grp13 : BOOLEAN;
    signal ap_block_pp0_stage6_01001_grp13 : BOOLEAN;
    signal i_2_fu_426 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln136_fu_1597_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_fu_1560_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_grp0 : BOOLEAN;
    signal ap_block_pp0_stage2_grp0 : BOOLEAN;
    signal ap_block_pp0_stage3_grp0 : BOOLEAN;
    signal ap_block_pp0_stage4_grp0 : BOOLEAN;
    signal ap_block_pp0_stage5_grp0 : BOOLEAN;
    signal ap_block_pp0_stage6_grp0 : BOOLEAN;
    signal ap_block_pp0_stage7_grp0 : BOOLEAN;
    signal ap_block_pp0_stage8_grp0 : BOOLEAN;
    signal ap_block_pp0_stage9_grp0 : BOOLEAN;
    signal ap_block_pp0_stage10_grp0 : BOOLEAN;
    signal ap_block_pp0_stage11_grp0 : BOOLEAN;
    signal ap_block_pp0_stage12_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_grp0 : BOOLEAN;
    signal grp_fu_1564_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_1609_p27 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_1669_p27 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_1729_p27 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_1789_p27 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1849_p27 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_1909_p27 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_1969_p27 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_2029_p27 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_2089_p27 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_2149_p27 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_2209_p27 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_2269_p27 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_2329_p27 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln143_fu_2394_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_2398_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln143_fu_2408_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln143_1_fu_2418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln143_fu_2412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln143_fu_2424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln143_fu_2430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln143_1_fu_2444_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_2448_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln143_1_fu_2458_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln143_3_fu_2468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln143_2_fu_2462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln143_1_fu_2474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln143_1_fu_2480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln143_2_fu_2494_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_2498_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln143_2_fu_2508_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln143_5_fu_2518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln143_4_fu_2512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln143_2_fu_2524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln143_2_fu_2530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln143_3_fu_2544_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_2548_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln143_3_fu_2558_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln143_7_fu_2568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln143_6_fu_2562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln143_3_fu_2574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln143_3_fu_2580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln143_4_fu_2594_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_2598_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln143_4_fu_2608_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln143_9_fu_2618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln143_8_fu_2612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln143_4_fu_2624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln143_4_fu_2630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln143_5_fu_2644_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_fu_2648_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln143_5_fu_2658_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln143_11_fu_2668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln143_10_fu_2662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln143_5_fu_2674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln143_5_fu_2680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln143_6_fu_2694_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_fu_2698_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln143_6_fu_2708_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln143_13_fu_2718_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln143_12_fu_2712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln143_6_fu_2724_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln143_6_fu_2730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln143_7_fu_2744_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_fu_2748_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln143_7_fu_2758_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln143_15_fu_2768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln143_14_fu_2762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln143_7_fu_2774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln143_7_fu_2780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln143_8_fu_2794_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_fu_2798_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln143_8_fu_2808_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln143_17_fu_2818_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln143_16_fu_2812_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln143_8_fu_2824_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln143_8_fu_2830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln143_9_fu_2844_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_fu_2848_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln143_9_fu_2858_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln143_19_fu_2868_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln143_18_fu_2862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln143_9_fu_2874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln143_9_fu_2880_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln143_10_fu_2894_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_fu_2898_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln143_10_fu_2908_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln143_21_fu_2918_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln143_20_fu_2912_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln143_10_fu_2924_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln143_10_fu_2930_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln143_11_fu_2944_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_47_fu_2948_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln143_11_fu_2958_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln143_23_fu_2968_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln143_22_fu_2962_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln143_11_fu_2974_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln143_11_fu_2980_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln143_12_fu_2994_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_49_fu_2997_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln143_12_fu_3007_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln143_25_fu_3017_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln143_24_fu_3011_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln143_12_fu_3023_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln143_12_fu_3029_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1560_ce : STD_LOGIC;
    signal grp_fu_1564_ce : STD_LOGIC;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_block_pp0_stage5_00001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage6_00001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage7_00001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage8_00001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage9_00001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage10_00001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage11_00001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage12_00001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_00001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage1_00001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage2_00001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage3_00001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage4_00001_grp0 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal tmp_fu_1609_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_1609_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_1609_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_1609_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_1609_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_1609_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_1609_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_1609_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_1609_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_1609_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_1609_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_1609_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_1609_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1669_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1669_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1669_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1669_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1669_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1669_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1669_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1669_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1669_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1669_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1669_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1669_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1669_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_1729_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_1729_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_1729_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_1729_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_1729_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_1729_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_1729_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_1729_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_1729_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_1729_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_1729_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_1729_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_1729_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_1789_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_1789_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_1789_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_1789_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_1789_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_1789_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_1789_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_1789_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_1789_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_1789_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_1789_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_1789_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_1789_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_1849_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_1849_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_1849_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_1849_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_1849_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_1849_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_1849_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_1849_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_1849_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_1849_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_1849_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_1849_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_1849_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_1909_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_1909_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_1909_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_1909_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_1909_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_1909_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_1909_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_1909_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_1909_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_1909_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_1909_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_1909_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_1909_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_1969_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_1969_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_1969_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_1969_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_1969_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_1969_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_1969_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_1969_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_1969_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_1969_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_1969_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_1969_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_1969_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_2029_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_2029_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_2029_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_2029_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_2029_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_2029_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_2029_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_2029_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_2029_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_2029_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_2029_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_2029_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_2029_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_2089_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_2089_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_2089_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_2089_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_2089_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_2089_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_2089_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_2089_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_2089_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_2089_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_2089_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_2089_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_2089_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_2149_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_2149_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_2149_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_2149_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_2149_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_2149_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_2149_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_2149_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_2149_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_2149_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_2149_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_2149_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_2149_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_2209_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_2209_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_2209_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_2209_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_2209_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_2209_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_2209_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_2209_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_2209_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_2209_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_2209_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_2209_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_2209_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_2269_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_2269_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_2269_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_2269_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_2269_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_2269_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_2269_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_2269_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_2269_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_2269_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_2269_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_2269_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_2269_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_2329_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_2329_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_2329_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_2329_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_2329_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_2329_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_2329_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_2329_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_2329_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_2329_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_2329_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_2329_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_2329_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component conv4_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv4_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv4_sparsemux_27_4_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (3 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (3 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (3 downto 0);
        din11_WIDTH : INTEGER;
        CASE12 : STD_LOGIC_VECTOR (3 downto 0);
        din12_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        def : IN STD_LOGIC_VECTOR (31 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv4_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_27_4_32_1_1_U1823 : component conv4_sparsemux_27_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 32,
        CASE1 => "0001",
        din1_WIDTH => 32,
        CASE2 => "0010",
        din2_WIDTH => 32,
        CASE3 => "0011",
        din3_WIDTH => 32,
        CASE4 => "0100",
        din4_WIDTH => 32,
        CASE5 => "0101",
        din5_WIDTH => 32,
        CASE6 => "0110",
        din6_WIDTH => 32,
        CASE7 => "0111",
        din7_WIDTH => 32,
        CASE8 => "1000",
        din8_WIDTH => 32,
        CASE9 => "1001",
        din9_WIDTH => 32,
        CASE10 => "1010",
        din10_WIDTH => 32,
        CASE11 => "1011",
        din11_WIDTH => 32,
        CASE12 => "1100",
        din12_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => add1809235_reload,
        din1 => add180_19248_reload,
        din2 => add180_29261_reload,
        din3 => add180_39274_reload,
        din4 => add180_49287_reload,
        din5 => add180_59300_reload,
        din6 => add180_69313_reload,
        din7 => add180_79326_reload,
        din8 => add180_89339_reload,
        din9 => add180_99352_reload,
        din10 => add180_109365_reload,
        din11 => add180_119378_reload,
        din12 => add180_129391_reload,
        def => tmp_fu_1609_p27,
        sel => ap_sig_allocacmp_i,
        dout => tmp_fu_1609_p29);

    sparsemux_27_4_32_1_1_U1824 : component conv4_sparsemux_27_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 32,
        CASE1 => "0001",
        din1_WIDTH => 32,
        CASE2 => "0010",
        din2_WIDTH => 32,
        CASE3 => "0011",
        din3_WIDTH => 32,
        CASE4 => "0100",
        din4_WIDTH => 32,
        CASE5 => "0101",
        din5_WIDTH => 32,
        CASE6 => "0110",
        din6_WIDTH => 32,
        CASE7 => "0111",
        din7_WIDTH => 32,
        CASE8 => "1000",
        din8_WIDTH => 32,
        CASE9 => "1001",
        din9_WIDTH => 32,
        CASE10 => "1010",
        din10_WIDTH => 32,
        CASE11 => "1011",
        din11_WIDTH => 32,
        CASE12 => "1100",
        din12_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => add180_182579236_reload,
        din1 => add180_1_19249_reload,
        din2 => add180_2_19262_reload,
        din3 => add180_3_19275_reload,
        din4 => add180_4_19288_reload,
        din5 => add180_5_19301_reload,
        din6 => add180_6_19314_reload,
        din7 => add180_7_19327_reload,
        din8 => add180_8_19340_reload,
        din9 => add180_9_19353_reload,
        din10 => add180_10_19366_reload,
        din11 => add180_11_19379_reload,
        din12 => add180_12_19392_reload,
        def => tmp_1_fu_1669_p27,
        sel => ap_sig_allocacmp_i,
        dout => tmp_1_fu_1669_p29);

    sparsemux_27_4_32_1_1_U1825 : component conv4_sparsemux_27_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 32,
        CASE1 => "0001",
        din1_WIDTH => 32,
        CASE2 => "0010",
        din2_WIDTH => 32,
        CASE3 => "0011",
        din3_WIDTH => 32,
        CASE4 => "0100",
        din4_WIDTH => 32,
        CASE5 => "0101",
        din5_WIDTH => 32,
        CASE6 => "0110",
        din6_WIDTH => 32,
        CASE7 => "0111",
        din7_WIDTH => 32,
        CASE8 => "1000",
        din8_WIDTH => 32,
        CASE9 => "1001",
        din9_WIDTH => 32,
        CASE10 => "1010",
        din10_WIDTH => 32,
        CASE11 => "1011",
        din11_WIDTH => 32,
        CASE12 => "1100",
        din12_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => add180_282749237_reload,
        din1 => add180_1_29250_reload,
        din2 => add180_2_29263_reload,
        din3 => add180_3_29276_reload,
        din4 => add180_4_29289_reload,
        din5 => add180_5_29302_reload,
        din6 => add180_6_29315_reload,
        din7 => add180_7_29328_reload,
        din8 => add180_8_29341_reload,
        din9 => add180_9_29354_reload,
        din10 => add180_10_29367_reload,
        din11 => add180_11_29380_reload,
        din12 => add180_12_29393_reload,
        def => tmp_2_fu_1729_p27,
        sel => ap_sig_allocacmp_i,
        dout => tmp_2_fu_1729_p29);

    sparsemux_27_4_32_1_1_U1826 : component conv4_sparsemux_27_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 32,
        CASE1 => "0001",
        din1_WIDTH => 32,
        CASE2 => "0010",
        din2_WIDTH => 32,
        CASE3 => "0011",
        din3_WIDTH => 32,
        CASE4 => "0100",
        din4_WIDTH => 32,
        CASE5 => "0101",
        din5_WIDTH => 32,
        CASE6 => "0110",
        din6_WIDTH => 32,
        CASE7 => "0111",
        din7_WIDTH => 32,
        CASE8 => "1000",
        din8_WIDTH => 32,
        CASE9 => "1001",
        din9_WIDTH => 32,
        CASE10 => "1010",
        din10_WIDTH => 32,
        CASE11 => "1011",
        din11_WIDTH => 32,
        CASE12 => "1100",
        din12_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => add180_382919238_reload,
        din1 => add180_1_39251_reload,
        din2 => add180_2_39264_reload,
        din3 => add180_3_39277_reload,
        din4 => add180_4_39290_reload,
        din5 => add180_5_39303_reload,
        din6 => add180_6_39316_reload,
        din7 => add180_7_39329_reload,
        din8 => add180_8_39342_reload,
        din9 => add180_9_39355_reload,
        din10 => add180_10_39368_reload,
        din11 => add180_11_39381_reload,
        din12 => add180_12_39394_reload,
        def => tmp_3_fu_1789_p27,
        sel => ap_sig_allocacmp_i,
        dout => tmp_3_fu_1789_p29);

    sparsemux_27_4_32_1_1_U1827 : component conv4_sparsemux_27_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 32,
        CASE1 => "0001",
        din1_WIDTH => 32,
        CASE2 => "0010",
        din2_WIDTH => 32,
        CASE3 => "0011",
        din3_WIDTH => 32,
        CASE4 => "0100",
        din4_WIDTH => 32,
        CASE5 => "0101",
        din5_WIDTH => 32,
        CASE6 => "0110",
        din6_WIDTH => 32,
        CASE7 => "0111",
        din7_WIDTH => 32,
        CASE8 => "1000",
        din8_WIDTH => 32,
        CASE9 => "1001",
        din9_WIDTH => 32,
        CASE10 => "1010",
        din10_WIDTH => 32,
        CASE11 => "1011",
        din11_WIDTH => 32,
        CASE12 => "1100",
        din12_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => add180_483089239_reload,
        din1 => add180_1_49252_reload,
        din2 => add180_2_49265_reload,
        din3 => add180_3_49278_reload,
        din4 => add180_4_49291_reload,
        din5 => add180_5_49304_reload,
        din6 => add180_6_49317_reload,
        din7 => add180_7_49330_reload,
        din8 => add180_8_49343_reload,
        din9 => add180_9_49356_reload,
        din10 => add180_10_49369_reload,
        din11 => add180_11_49382_reload,
        din12 => add180_12_49395_reload,
        def => tmp_4_fu_1849_p27,
        sel => ap_sig_allocacmp_i,
        dout => tmp_4_fu_1849_p29);

    sparsemux_27_4_32_1_1_U1828 : component conv4_sparsemux_27_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 32,
        CASE1 => "0001",
        din1_WIDTH => 32,
        CASE2 => "0010",
        din2_WIDTH => 32,
        CASE3 => "0011",
        din3_WIDTH => 32,
        CASE4 => "0100",
        din4_WIDTH => 32,
        CASE5 => "0101",
        din5_WIDTH => 32,
        CASE6 => "0110",
        din6_WIDTH => 32,
        CASE7 => "0111",
        din7_WIDTH => 32,
        CASE8 => "1000",
        din8_WIDTH => 32,
        CASE9 => "1001",
        din9_WIDTH => 32,
        CASE10 => "1010",
        din10_WIDTH => 32,
        CASE11 => "1011",
        din11_WIDTH => 32,
        CASE12 => "1100",
        din12_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => add180_583259240_reload,
        din1 => add180_1_59253_reload,
        din2 => add180_2_59266_reload,
        din3 => add180_3_59279_reload,
        din4 => add180_4_59292_reload,
        din5 => add180_5_59305_reload,
        din6 => add180_6_59318_reload,
        din7 => add180_7_59331_reload,
        din8 => add180_8_59344_reload,
        din9 => add180_9_59357_reload,
        din10 => add180_10_59370_reload,
        din11 => add180_11_59383_reload,
        din12 => add180_12_59396_reload,
        def => tmp_5_fu_1909_p27,
        sel => ap_sig_allocacmp_i,
        dout => tmp_5_fu_1909_p29);

    sparsemux_27_4_32_1_1_U1829 : component conv4_sparsemux_27_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 32,
        CASE1 => "0001",
        din1_WIDTH => 32,
        CASE2 => "0010",
        din2_WIDTH => 32,
        CASE3 => "0011",
        din3_WIDTH => 32,
        CASE4 => "0100",
        din4_WIDTH => 32,
        CASE5 => "0101",
        din5_WIDTH => 32,
        CASE6 => "0110",
        din6_WIDTH => 32,
        CASE7 => "0111",
        din7_WIDTH => 32,
        CASE8 => "1000",
        din8_WIDTH => 32,
        CASE9 => "1001",
        din9_WIDTH => 32,
        CASE10 => "1010",
        din10_WIDTH => 32,
        CASE11 => "1011",
        din11_WIDTH => 32,
        CASE12 => "1100",
        din12_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => add180_683429241_reload,
        din1 => add180_1_69254_reload,
        din2 => add180_2_69267_reload,
        din3 => add180_3_69280_reload,
        din4 => add180_4_69293_reload,
        din5 => add180_5_69306_reload,
        din6 => add180_6_69319_reload,
        din7 => add180_7_69332_reload,
        din8 => add180_8_69345_reload,
        din9 => add180_9_69358_reload,
        din10 => add180_10_69371_reload,
        din11 => add180_11_69384_reload,
        din12 => add180_12_69397_reload,
        def => tmp_6_fu_1969_p27,
        sel => ap_sig_allocacmp_i,
        dout => tmp_6_fu_1969_p29);

    sparsemux_27_4_32_1_1_U1830 : component conv4_sparsemux_27_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 32,
        CASE1 => "0001",
        din1_WIDTH => 32,
        CASE2 => "0010",
        din2_WIDTH => 32,
        CASE3 => "0011",
        din3_WIDTH => 32,
        CASE4 => "0100",
        din4_WIDTH => 32,
        CASE5 => "0101",
        din5_WIDTH => 32,
        CASE6 => "0110",
        din6_WIDTH => 32,
        CASE7 => "0111",
        din7_WIDTH => 32,
        CASE8 => "1000",
        din8_WIDTH => 32,
        CASE9 => "1001",
        din9_WIDTH => 32,
        CASE10 => "1010",
        din10_WIDTH => 32,
        CASE11 => "1011",
        din11_WIDTH => 32,
        CASE12 => "1100",
        din12_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => add180_783599242_reload,
        din1 => add180_1_79255_reload,
        din2 => add180_2_79268_reload,
        din3 => add180_3_79281_reload,
        din4 => add180_4_79294_reload,
        din5 => add180_5_79307_reload,
        din6 => add180_6_79320_reload,
        din7 => add180_7_79333_reload,
        din8 => add180_8_79346_reload,
        din9 => add180_9_79359_reload,
        din10 => add180_10_79372_reload,
        din11 => add180_11_79385_reload,
        din12 => add180_12_79398_reload,
        def => tmp_7_fu_2029_p27,
        sel => ap_sig_allocacmp_i,
        dout => tmp_7_fu_2029_p29);

    sparsemux_27_4_32_1_1_U1831 : component conv4_sparsemux_27_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 32,
        CASE1 => "0001",
        din1_WIDTH => 32,
        CASE2 => "0010",
        din2_WIDTH => 32,
        CASE3 => "0011",
        din3_WIDTH => 32,
        CASE4 => "0100",
        din4_WIDTH => 32,
        CASE5 => "0101",
        din5_WIDTH => 32,
        CASE6 => "0110",
        din6_WIDTH => 32,
        CASE7 => "0111",
        din7_WIDTH => 32,
        CASE8 => "1000",
        din8_WIDTH => 32,
        CASE9 => "1001",
        din9_WIDTH => 32,
        CASE10 => "1010",
        din10_WIDTH => 32,
        CASE11 => "1011",
        din11_WIDTH => 32,
        CASE12 => "1100",
        din12_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => add180_883769243_reload,
        din1 => add180_1_89256_reload,
        din2 => add180_2_89269_reload,
        din3 => add180_3_89282_reload,
        din4 => add180_4_89295_reload,
        din5 => add180_5_89308_reload,
        din6 => add180_6_89321_reload,
        din7 => add180_7_89334_reload,
        din8 => add180_8_89347_reload,
        din9 => add180_9_89360_reload,
        din10 => add180_10_89373_reload,
        din11 => add180_11_89386_reload,
        din12 => add180_12_89399_reload,
        def => tmp_8_fu_2089_p27,
        sel => ap_sig_allocacmp_i,
        dout => tmp_8_fu_2089_p29);

    sparsemux_27_4_32_1_1_U1832 : component conv4_sparsemux_27_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 32,
        CASE1 => "0001",
        din1_WIDTH => 32,
        CASE2 => "0010",
        din2_WIDTH => 32,
        CASE3 => "0011",
        din3_WIDTH => 32,
        CASE4 => "0100",
        din4_WIDTH => 32,
        CASE5 => "0101",
        din5_WIDTH => 32,
        CASE6 => "0110",
        din6_WIDTH => 32,
        CASE7 => "0111",
        din7_WIDTH => 32,
        CASE8 => "1000",
        din8_WIDTH => 32,
        CASE9 => "1001",
        din9_WIDTH => 32,
        CASE10 => "1010",
        din10_WIDTH => 32,
        CASE11 => "1011",
        din11_WIDTH => 32,
        CASE12 => "1100",
        din12_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => add180_983939244_reload,
        din1 => add180_1_99257_reload,
        din2 => add180_2_99270_reload,
        din3 => add180_3_99283_reload,
        din4 => add180_4_99296_reload,
        din5 => add180_5_99309_reload,
        din6 => add180_6_99322_reload,
        din7 => add180_7_99335_reload,
        din8 => add180_8_99348_reload,
        din9 => add180_9_99361_reload,
        din10 => add180_10_99374_reload,
        din11 => add180_11_99387_reload,
        din12 => add180_12_99400_reload,
        def => tmp_9_fu_2149_p27,
        sel => ap_sig_allocacmp_i,
        dout => tmp_9_fu_2149_p29);

    sparsemux_27_4_32_1_1_U1833 : component conv4_sparsemux_27_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 32,
        CASE1 => "0001",
        din1_WIDTH => 32,
        CASE2 => "0010",
        din2_WIDTH => 32,
        CASE3 => "0011",
        din3_WIDTH => 32,
        CASE4 => "0100",
        din4_WIDTH => 32,
        CASE5 => "0101",
        din5_WIDTH => 32,
        CASE6 => "0110",
        din6_WIDTH => 32,
        CASE7 => "0111",
        din7_WIDTH => 32,
        CASE8 => "1000",
        din8_WIDTH => 32,
        CASE9 => "1001",
        din9_WIDTH => 32,
        CASE10 => "1010",
        din10_WIDTH => 32,
        CASE11 => "1011",
        din11_WIDTH => 32,
        CASE12 => "1100",
        din12_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => add180_1084109245_reload,
        din1 => add180_1_109258_reload,
        din2 => add180_2_109271_reload,
        din3 => add180_3_109284_reload,
        din4 => add180_4_109297_reload,
        din5 => add180_5_109310_reload,
        din6 => add180_6_109323_reload,
        din7 => add180_7_109336_reload,
        din8 => add180_8_109349_reload,
        din9 => add180_9_109362_reload,
        din10 => add180_10_109375_reload,
        din11 => add180_11_109388_reload,
        din12 => add180_12_109401_reload,
        def => tmp_s_fu_2209_p27,
        sel => ap_sig_allocacmp_i,
        dout => tmp_s_fu_2209_p29);

    sparsemux_27_4_32_1_1_U1834 : component conv4_sparsemux_27_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 32,
        CASE1 => "0001",
        din1_WIDTH => 32,
        CASE2 => "0010",
        din2_WIDTH => 32,
        CASE3 => "0011",
        din3_WIDTH => 32,
        CASE4 => "0100",
        din4_WIDTH => 32,
        CASE5 => "0101",
        din5_WIDTH => 32,
        CASE6 => "0110",
        din6_WIDTH => 32,
        CASE7 => "0111",
        din7_WIDTH => 32,
        CASE8 => "1000",
        din8_WIDTH => 32,
        CASE9 => "1001",
        din9_WIDTH => 32,
        CASE10 => "1010",
        din10_WIDTH => 32,
        CASE11 => "1011",
        din11_WIDTH => 32,
        CASE12 => "1100",
        din12_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => add180_1184279246_reload,
        din1 => add180_1_119259_reload,
        din2 => add180_2_119272_reload,
        din3 => add180_3_119285_reload,
        din4 => add180_4_119298_reload,
        din5 => add180_5_119311_reload,
        din6 => add180_6_119324_reload,
        din7 => add180_7_119337_reload,
        din8 => add180_8_119350_reload,
        din9 => add180_9_119363_reload,
        din10 => add180_10_119376_reload,
        din11 => add180_11_119389_reload,
        din12 => add180_12_119402_reload,
        def => tmp_10_fu_2269_p27,
        sel => ap_sig_allocacmp_i,
        dout => tmp_10_fu_2269_p29);

    sparsemux_27_4_32_1_1_U1835 : component conv4_sparsemux_27_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 32,
        CASE1 => "0001",
        din1_WIDTH => 32,
        CASE2 => "0010",
        din2_WIDTH => 32,
        CASE3 => "0011",
        din3_WIDTH => 32,
        CASE4 => "0100",
        din4_WIDTH => 32,
        CASE5 => "0101",
        din5_WIDTH => 32,
        CASE6 => "0110",
        din6_WIDTH => 32,
        CASE7 => "0111",
        din7_WIDTH => 32,
        CASE8 => "1000",
        din8_WIDTH => 32,
        CASE9 => "1001",
        din9_WIDTH => 32,
        CASE10 => "1010",
        din10_WIDTH => 32,
        CASE11 => "1011",
        din11_WIDTH => 32,
        CASE12 => "1100",
        din12_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => add180_1284449247_reload,
        din1 => add180_1_129260_reload,
        din2 => add180_2_129273_reload,
        din3 => add180_3_129286_reload,
        din4 => add180_4_129299_reload,
        din5 => add180_5_129312_reload,
        din6 => add180_6_129325_reload,
        din7 => add180_7_129338_reload,
        din8 => add180_8_129351_reload,
        din9 => add180_9_129364_reload,
        din10 => add180_10_129377_reload,
        din11 => add180_11_129390_reload,
        din12 => add180_12_129412_reload,
        def => tmp_11_fu_2329_p27,
        sel => ap_sig_allocacmp_i,
        dout => tmp_11_fu_2329_p29);

    flow_control_loop_pipe_sequential_init_U : component conv4_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage6,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_block_pp0_stage0_subdone_grp0_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage0_subdone_grp0_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                        ap_block_pp0_stage0_subdone_grp0_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0)) then 
                        ap_block_pp0_stage0_subdone_grp0_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage10_subdone_grp0_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage10_subdone_grp0_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then 
                        ap_block_pp0_stage10_subdone_grp0_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone_grp0)) then 
                        ap_block_pp0_stage10_subdone_grp0_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage11_subdone_grp0_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage11_subdone_grp0_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then 
                        ap_block_pp0_stage11_subdone_grp0_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone_grp0)) then 
                        ap_block_pp0_stage11_subdone_grp0_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage12_subdone_grp0_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage12_subdone_grp0_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then 
                        ap_block_pp0_stage12_subdone_grp0_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone_grp0)) then 
                        ap_block_pp0_stage12_subdone_grp0_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage1_subdone_grp0_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage1_subdone_grp0_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then 
                        ap_block_pp0_stage1_subdone_grp0_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp0)) then 
                        ap_block_pp0_stage1_subdone_grp0_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage2_subdone_grp0_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage2_subdone_grp0_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then 
                        ap_block_pp0_stage2_subdone_grp0_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone_grp0)) then 
                        ap_block_pp0_stage2_subdone_grp0_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage3_subdone_grp0_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage3_subdone_grp0_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then 
                        ap_block_pp0_stage3_subdone_grp0_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone_grp0)) then 
                        ap_block_pp0_stage3_subdone_grp0_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage4_subdone_grp0_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage4_subdone_grp0_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then 
                        ap_block_pp0_stage4_subdone_grp0_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone_grp0)) then 
                        ap_block_pp0_stage4_subdone_grp0_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage5_subdone_grp0_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage5_subdone_grp0_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then 
                        ap_block_pp0_stage5_subdone_grp0_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone_grp0)) then 
                        ap_block_pp0_stage5_subdone_grp0_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage6_subdone_grp0_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage6_subdone_grp0_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then 
                        ap_block_pp0_stage6_subdone_grp0_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone_grp0)) then 
                        ap_block_pp0_stage6_subdone_grp0_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage7_subdone_grp0_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage7_subdone_grp0_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then 
                        ap_block_pp0_stage7_subdone_grp0_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone_grp0)) then 
                        ap_block_pp0_stage7_subdone_grp0_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage8_subdone_grp0_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage8_subdone_grp0_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then 
                        ap_block_pp0_stage8_subdone_grp0_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone_grp0)) then 
                        ap_block_pp0_stage8_subdone_grp0_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage9_subdone_grp0_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage9_subdone_grp0_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then 
                        ap_block_pp0_stage9_subdone_grp0_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone_grp0)) then 
                        ap_block_pp0_stage9_subdone_grp0_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage6)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    i_2_fu_426_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((icmp_ln136_fu_1591_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_2_fu_426 <= add_ln136_fu_1597_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_2_fu_426 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln136_reg_3055 <= icmp_ln136_fu_1591_p2;
                tmp_10_reg_3131 <= tmp_10_fu_2269_p29;
                tmp_11_reg_3136 <= tmp_11_fu_2329_p29;
                tmp_1_reg_3081 <= tmp_1_fu_1669_p29;
                tmp_2_reg_3086 <= tmp_2_fu_1729_p29;
                tmp_3_reg_3091 <= tmp_3_fu_1789_p29;
                tmp_4_reg_3096 <= tmp_4_fu_1849_p29;
                tmp_5_reg_3101 <= tmp_5_fu_1909_p29;
                tmp_6_reg_3106 <= tmp_6_fu_1969_p29;
                tmp_7_reg_3111 <= tmp_7_fu_2029_p29;
                tmp_8_reg_3116 <= tmp_8_fu_2089_p29;
                tmp_9_reg_3121 <= tmp_9_fu_2149_p29;
                tmp_reg_3076 <= tmp_fu_1609_p29;
                tmp_s_reg_3126 <= tmp_s_fu_2209_p29;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001_grp0))) then
                out_15_reg_3191 <= grp_fu_22797_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 
    = ap_block_pp0_stage8_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001_grp0)))) then
                reg_1569 <= grp_fu_22797_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001_grp0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = 
    ap_block_pp0_stage9_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001_grp0)))) then
                reg_1574 <= grp_fu_22797_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001_grp0))) then
                select_ln136_10_reg_3197 <= select_ln136_10_fu_2936_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001_grp0))) then
                select_ln136_11_reg_3202 <= select_ln136_11_fu_2986_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001_grp0))) then
                select_ln136_12_reg_3207 <= select_ln136_12_fu_3035_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001_grp0))) then
                select_ln136_1_reg_3146 <= select_ln136_1_fu_2486_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001_grp0))) then
                select_ln136_2_reg_3151 <= select_ln136_2_fu_2536_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001_grp0))) then
                select_ln136_3_reg_3156 <= select_ln136_3_fu_2586_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001_grp0))) then
                select_ln136_4_reg_3161 <= select_ln136_4_fu_2636_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001_grp0))) then
                select_ln136_5_reg_3166 <= select_ln136_5_fu_2686_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001_grp0))) then
                select_ln136_6_reg_3171 <= select_ln136_6_fu_2736_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0))) then
                select_ln136_7_reg_3176 <= select_ln136_7_fu_2786_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp0))) then
                select_ln136_8_reg_3181 <= select_ln136_8_fu_2836_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001_grp0))) then
                select_ln136_9_reg_3186 <= select_ln136_9_fu_2886_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001_grp0))) then
                select_ln136_reg_3141 <= select_ln136_fu_2436_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage6_subdone, ap_condition_exit_pp0_iter0_stage6, ap_block_pp0_stage12_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage0_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_idle_pp0_1to1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage6)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    add_ln136_fu_1597_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv4_1));
    and_ln143_10_fu_2930_p2 <= (or_ln143_10_fu_2924_p2 and grp_fu_26809_p_dout0);
    and_ln143_11_fu_2980_p2 <= (or_ln143_11_fu_2974_p2 and grp_fu_26809_p_dout0);
    and_ln143_12_fu_3029_p2 <= (or_ln143_12_fu_3023_p2 and grp_fu_26809_p_dout0);
    and_ln143_1_fu_2480_p2 <= (or_ln143_1_fu_2474_p2 and grp_fu_26809_p_dout0);
    and_ln143_2_fu_2530_p2 <= (or_ln143_2_fu_2524_p2 and grp_fu_26809_p_dout0);
    and_ln143_3_fu_2580_p2 <= (or_ln143_3_fu_2574_p2 and grp_fu_26809_p_dout0);
    and_ln143_4_fu_2630_p2 <= (or_ln143_4_fu_2624_p2 and grp_fu_26809_p_dout0);
    and_ln143_5_fu_2680_p2 <= (or_ln143_5_fu_2674_p2 and grp_fu_26809_p_dout0);
    and_ln143_6_fu_2730_p2 <= (or_ln143_6_fu_2724_p2 and grp_fu_26809_p_dout0);
    and_ln143_7_fu_2780_p2 <= (or_ln143_7_fu_2774_p2 and grp_fu_26809_p_dout0);
    and_ln143_8_fu_2830_p2 <= (or_ln143_8_fu_2824_p2 and grp_fu_26809_p_dout0);
    and_ln143_9_fu_2880_p2 <= (or_ln143_9_fu_2874_p2 and grp_fu_26809_p_dout0);
    and_ln143_fu_2430_p2 <= (or_ln143_fu_2424_p2 and grp_fu_26809_p_dout0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001_grp7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem0_0_WREADY)
    begin
                ap_block_pp0_stage0_11001 <= ((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage0_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_grp7_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem0_0_WREADY)
    begin
                ap_block_pp0_stage0_11001_grp7 <= ((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage0_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_grp7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem0_0_WREADY)
    begin
                ap_block_pp0_stage0_subdone <= ((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage0_subdone_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_00001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_01001_grp4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage10_11001_grp4_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state11_io_grp4)
    begin
                ap_block_pp0_stage10_11001_grp4 <= ((ap_const_boolean_1 = ap_block_state11_io_grp4) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage10_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_grp4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage10_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state11_io_grp4)
    begin
                ap_block_pp0_stage10_subdone <= ((ap_const_boolean_1 = ap_block_state11_io_grp4) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage10_subdone_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_00001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_01001_grp5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage11_11001_grp5_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state12_io_grp5)
    begin
                ap_block_pp0_stage11_11001_grp5 <= ((ap_const_boolean_1 = ap_block_state12_io_grp5) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage11_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_grp5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage11_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state12_io_grp5)
    begin
                ap_block_pp0_stage11_subdone <= ((ap_const_boolean_1 = ap_block_state12_io_grp5) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage11_subdone_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_00001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_01001_grp6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage12_11001_grp6_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state13_io_grp6)
    begin
                ap_block_pp0_stage12_11001_grp6 <= ((ap_const_boolean_1 = ap_block_state13_io_grp6) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage12_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_grp6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage12_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state13_io_grp6)
    begin
                ap_block_pp0_stage12_subdone <= ((ap_const_boolean_1 = ap_block_state13_io_grp6) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage12_subdone_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_01001_grp8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem0_0_WREADY)
    begin
                ap_block_pp0_stage1_11001 <= ((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage1_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_grp8_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem0_0_WREADY)
    begin
                ap_block_pp0_stage1_11001_grp8 <= ((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage1_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_grp8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem0_0_WREADY)
    begin
                ap_block_pp0_stage1_subdone <= ((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage1_subdone_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_01001_grp9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem0_0_WREADY)
    begin
                ap_block_pp0_stage2_11001 <= ((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage2_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_grp9_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem0_0_WREADY)
    begin
                ap_block_pp0_stage2_11001_grp9 <= ((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage2_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_grp9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem0_0_WREADY)
    begin
                ap_block_pp0_stage2_subdone <= ((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage2_subdone_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_00001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_01001_grp10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem0_0_WREADY)
    begin
                ap_block_pp0_stage3_11001 <= ((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage3_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_11001_grp10_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem0_0_WREADY)
    begin
                ap_block_pp0_stage3_11001_grp10 <= ((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage3_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_grp10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem0_0_WREADY)
    begin
                ap_block_pp0_stage3_subdone <= ((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage3_subdone_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_00001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_01001_grp11 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem0_0_WREADY)
    begin
                ap_block_pp0_stage4_11001 <= ((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage4_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_11001_grp11_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem0_0_WREADY)
    begin
                ap_block_pp0_stage4_11001_grp11 <= ((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage4_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_grp11 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem0_0_WREADY)
    begin
                ap_block_pp0_stage4_subdone <= ((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage4_subdone_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_00001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_01001_grp12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage5_11001_grp12_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem0_0_WREADY)
    begin
                ap_block_pp0_stage5_11001_grp12 <= ((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage5_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_grp12 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage5_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem0_0_WREADY)
    begin
                ap_block_pp0_stage5_subdone <= ((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage5_subdone_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_00001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_01001_grp13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage6_11001_grp13_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem0_0_WREADY)
    begin
                ap_block_pp0_stage6_11001_grp13 <= ((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage6_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_grp13 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage6_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem0_0_WREADY)
    begin
                ap_block_pp0_stage6_subdone <= ((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage6_subdone_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_00001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_01001_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage7_11001_grp1_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state8_io_grp1)
    begin
                ap_block_pp0_stage7_11001_grp1 <= ((ap_const_boolean_1 = ap_block_state8_io_grp1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage7_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage7_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state8_io_grp1)
    begin
                ap_block_pp0_stage7_subdone <= ((ap_const_boolean_1 = ap_block_state8_io_grp1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage7_subdone_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_00001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_01001_grp2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage8_11001_grp2_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state9_io_grp2)
    begin
                ap_block_pp0_stage8_11001_grp2 <= ((ap_const_boolean_1 = ap_block_state9_io_grp2) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage8_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_grp2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage8_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state9_io_grp2)
    begin
                ap_block_pp0_stage8_subdone <= ((ap_const_boolean_1 = ap_block_state9_io_grp2) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage8_subdone_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_00001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_01001_grp3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage9_11001_grp3_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state10_io_grp3)
    begin
                ap_block_pp0_stage9_11001_grp3 <= ((ap_const_boolean_1 = ap_block_state10_io_grp3) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage9_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_grp3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage9_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state10_io_grp3)
    begin
                ap_block_pp0_stage9_subdone <= ((ap_const_boolean_1 = ap_block_state10_io_grp3) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage9_subdone_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state10_io_grp3_assign_proc : process(m_axi_gmem0_0_WREADY, icmp_ln136_reg_3055)
    begin
                ap_block_state10_io_grp3 <= ((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (icmp_ln136_reg_3055 = ap_const_lv1_0));
    end process;


    ap_block_state11_io_grp4_assign_proc : process(m_axi_gmem0_0_WREADY, icmp_ln136_reg_3055)
    begin
                ap_block_state11_io_grp4 <= ((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (icmp_ln136_reg_3055 = ap_const_lv1_0));
    end process;


    ap_block_state12_io_grp5_assign_proc : process(m_axi_gmem0_0_WREADY, icmp_ln136_reg_3055)
    begin
                ap_block_state12_io_grp5 <= ((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (icmp_ln136_reg_3055 = ap_const_lv1_0));
    end process;


    ap_block_state13_io_grp6_assign_proc : process(m_axi_gmem0_0_WREADY, icmp_ln136_reg_3055)
    begin
                ap_block_state13_io_grp6 <= ((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (icmp_ln136_reg_3055 = ap_const_lv1_0));
    end process;


    ap_block_state8_io_grp1_assign_proc : process(m_axi_gmem0_0_WREADY, icmp_ln136_reg_3055)
    begin
                ap_block_state8_io_grp1 <= ((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (icmp_ln136_reg_3055 = ap_const_lv1_0));
    end process;


    ap_block_state9_io_grp2_assign_proc : process(m_axi_gmem0_0_WREADY, icmp_ln136_reg_3055)
    begin
                ap_block_state9_io_grp2 <= ((m_axi_gmem0_0_WREADY = ap_const_logic_0) and (icmp_ln136_reg_3055 = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter0_stage6_assign_proc : process(ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_subdone, ap_enable_reg_pp0_iter0_reg, icmp_ln136_reg_3055)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (icmp_ln136_reg_3055 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone))) then 
            ap_condition_exit_pp0_iter0_stage6 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage6 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage6;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12_subdone)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, i_2_fu_426, ap_loop_init, ap_block_pp0_stage0)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i <= i_2_fu_426;
        end if; 
    end process;

    bitcast_ln143_10_fu_2894_p1 <= reg_1569;
    bitcast_ln143_11_fu_2944_p1 <= reg_1574;
    bitcast_ln143_12_fu_2994_p1 <= out_15_reg_3191;
    bitcast_ln143_1_fu_2444_p1 <= reg_1574;
    bitcast_ln143_2_fu_2494_p1 <= reg_1569;
    bitcast_ln143_3_fu_2544_p1 <= reg_1574;
    bitcast_ln143_4_fu_2594_p1 <= reg_1569;
    bitcast_ln143_5_fu_2644_p1 <= reg_1574;
    bitcast_ln143_6_fu_2694_p1 <= reg_1569;
    bitcast_ln143_7_fu_2744_p1 <= reg_1574;
    bitcast_ln143_8_fu_2794_p1 <= reg_1569;
    bitcast_ln143_9_fu_2844_p1 <= reg_1574;
    bitcast_ln143_fu_2394_p1 <= reg_1569;

    gmem0_blk_n_W_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage6, m_axi_gmem0_0_WREADY, ap_enable_reg_pp0_iter0_reg, icmp_ln136_reg_3055, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_grp1, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_grp2, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_grp3, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_grp4, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_grp5, ap_block_pp0_stage12_grp6, ap_block_pp0_stage0_grp7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_grp8, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_grp9, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_grp10, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_grp11, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_grp12, ap_block_pp0_stage6_grp13)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_grp13)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_grp12)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_grp11)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_grp10)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_grp9)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_grp8)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp7)) 
    or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (icmp_ln136_reg_3055 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11_grp5)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (icmp_ln136_reg_3055 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_grp4)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (icmp_ln136_reg_3055 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9_grp3)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (icmp_ln136_reg_3055 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8_grp2)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (icmp_ln136_reg_3055 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_grp1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) 
    and (icmp_ln136_reg_3055 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12_grp6)))) then 
            gmem0_blk_n_W <= m_axi_gmem0_0_WREADY;
        else 
            gmem0_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_1560_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage4_11001_grp0, ap_block_pp0_stage4_subdone_grp0_done_reg, ap_block_pp0_stage6_11001_grp0, ap_block_pp0_stage6_subdone_grp0_done_reg, ap_block_pp0_stage8_11001_grp0, ap_block_pp0_stage8_subdone_grp0_done_reg, ap_block_pp0_stage10_11001_grp0, ap_block_pp0_stage10_subdone_grp0_done_reg, ap_block_pp0_stage12_11001_grp0, ap_block_pp0_stage12_subdone_grp0_done_reg, ap_block_pp0_stage1_11001_grp0, ap_block_pp0_stage1_subdone_grp0_done_reg, ap_block_pp0_stage5_11001_grp0, ap_block_pp0_stage5_subdone_grp0_done_reg, ap_block_pp0_stage7_11001_grp0, ap_block_pp0_stage7_subdone_grp0_done_reg, ap_block_pp0_stage9_11001_grp0, ap_block_pp0_stage9_subdone_grp0_done_reg, ap_block_pp0_stage11_11001_grp0, ap_block_pp0_stage11_subdone_grp0_done_reg, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg, ap_block_pp0_stage2_11001_grp0, ap_block_pp0_stage2_subdone_grp0_done_reg, ap_block_pp0_stage3_11001_grp0, ap_block_pp0_stage3_subdone_grp0_done_reg)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp0)) 
    or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0)) 
    or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001_grp0)))) then 
            grp_fu_1560_ce <= ap_const_logic_1;
        else 
            grp_fu_1560_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1560_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage6, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, tmp_reg_3076, tmp_1_reg_3081, tmp_2_reg_3086, tmp_3_reg_3091, tmp_4_reg_3096, tmp_5_reg_3101, tmp_6_reg_3106, tmp_7_reg_3111, tmp_8_reg_3116, tmp_9_reg_3121, tmp_s_reg_3126, tmp_10_reg_3131, tmp_11_reg_3136, ap_block_pp0_stage1_grp0, ap_block_pp0_stage2_grp0, ap_block_pp0_stage3_grp0, ap_block_pp0_stage4_grp0, ap_block_pp0_stage5_grp0, ap_block_pp0_stage6_grp0, ap_block_pp0_stage7_grp0, ap_block_pp0_stage8_grp0, ap_block_pp0_stage9_grp0, ap_block_pp0_stage10_grp0, ap_block_pp0_stage11_grp0, ap_block_pp0_stage12_grp0, ap_block_pp0_stage0_grp0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp0))) then 
            grp_fu_1560_p0 <= tmp_11_reg_3136;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12_grp0))) then 
            grp_fu_1560_p0 <= tmp_10_reg_3131;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11_grp0))) then 
            grp_fu_1560_p0 <= tmp_s_reg_3126;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_grp0))) then 
            grp_fu_1560_p0 <= tmp_9_reg_3121;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9_grp0))) then 
            grp_fu_1560_p0 <= tmp_8_reg_3116;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8_grp0))) then 
            grp_fu_1560_p0 <= tmp_7_reg_3111;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_grp0))) then 
            grp_fu_1560_p0 <= tmp_6_reg_3106;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_grp0))) then 
            grp_fu_1560_p0 <= tmp_5_reg_3101;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_grp0))) then 
            grp_fu_1560_p0 <= tmp_4_reg_3096;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_grp0))) then 
            grp_fu_1560_p0 <= tmp_3_reg_3091;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_grp0))) then 
            grp_fu_1560_p0 <= tmp_2_reg_3086;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_grp0))) then 
            grp_fu_1560_p0 <= tmp_1_reg_3081;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_grp0))) then 
            grp_fu_1560_p0 <= tmp_reg_3076;
        else 
            grp_fu_1560_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1564_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage4_11001_grp0, ap_block_pp0_stage4_subdone_grp0_done_reg, ap_block_pp0_stage6_11001_grp0, ap_block_pp0_stage6_subdone_grp0_done_reg, ap_block_pp0_stage8_11001_grp0, ap_block_pp0_stage8_subdone_grp0_done_reg, ap_block_pp0_stage10_11001_grp0, ap_block_pp0_stage10_subdone_grp0_done_reg, ap_block_pp0_stage12_11001_grp0, ap_block_pp0_stage12_subdone_grp0_done_reg, ap_block_pp0_stage1_11001_grp0, ap_block_pp0_stage1_subdone_grp0_done_reg, ap_block_pp0_stage5_11001_grp0, ap_block_pp0_stage5_subdone_grp0_done_reg, ap_block_pp0_stage7_11001_grp0, ap_block_pp0_stage7_subdone_grp0_done_reg, ap_block_pp0_stage9_11001_grp0, ap_block_pp0_stage9_subdone_grp0_done_reg, ap_block_pp0_stage11_11001_grp0, ap_block_pp0_stage11_subdone_grp0_done_reg, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg, ap_block_pp0_stage2_11001_grp0, ap_block_pp0_stage2_subdone_grp0_done_reg, ap_block_pp0_stage3_11001_grp0, ap_block_pp0_stage3_subdone_grp0_done_reg)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp0)) 
    or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0)) 
    or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001_grp0)))) then 
            grp_fu_1564_ce <= ap_const_logic_1;
        else 
            grp_fu_1564_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1564_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage6, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, reg_1569, reg_1574, out_15_reg_3191, ap_block_pp0_stage1_grp0, ap_block_pp0_stage2_grp0, ap_block_pp0_stage3_grp0, ap_block_pp0_stage4_grp0, ap_block_pp0_stage5_grp0, ap_block_pp0_stage6_grp0, ap_block_pp0_stage7_grp0, ap_block_pp0_stage8_grp0, ap_block_pp0_stage9_grp0, ap_block_pp0_stage10_grp0, ap_block_pp0_stage11_grp0, ap_block_pp0_stage12_grp0, ap_block_pp0_stage0_grp0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_grp0))) then 
            grp_fu_1564_p0 <= out_15_reg_3191;
        elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_grp0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12_grp0)))) then 
            grp_fu_1564_p0 <= reg_1574;
        elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_grp0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_grp0)))) then 
            grp_fu_1564_p0 <= reg_1569;
        else 
            grp_fu_1564_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_22797_p_ce <= grp_fu_1560_ce;
    grp_fu_22797_p_din0 <= grp_fu_1560_p0;
    grp_fu_22797_p_din1 <= empty;
    grp_fu_22797_p_opcode <= ap_const_lv2_0;
    grp_fu_26809_p_ce <= grp_fu_1564_ce;
    grp_fu_26809_p_din0 <= grp_fu_1564_p0;
    grp_fu_26809_p_din1 <= ap_const_lv32_0;
    grp_fu_26809_p_opcode <= ap_const_lv5_2;
    icmp_ln136_fu_1591_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv4_D) else "0";
    icmp_ln143_10_fu_2662_p2 <= "0" when (tmp_35_fu_2648_p4 = ap_const_lv8_FF) else "1";
    icmp_ln143_11_fu_2668_p2 <= "1" when (trunc_ln143_5_fu_2658_p1 = ap_const_lv23_0) else "0";
    icmp_ln143_12_fu_2712_p2 <= "0" when (tmp_37_fu_2698_p4 = ap_const_lv8_FF) else "1";
    icmp_ln143_13_fu_2718_p2 <= "1" when (trunc_ln143_6_fu_2708_p1 = ap_const_lv23_0) else "0";
    icmp_ln143_14_fu_2762_p2 <= "0" when (tmp_39_fu_2748_p4 = ap_const_lv8_FF) else "1";
    icmp_ln143_15_fu_2768_p2 <= "1" when (trunc_ln143_7_fu_2758_p1 = ap_const_lv23_0) else "0";
    icmp_ln143_16_fu_2812_p2 <= "0" when (tmp_41_fu_2798_p4 = ap_const_lv8_FF) else "1";
    icmp_ln143_17_fu_2818_p2 <= "1" when (trunc_ln143_8_fu_2808_p1 = ap_const_lv23_0) else "0";
    icmp_ln143_18_fu_2862_p2 <= "0" when (tmp_43_fu_2848_p4 = ap_const_lv8_FF) else "1";
    icmp_ln143_19_fu_2868_p2 <= "1" when (trunc_ln143_9_fu_2858_p1 = ap_const_lv23_0) else "0";
    icmp_ln143_1_fu_2418_p2 <= "1" when (trunc_ln143_fu_2408_p1 = ap_const_lv23_0) else "0";
    icmp_ln143_20_fu_2912_p2 <= "0" when (tmp_45_fu_2898_p4 = ap_const_lv8_FF) else "1";
    icmp_ln143_21_fu_2918_p2 <= "1" when (trunc_ln143_10_fu_2908_p1 = ap_const_lv23_0) else "0";
    icmp_ln143_22_fu_2962_p2 <= "0" when (tmp_47_fu_2948_p4 = ap_const_lv8_FF) else "1";
    icmp_ln143_23_fu_2968_p2 <= "1" when (trunc_ln143_11_fu_2958_p1 = ap_const_lv23_0) else "0";
    icmp_ln143_24_fu_3011_p2 <= "0" when (tmp_49_fu_2997_p4 = ap_const_lv8_FF) else "1";
    icmp_ln143_25_fu_3017_p2 <= "1" when (trunc_ln143_12_fu_3007_p1 = ap_const_lv23_0) else "0";
    icmp_ln143_2_fu_2462_p2 <= "0" when (tmp_27_fu_2448_p4 = ap_const_lv8_FF) else "1";
    icmp_ln143_3_fu_2468_p2 <= "1" when (trunc_ln143_1_fu_2458_p1 = ap_const_lv23_0) else "0";
    icmp_ln143_4_fu_2512_p2 <= "0" when (tmp_29_fu_2498_p4 = ap_const_lv8_FF) else "1";
    icmp_ln143_5_fu_2518_p2 <= "1" when (trunc_ln143_2_fu_2508_p1 = ap_const_lv23_0) else "0";
    icmp_ln143_6_fu_2562_p2 <= "0" when (tmp_31_fu_2548_p4 = ap_const_lv8_FF) else "1";
    icmp_ln143_7_fu_2568_p2 <= "1" when (trunc_ln143_3_fu_2558_p1 = ap_const_lv23_0) else "0";
    icmp_ln143_8_fu_2612_p2 <= "0" when (tmp_33_fu_2598_p4 = ap_const_lv8_FF) else "1";
    icmp_ln143_9_fu_2618_p2 <= "1" when (trunc_ln143_4_fu_2608_p1 = ap_const_lv23_0) else "0";
    icmp_ln143_fu_2412_p2 <= "0" when (tmp_25_fu_2398_p4 = ap_const_lv8_FF) else "1";
    m_axi_gmem0_0_ARADDR <= ap_const_lv64_0;
    m_axi_gmem0_0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem0_0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem0_0_ARID <= ap_const_lv1_0;
    m_axi_gmem0_0_ARLEN <= ap_const_lv32_0;
    m_axi_gmem0_0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem0_0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem0_0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem0_0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem0_0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem0_0_ARUSER <= ap_const_lv1_0;
    m_axi_gmem0_0_ARVALID <= ap_const_logic_0;
    m_axi_gmem0_0_AWADDR <= ap_const_lv64_0;
    m_axi_gmem0_0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem0_0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem0_0_AWID <= ap_const_lv1_0;
    m_axi_gmem0_0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem0_0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem0_0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem0_0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem0_0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem0_0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem0_0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem0_0_AWVALID <= ap_const_logic_0;
    m_axi_gmem0_0_BREADY <= ap_const_logic_0;
    m_axi_gmem0_0_RREADY <= ap_const_logic_0;

    m_axi_gmem0_0_WDATA_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage6, ap_enable_reg_pp0_iter0_reg, icmp_ln136_reg_3055, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, select_ln136_reg_3141, select_ln136_1_reg_3146, select_ln136_2_reg_3151, select_ln136_3_reg_3156, select_ln136_4_reg_3161, select_ln136_5_reg_3166, select_ln136_6_reg_3171, select_ln136_7_reg_3176, select_ln136_8_reg_3181, select_ln136_9_reg_3186, select_ln136_10_reg_3197, select_ln136_11_reg_3202, select_ln136_12_reg_3207, ap_block_pp0_stage7_01001_grp1, ap_block_pp0_stage8_01001_grp2, ap_block_pp0_stage9_01001_grp3, ap_block_pp0_stage10_01001_grp4, ap_block_pp0_stage11_01001_grp5, ap_block_pp0_stage12_01001_grp6, ap_block_pp0_stage0_01001_grp7, ap_block_pp0_stage1_01001_grp8, ap_block_pp0_stage2_01001_grp9, ap_block_pp0_stage3_01001_grp10, ap_block_pp0_stage4_01001_grp11, ap_block_pp0_stage5_01001_grp12, ap_block_pp0_stage6_01001_grp13)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_01001_grp13))) then 
            m_axi_gmem0_0_WDATA <= select_ln136_12_reg_3207;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_01001_grp12))) then 
            m_axi_gmem0_0_WDATA <= select_ln136_11_reg_3202;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_01001_grp11))) then 
            m_axi_gmem0_0_WDATA <= select_ln136_10_reg_3197;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_01001_grp10))) then 
            m_axi_gmem0_0_WDATA <= select_ln136_9_reg_3186;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_01001_grp9))) then 
            m_axi_gmem0_0_WDATA <= select_ln136_8_reg_3181;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_01001_grp8))) then 
            m_axi_gmem0_0_WDATA <= select_ln136_7_reg_3176;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001_grp7))) then 
            m_axi_gmem0_0_WDATA <= select_ln136_6_reg_3171;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (icmp_ln136_reg_3055 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12_01001_grp6))) then 
            m_axi_gmem0_0_WDATA <= select_ln136_5_reg_3166;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (icmp_ln136_reg_3055 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11_01001_grp5))) then 
            m_axi_gmem0_0_WDATA <= select_ln136_4_reg_3161;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (icmp_ln136_reg_3055 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_01001_grp4))) then 
            m_axi_gmem0_0_WDATA <= select_ln136_3_reg_3156;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (icmp_ln136_reg_3055 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9_01001_grp3))) then 
            m_axi_gmem0_0_WDATA <= select_ln136_2_reg_3151;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (icmp_ln136_reg_3055 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8_01001_grp2))) then 
            m_axi_gmem0_0_WDATA <= select_ln136_1_reg_3146;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (icmp_ln136_reg_3055 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_01001_grp1))) then 
            m_axi_gmem0_0_WDATA <= select_ln136_reg_3141;
        else 
            m_axi_gmem0_0_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem0_0_WID <= ap_const_lv1_0;
    m_axi_gmem0_0_WLAST <= ap_const_logic_0;
    m_axi_gmem0_0_WSTRB <= ap_const_lv4_F;
    m_axi_gmem0_0_WUSER <= ap_const_lv1_0;

    m_axi_gmem0_0_WVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage6, ap_enable_reg_pp0_iter0_reg, icmp_ln136_reg_3055, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage0_11001_grp7, ap_block_pp0_stage7_11001_grp1, ap_block_pp0_stage8_11001_grp2, ap_block_pp0_stage9_11001_grp3, ap_block_pp0_stage10_11001_grp4, ap_block_pp0_stage11_11001_grp5, ap_block_pp0_stage12_11001_grp6, ap_block_pp0_stage1_11001_grp8, ap_block_pp0_stage2_11001_grp9, ap_block_pp0_stage3_11001_grp10, ap_block_pp0_stage4_11001_grp11, ap_block_pp0_stage5_11001_grp12, ap_block_pp0_stage6_11001_grp13)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001_grp13)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001_grp12)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001_grp11)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001_grp10)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001_grp9)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp8)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and 
    (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp7)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (icmp_ln136_reg_3055 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001_grp5)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (icmp_ln136_reg_3055 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001_grp4)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (icmp_ln136_reg_3055 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001_grp3)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (icmp_ln136_reg_3055 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001_grp2)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (icmp_ln136_reg_3055 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 
    = ap_block_pp0_stage7_11001_grp1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (icmp_ln136_reg_3055 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001_grp6)))) then 
            m_axi_gmem0_0_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem0_0_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    or_ln143_10_fu_2924_p2 <= (icmp_ln143_21_fu_2918_p2 or icmp_ln143_20_fu_2912_p2);
    or_ln143_11_fu_2974_p2 <= (icmp_ln143_23_fu_2968_p2 or icmp_ln143_22_fu_2962_p2);
    or_ln143_12_fu_3023_p2 <= (icmp_ln143_25_fu_3017_p2 or icmp_ln143_24_fu_3011_p2);
    or_ln143_1_fu_2474_p2 <= (icmp_ln143_3_fu_2468_p2 or icmp_ln143_2_fu_2462_p2);
    or_ln143_2_fu_2524_p2 <= (icmp_ln143_5_fu_2518_p2 or icmp_ln143_4_fu_2512_p2);
    or_ln143_3_fu_2574_p2 <= (icmp_ln143_7_fu_2568_p2 or icmp_ln143_6_fu_2562_p2);
    or_ln143_4_fu_2624_p2 <= (icmp_ln143_9_fu_2618_p2 or icmp_ln143_8_fu_2612_p2);
    or_ln143_5_fu_2674_p2 <= (icmp_ln143_11_fu_2668_p2 or icmp_ln143_10_fu_2662_p2);
    or_ln143_6_fu_2724_p2 <= (icmp_ln143_13_fu_2718_p2 or icmp_ln143_12_fu_2712_p2);
    or_ln143_7_fu_2774_p2 <= (icmp_ln143_15_fu_2768_p2 or icmp_ln143_14_fu_2762_p2);
    or_ln143_8_fu_2824_p2 <= (icmp_ln143_17_fu_2818_p2 or icmp_ln143_16_fu_2812_p2);
    or_ln143_9_fu_2874_p2 <= (icmp_ln143_19_fu_2868_p2 or icmp_ln143_18_fu_2862_p2);
    or_ln143_fu_2424_p2 <= (icmp_ln143_fu_2412_p2 or icmp_ln143_1_fu_2418_p2);
    select_ln136_10_fu_2936_p3 <= 
        bitcast_ln143_10_fu_2894_p1 when (and_ln143_10_fu_2930_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln136_11_fu_2986_p3 <= 
        bitcast_ln143_11_fu_2944_p1 when (and_ln143_11_fu_2980_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln136_12_fu_3035_p3 <= 
        bitcast_ln143_12_fu_2994_p1 when (and_ln143_12_fu_3029_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln136_1_fu_2486_p3 <= 
        bitcast_ln143_1_fu_2444_p1 when (and_ln143_1_fu_2480_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln136_2_fu_2536_p3 <= 
        bitcast_ln143_2_fu_2494_p1 when (and_ln143_2_fu_2530_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln136_3_fu_2586_p3 <= 
        bitcast_ln143_3_fu_2544_p1 when (and_ln143_3_fu_2580_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln136_4_fu_2636_p3 <= 
        bitcast_ln143_4_fu_2594_p1 when (and_ln143_4_fu_2630_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln136_5_fu_2686_p3 <= 
        bitcast_ln143_5_fu_2644_p1 when (and_ln143_5_fu_2680_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln136_6_fu_2736_p3 <= 
        bitcast_ln143_6_fu_2694_p1 when (and_ln143_6_fu_2730_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln136_7_fu_2786_p3 <= 
        bitcast_ln143_7_fu_2744_p1 when (and_ln143_7_fu_2780_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln136_8_fu_2836_p3 <= 
        bitcast_ln143_8_fu_2794_p1 when (and_ln143_8_fu_2830_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln136_9_fu_2886_p3 <= 
        bitcast_ln143_9_fu_2844_p1 when (and_ln143_9_fu_2880_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln136_fu_2436_p3 <= 
        bitcast_ln143_fu_2394_p1 when (and_ln143_fu_2430_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp_10_fu_2269_p27 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_11_fu_2329_p27 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_1_fu_1669_p27 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_25_fu_2398_p4 <= bitcast_ln143_fu_2394_p1(30 downto 23);
    tmp_27_fu_2448_p4 <= bitcast_ln143_1_fu_2444_p1(30 downto 23);
    tmp_29_fu_2498_p4 <= bitcast_ln143_2_fu_2494_p1(30 downto 23);
    tmp_2_fu_1729_p27 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_31_fu_2548_p4 <= bitcast_ln143_3_fu_2544_p1(30 downto 23);
    tmp_33_fu_2598_p4 <= bitcast_ln143_4_fu_2594_p1(30 downto 23);
    tmp_35_fu_2648_p4 <= bitcast_ln143_5_fu_2644_p1(30 downto 23);
    tmp_37_fu_2698_p4 <= bitcast_ln143_6_fu_2694_p1(30 downto 23);
    tmp_39_fu_2748_p4 <= bitcast_ln143_7_fu_2744_p1(30 downto 23);
    tmp_3_fu_1789_p27 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_41_fu_2798_p4 <= bitcast_ln143_8_fu_2794_p1(30 downto 23);
    tmp_43_fu_2848_p4 <= bitcast_ln143_9_fu_2844_p1(30 downto 23);
    tmp_45_fu_2898_p4 <= bitcast_ln143_10_fu_2894_p1(30 downto 23);
    tmp_47_fu_2948_p4 <= bitcast_ln143_11_fu_2944_p1(30 downto 23);
    tmp_49_fu_2997_p4 <= bitcast_ln143_12_fu_2994_p1(30 downto 23);
    tmp_4_fu_1849_p27 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_5_fu_1909_p27 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_6_fu_1969_p27 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_7_fu_2029_p27 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_8_fu_2089_p27 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_9_fu_2149_p27 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_fu_1609_p27 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_s_fu_2209_p27 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    trunc_ln143_10_fu_2908_p1 <= bitcast_ln143_10_fu_2894_p1(23 - 1 downto 0);
    trunc_ln143_11_fu_2958_p1 <= bitcast_ln143_11_fu_2944_p1(23 - 1 downto 0);
    trunc_ln143_12_fu_3007_p1 <= bitcast_ln143_12_fu_2994_p1(23 - 1 downto 0);
    trunc_ln143_1_fu_2458_p1 <= bitcast_ln143_1_fu_2444_p1(23 - 1 downto 0);
    trunc_ln143_2_fu_2508_p1 <= bitcast_ln143_2_fu_2494_p1(23 - 1 downto 0);
    trunc_ln143_3_fu_2558_p1 <= bitcast_ln143_3_fu_2544_p1(23 - 1 downto 0);
    trunc_ln143_4_fu_2608_p1 <= bitcast_ln143_4_fu_2594_p1(23 - 1 downto 0);
    trunc_ln143_5_fu_2658_p1 <= bitcast_ln143_5_fu_2644_p1(23 - 1 downto 0);
    trunc_ln143_6_fu_2708_p1 <= bitcast_ln143_6_fu_2694_p1(23 - 1 downto 0);
    trunc_ln143_7_fu_2758_p1 <= bitcast_ln143_7_fu_2744_p1(23 - 1 downto 0);
    trunc_ln143_8_fu_2808_p1 <= bitcast_ln143_8_fu_2794_p1(23 - 1 downto 0);
    trunc_ln143_9_fu_2858_p1 <= bitcast_ln143_9_fu_2844_p1(23 - 1 downto 0);
    trunc_ln143_fu_2408_p1 <= bitcast_ln143_fu_2394_p1(23 - 1 downto 0);
end behav;
